# handlers/content_commands.py - –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
import logging
import random
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

# –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
SAMPLE_POSTS = [
    {
        "id": "1",
        "title": "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        "content": "–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –Ω–æ–≤—ã–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º. –û—Å–æ–±–µ–Ω–Ω–æ —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–Ω–∞–∫–æ–≤ –æ–≥–Ω—è!",
        "category": "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è",
        "date": "2025-08-04",
        "views": 150
    },
    {
        "id": "2", 
        "title": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        "content": "–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ.",
        "category": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
        "date": "2025-08-03",
        "views": 89
    },
    {
        "id": "3",
        "title": "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏",
        "content": "–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ü–∏—Ñ—Ä—ã –≤ –≤–∞—à–µ–º –∏–º–µ–Ω–∏ –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à—É —Å—É–¥—å–±—É.",
        "category": "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è", 
        "date": "2025-08-02",
        "views": 234
    },
    {
        "id": "4",
        "title": "–§–∞–∑—ã –õ—É–Ω—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ",
        "content": "–ö–∞–∫ –ª—É–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã –≤–ª–∏—è—é—Ç –Ω–∞ –Ω–∞—à—É –∂–∏–∑–Ω—å, —ç–º–æ—Ü–∏–∏ –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É.",
        "category": "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è",
        "date": "2025-08-01",
        "views": 67
    },
    {
        "id": "5",
        "title": "–¢–∞—Ä–æ –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è",
        "content": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π.",
        "category": "–¢–∞—Ä–æ",
        "date": "2025-07-31",
        "views": 112
    }
]

CATEGORIES = [
    "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è", "–¢–∞—Ä–æ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", 
    "–†—É–Ω—ã", "–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è", "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–°–Ω–æ–≤–∏–¥–µ–Ω–∏—è"
]

async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /random - —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç
        post = random.choice(SAMPLE_POSTS)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
        keyboard = []
        reaction_row = []
        
        from config import REACTION_EMOJIS
        for i, reaction in enumerate(REACTION_EMOJIS[:4]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Ä–µ–∞–∫—Ü–∏–∏
            reaction_row.append(
                InlineKeyboardButton(
                    reaction, 
                    callback_data=f"reaction_{i}_{post['id']}"
                )
            )
        
        keyboard.append(reaction_row)
        keyboard.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{post['id']}"),
            InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –ø–æ—Å—Ç", callback_data="random_new")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        post_text = (
            f"üé≤ **–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç**\n\n"
            f"**{post['title']}**\n\n"
            f"{post['content']}\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post['category']}\n"
            f"üìÖ –î–∞—Ç–∞: {post['date']}\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {post['views']}"
        )
        
        if update.message:
            await update.message.reply_text(
                post_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                post_text,
                parse_mode='Markdown', 
                reply_markup=reply_markup
            )
            await update.callback_query.answer("üé≤ –ù–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç!")
        
        logger.info(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id if update.effective_user else 'Unknown'}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")

async def popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /popular - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
        popular_posts = sorted(SAMPLE_POSTS, key=lambda x: x['views'], reverse=True)[:3]
        
        popular_text = "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n"
        
        for i, post in enumerate(popular_posts, 1):
            popular_text += (
                f"**{i}. {post['title']}**\n"
                f"üìÇ {post['category']} | üëÅ {post['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
                f"{post['content'][:100]}{'...' if len(post['content']) > 100 else ''}\n\n"
            )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        post_row = []
        
        for i, post in enumerate(popular_posts):
            post_row.append(
                InlineKeyboardButton(
                    f"{i+1}. {post['title'][:20]}...",
                    callback_data=f"show_post_{post['id']}"
                )
            )
            if len(post_row) == 2:  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                keyboard.append(post_row)
                post_row = []
        
        if post_row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(post_row)
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(
                popular_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        
        logger.info(f"üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id if update.effective_user else 'Unknown'}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /popular: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")

async def recent_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /recent - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã"""
    try:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ
        recent_posts = sorted(SAMPLE_POSTS, key=lambda x: x['date'], reverse=True)[:3]
        
        recent_text = "üÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã**\n\n"
        
        for i, post in enumerate(recent_posts, 1):
            recent_text += (
                f"**{i}. {post['title']}**\n"
                f"üìÖ {post['date']} | üìÇ {post['category']}\n"
                f"{post['content'][:100]}{'...' if len(post['content']) > 100 else ''}\n\n"
            )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        keyboard = []
        for i, post in enumerate(recent_posts):
            keyboard.append([
                InlineKeyboardButton(
                    f"üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: {post['title'][:30]}...",
                    callback_data=f"show_post_{post['id']}"
                )
            ])
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(
                recent_text,
                parse_mode='Markdown', 
                reply_markup=reply_markup
            )
        
        logger.info(f"üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id if update.effective_user else 'Unknown'}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /recent: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤")

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_counts = {}
        for post in SAMPLE_POSTS:
            category = post['category']
            category_counts[category] = category_counts.get(category, 0) + 1
        
        categories_text = "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞**\n\n"
        
        for category in CATEGORIES:
            count = category_counts.get(category, 0)
            categories_text += f"‚Ä¢ {category}: {count} –ø–æ—Å—Ç–æ–≤\n"
        
        categories_text += f"\nüìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(CATEGORIES)}\n"
        categories_text += f"üì∞ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(SAMPLE_POSTS)}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        row = []
        
        for category in CATEGORIES:
            if category_counts.get(category, 0) > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ—Å—Ç–∞–º–∏
                row.append(
                    InlineKeyboardButton(
                        f"{category} ({category_counts[category]})",
                        callback_data=f"category_{category}"
                    )
                )
                if len(row) == 2:  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                    keyboard.append(row)
                    row = []
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(
                categories_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        
        logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id if update.effective_user else 'Unknown'}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /categories: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        query = ' '.join(context.args).lower() if context.args else ""
        
        if not query:
            search_text = (
                f"üîç **–ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É**\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"`/search –≤–∞—à –∑–∞–ø—Ä–æ—Å`\n\n"
                f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                f"‚Ä¢ `/search –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è`\n"
                f"‚Ä¢ `/search –º–µ–¥–∏—Ç–∞—Ü–∏—è –ª—É–Ω–∞`\n"
                f"‚Ä¢ `/search —Ç–∞—Ä–æ –∫–∞—Ä—Ç—ã`\n\n"
                f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:**\n"
                f"{', '.join(CATEGORIES)}"
            )
            
            if update.message:
                await update.message.reply_text(search_text, parse_mode='Markdown')
            return
        
        # –ò—â–µ–º –ø–æ—Å—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
        found_posts = []
        for post in SAMPLE_POSTS:
            if (query in post['title'].lower() or 
                query in post['content'].lower() or 
                query in post['category'].lower()):
                found_posts.append(post)
        
        if not found_posts:
            search_text = (
                f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞**\n\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                f"‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å /categories –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º"
            )
        else:
            search_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ \"{query}\"**\n\n"
            search_text += f"–ù–∞–π–¥–µ–Ω–æ: {len(found_posts)} –ø–æ—Å—Ç–æ–≤\n\n"
            
            for i, post in enumerate(found_posts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                search_text += (
                    f"**{i}. {post['title']}**\n"
                    f"üìÇ {post['category']} | üìÖ {post['date']}\n"
                    f"{post['content'][:80]}{'...' if len(post['content']) > 80 else ''}\n\n"
                )
            
            if len(found_posts) > 5:
                search_text += f"... –∏ –µ—â–µ {len(found_posts) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = []
        for post in found_posts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            keyboard.append([
                InlineKeyboardButton(
                    f"üìñ {post['title'][:30]}...",
                    callback_data=f"show_post_{post['id']}"
                )
            ])
            
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        if update.message:
            await update.message.reply_text(
                search_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ '{query}' –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id if update.effective_user else 'Unknown'}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")
