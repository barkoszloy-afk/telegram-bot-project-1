# handlers/diagnostics.py - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
import logging
import os
import psutil
import time
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_ID

logger = logging.getLogger(__name__)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot_start_time = time.time()

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        start_time = time.time()
        message = await update.message.reply_text("üèì Pong!")
        end_time = time.time()
        
        response_time = round((end_time - start_time) * 1000, 2)
        
        await message.edit_text(
            f"üèì Pong!\n"
            f"‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time}ms\n"
            f"üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        logger.info(f"üèì Ping –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {response_time}ms")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ping: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        user_id = update.effective_user.id
        
        if user_id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        cpu_percent = psutil.cpu_percent(interval=1)
        
        uptime = datetime.now() - datetime.fromtimestamp(bot_start_time)
        uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        
        status_text = (
            "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n"
            f"ü§ñ **–ë–æ—Ç**\n"
            f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
            f"üÜî PID: {os.getpid()}\n\n"
            f"üíæ **–ü–∞–º—è—Ç—å**\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {memory.percent}%\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: {memory.available // (1024**2)} MB\n\n"
            f"üíΩ **–î–∏—Å–∫**\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {disk.percent}%\n"
            f"üìä –°–≤–æ–±–æ–¥–Ω–æ: {disk.free // (1024**3)} GB\n\n"
            f"‚öôÔ∏è **CPU**\n"
            f"üìà –ó–∞–≥—Ä—É–∑–∫–∞: {cpu_percent}%\n"
            f"üîß –Ø–¥–µ—Ä: {psutil.cpu_count()}"
        )
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

async def uptime_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /uptime - –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        uptime = datetime.now() - datetime.fromtimestamp(bot_start_time)
        uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        
        uptime_text = (
            f"‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞**\n\n"
            f"üöÄ –ó–∞–ø—É—â–µ–Ω: {datetime.fromtimestamp(bot_start_time).strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"‚è± –†–∞–±–æ—Ç–∞–µ—Ç: {uptime_str}\n"
            f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        await update.message.reply_text(uptime_text, parse_mode='Markdown')
        logger.info(f"‚è∞ Uptime –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /uptime: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã")

async def version_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /version - –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        import telegram
        import sys
        
        version_text = (
            f"üîñ **–í–µ—Ä—Å–∏—è –±–æ—Ç–∞**\n\n"
            f"ü§ñ –ë–æ—Ç: v1.0.0\n"
            f"üêç Python: {sys.version.split()[0]}\n"
            f"üì± python-telegram-bot: {telegram.__version__}\n"
            f"üñ• –°–∏—Å—Ç–µ–º–∞: {os.name}\n"
            f"üì¶ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway\n"
            f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y')}"
        )
        
        await update.message.reply_text(version_text, parse_mode='Markdown')
        logger.info(f"üîñ –í–µ—Ä—Å–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /version: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏")

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        user_id = update.effective_user.id
        
        if user_id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        memory = psutil.virtual_memory()
        if memory.percent < 90:
            checks.append("‚úÖ –ü–∞–º—è—Ç—å: OK")
        else:
            checks.append("‚ö†Ô∏è –ü–∞–º—è—Ç—å: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
        disk = psutil.disk_usage('/')
        if disk.percent < 90:
            checks.append("‚úÖ –î–∏—Å–∫: OK")
        else:
            checks.append("‚ö†Ô∏è –î–∏—Å–∫: –ú–∞–ª–æ –º–µ—Å—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        if cpu_percent < 80:
            checks.append("‚úÖ CPU: OK")
        else:
            checks.append("‚ö†Ô∏è CPU: –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        uptime = time.time() - bot_start_time
        if uptime > 60:  # –ë–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
            checks.append("‚úÖ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: OK")
        else:
            checks.append("‚ö†Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ù–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            from utils.database import reactions_db
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            reactions_db.get_post_reactions("test")
            checks.append("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
        except Exception:
            checks.append("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û—à–∏–±–∫–∞")
        
        health_text = (
            f"üè• **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã**\n\n"
            + "\n".join(checks)
        )
        
        await update.message.reply_text(health_text, parse_mode='Markdown')
        logger.info(f"üè• Health check –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /health: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
