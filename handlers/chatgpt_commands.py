# handlers/chatgpt_commands.py - –ö–æ–º–∞–Ω–¥—ã ChatGPT –¥–ª—è –±–æ—Ç–∞

import logging
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.openai_client import chatgpt_client

logger = logging.getLogger(__name__)

async def chatgpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /chatgpt - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ChatGPT"""
    try:
        if not update.message or not update.effective_user:
            return
        
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ChatGPT
        if not chatgpt_client.is_available():
            await update.message.reply_text(
                "‚ùå **ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-—Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "1. –î–æ–±–∞–≤–∏—Ç—å OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n"
                "2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
                "üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                parse_mode='Markdown'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ ChatGPT
        keyboard = [
            [
                InlineKeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="gpt_horoscope"),
                InlineKeyboardButton("üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", callback_data="gpt_morning")
            ],
            [
                InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ", callback_data="gpt_evening"),
                InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="gpt_tarot")
            ],
            [
                InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="gpt_question"),
                InlineKeyboardButton("üßò‚Äç‚ôÄÔ∏è –î—É—Ö–æ–≤–Ω—ã–π —Å–æ–≤–µ—Ç", callback_data="gpt_spiritual")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞", callback_data="gpt_stats"),
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="gpt_clear")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        conversation_length = chatgpt_client.get_conversation_length(user_id)
        history_text = f"\n\nüìù –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {conversation_length}" if conversation_length > 0 else ""
        
        await update.message.reply_text(
            f"ü§ñ **ChatGPT –ü–æ–º–æ—â–Ω–∏–∫**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n\n"
            f"üîÆ **–≠–∑–æ—Ç–µ—Ä–∏–∫–∞**: –ì–æ—Ä–æ—Å–∫–æ–ø—ã, –∫–∞—Ä—Ç—ã, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è\n"
            f"üí¨ **–û–±—â–µ–Ω–∏–µ**: –í–æ–ø—Ä–æ—Å—ã –∏ –¥—É—Ö–æ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n"
            f"üìä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏{history_text}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"ü§ñ ChatGPT –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chatgpt: {e}")
        if update.message:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ ChatGPT –º–µ–Ω—é"
            )

async def handle_chatgpt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ ChatGPT"""
    try:
        query = update.callback_query
        if not query or not query.data or not update.effective_user:
            return
        
        await query.answer()
        user_id = update.effective_user.id
        data = query.data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ChatGPT
        if not chatgpt_client.is_available():
            await query.edit_message_text(
                "‚ùå ChatGPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.edit_message_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        
        if data == "gpt_horoscope":
            await handle_horoscope_selection(update, context)
            
        elif data == "gpt_morning":
            response = await chatgpt_client.generate_morning_message(user_id)
            await query.edit_message_text(
                response,
                parse_mode='Markdown'
            )
            
        elif data == "gpt_evening":
            response = await chatgpt_client.generate_evening_message(user_id)
            await query.edit_message_text(
                response,
                parse_mode='Markdown'
            )
            
        elif data == "gpt_tarot":
            await handle_tarot_question(update, context)
            
        elif data == "gpt_question":
            await query.edit_message_text(
                "üí¨ **–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
                "–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –º—É–¥—Ä—ã–π –ø–æ–º–æ—â–Ω–∏–∫! ü§ñ\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä: '–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏?' –∏–ª–∏ '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ?'"
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            context.user_data['waiting_for_gpt_question'] = True
            
        elif data == "gpt_spiritual":
            await query.edit_message_text(
                "üßò‚Äç‚ôÄÔ∏è **–î—É—Ö–æ–≤–Ω—ã–π —Å–æ–≤–µ—Ç**\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—É—Ö–æ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å.\n"
                "–Ø –¥–∞–º –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n"
                "üí´ –ü—Ä–∏–º–µ—Ä: '–ö–∞–∫ –ø—Ä–æ—Å—Ç–∏—Ç—å –æ–±–∏–¥—É?' –∏–ª–∏ '–ö–∞–∫ –Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π?'"
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            context.user_data['waiting_for_spiritual_question'] = True
            
        elif data == "gpt_stats":
            await show_chatgpt_stats(update, context)
            
        elif data == "gpt_clear":
            await handle_clear_history(update, context)
            
        elif data == "confirm_clear_history":
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            chatgpt_client.clear_conversation(user_id)
            await query.edit_message_text(
                "‚úÖ **–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!**\n\n"
                "ChatGPT —Ç–µ–ø–µ—Ä—å –Ω–µ –ø–æ–º–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üÜï"
            )
            
        elif data.startswith("zodiac_gpt_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
            zodiac_sign = data.replace("zodiac_gpt_", "")
            response = await chatgpt_client.generate_horoscope(zodiac_sign, user_id)
            await query.edit_message_text(
                response,
                parse_mode='Markdown'
            )
            
        elif data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ChatGPT
            await chatgpt_command(update, context)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ ChatGPT callback: {e}")
        if query:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )

async def handle_horoscope_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    query = update.callback_query
    if not query:
        return
    
    # –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ —Å —ç–º–æ–¥–∑–∏
    zodiac_signs = [
        ("–û–≤–µ–Ω", "‚ôà"), ("–¢–µ–ª–µ—Ü", "‚ôâ"), ("–ë–ª–∏–∑–Ω–µ—Ü—ã", "‚ôä"), ("–†–∞–∫", "‚ôã"),
        ("–õ–µ–≤", "‚ôå"), ("–î–µ–≤–∞", "‚ôç"), ("–í–µ—Å—ã", "‚ôé"), ("–°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôè"),
        ("–°—Ç—Ä–µ–ª–µ—Ü", "‚ôê"), ("–ö–æ–∑–µ—Ä–æ–≥", "‚ôë"), ("–í–æ–¥–æ–ª–µ–π", "‚ôí"), ("–†—ã–±—ã", "‚ôì")
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 3x4
    keyboard = []
    for i in range(0, len(zodiac_signs), 3):
        row = []
        for j in range(3):
            if i + j < len(zodiac_signs):
                name, emoji = zodiac_signs[i + j]
                row.append(InlineKeyboardButton(
                    f"{emoji} {name}",
                    callback_data=f"zodiac_gpt_{name}"
                ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîÆ **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞**\n\n"
        "–Ø —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å –ø–æ–º–æ—â—å—é ChatGPT!",
        reply_markup=reply_markup
    )

async def handle_tarot_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –¥–Ω—è"""
    query = update.callback_query
    if not query:
        return
    
    await query.edit_message_text(
        "üÉè **–ö–∞—Ä—Ç–∞ –¥–Ω—è**\n\n"
        "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ä—Ç –¢–∞—Ä–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "üí´ –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ '–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ?'\n"
        "‚Ä¢ '–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –¥–∞—é—Ç –∫–∞—Ä—Ç—ã –ø–æ –ø–æ–≤–æ–¥—É...?'\n"
        "‚Ä¢ '–ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º?'"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞—Ä–æ
    context.user_data['waiting_for_tarot_question'] = True

async def show_chatgpt_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ChatGPT"""
    query = update.callback_query
    if not query or not update.effective_user:
        return
    
    user_id = update.effective_user.id
    conversation_length = chatgpt_client.get_conversation_length(user_id)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ChatGPT**\n\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {conversation_length}\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: GPT-3.5-Turbo\n"
        f"üéØ –†–µ–∂–∏–º: –≠–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
        f"üí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º",
        reply_markup=reply_markup
    )

async def handle_clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    query = update.callback_query
    if not query or not update.effective_user:
        return
    
    user_id = update.effective_user.id
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_history"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    conversation_length = chatgpt_client.get_conversation_length(user_id)
    
    await query.edit_message_text(
        f"üóëÔ∏è **–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞?**\n\n"
        f"–°–µ–π—á–∞—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏: {conversation_length} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ ChatGPT –Ω–µ –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.",
        reply_markup=reply_markup
    )

async def process_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatGPT
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ChatGPT
    """
    try:
        if not update.message or not update.message.text or not update.effective_user:
            return False
        
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –¥–ª—è ChatGPT
        waiting_for_question = context.user_data.get('waiting_for_gpt_question', False)
        waiting_for_spiritual = context.user_data.get('waiting_for_spiritual_question', False)
        waiting_for_tarot = context.user_data.get('waiting_for_tarot_question', False)
        
        if waiting_for_question:
            # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ChatGPT
            context.user_data['waiting_for_gpt_question'] = False
            
            await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
            result = await chatgpt_client.chat_completion(text, user_id)
            
            if result["success"]:
                response = f"üí¨ **–û—Ç–≤–µ—Ç ChatGPT:**\n\n{result['response']}"
                if len(response) > 4000:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await update.message.reply_text(response[:4000])
                    await update.message.reply_text(response[4000:])
                else:
                    await update.message.reply_text(response, parse_mode='Markdown')
            else:
                await update.message.reply_text(str(result["response"]))
            
            return True
            
        elif waiting_for_spiritual:
            # –î—É—Ö–æ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            context.user_data['waiting_for_spiritual_question'] = False
            
            await update.message.reply_text("üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∏—Ä—É—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
            response = await chatgpt_client.answer_spiritual_question(text, user_id)
            
            await update.message.reply_text(response, parse_mode='Markdown')
            return True
            
        elif waiting_for_tarot:
            # –í–æ–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ä—Ç –¢–∞—Ä–æ
            context.user_data['waiting_for_tarot_question'] = False
            
            await update.message.reply_text("üÉè –¢–∞—Å—É—é –∫–∞—Ä—Ç—ã –∏ —á–∏—Ç–∞—é –∑–Ω–∞–∫–∏...")
            response = await chatgpt_client.generate_tarot_reading(text, user_id)
            
            await update.message.reply_text(response, parse_mode='Markdown')
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPT —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if update.message:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
            )
        return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
