# handlers/reactions.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
import logging
from typing import Optional, List, Any

from telegram import Update, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ContextTypes
from utils.database import reactions_db
from utils.keyboards import get_zodiac_keyboard, get_morning_variants_keyboard, get_reaction_keyboard
from config import REACTION_NAMES, REACTION_MESSAGES

async def handle_reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç—ã"""
    query = update.callback_query
    if not query or not hasattr(query, 'data') or query.data is None:
        return
    
    data = query.data
    if not isinstance(data, str) or not data.startswith("react_"):
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    chat_type = "–ö–ê–ù–ê–õ" if query.message and query.message.chat.type == 'channel' else "–õ–ò–ß–ö–ê"
    logging.info(f"üîò Callback —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ {chat_type}: {data}")
    
    # –ü–∞—Ä—Å–∏–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "react_{reaction}_{post_id}"
    parts = data.split('_', 2)
    
    if len(parts) < 3:
        logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {data}")
        return
    
    reaction = parts[1]
    post_id = parts[2]
    user_id = str(update.effective_user.id) if update.effective_user else None
    
    if not user_id:
        logging.error(f"‚ùå –ù–µ—Ç user_id")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏
    try:
        idx = REACTION_NAMES.index(reaction)
    except ValueError:
        logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è: {reaction}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    previous_reaction = reactions_db.add_user_reaction(user_id, reaction, post_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞
    if previous_reaction:
        message_to_show = "üîÑ –í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç!"
        logging.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç —Ä–µ–∞–∫—Ü–∏—é: {previous_reaction}")
    else:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        if idx < len(REACTION_MESSAGES):
            message_to_show = f"‚úÖ {REACTION_MESSAGES[idx]}"
        else:
            message_to_show = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–∞–∫—Ü–∏—é!"
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è {reaction} –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        await update_post_keyboard(query, post_id, context)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.answer(message_to_show, show_alert=True)
        logging.info(f"üí¨ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await query.answer("‚úÖ –°–ø–∞—Å–∏–±–æ!")
        except Exception as e2:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")

async def update_post_keyboard(query: CallbackQuery, post_id: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ —Ä–µ–∞–∫—Ü–∏–π"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        base_keyboard: InlineKeyboardMarkup
        
        if query.message and query.message.reply_markup and query.message.reply_markup.inline_keyboard:
            existing_keyboard = query.message.reply_markup.inline_keyboard
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            has_morning_variants = any(
                any(hasattr(btn, 'callback_data') and btn.callback_data and 
                    isinstance(btn.callback_data, str) and btn.callback_data.startswith('morning_variant') 
                    for btn in row) 
                for row in existing_keyboard
            )
            
            if has_morning_variants:
                # –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Ç—Ä–∞
                base_keyboard = get_morning_variants_keyboard()
            else:
                # –ì–æ—Ä–æ—Å–∫–æ–ø –∏–ª–∏ –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç - –∑–æ–¥–∏–∞–∫
                base_keyboard = get_zodiac_keyboard()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–æ–¥–∏–∞–∫
            base_keyboard = get_zodiac_keyboard()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
        reactions_keyboard = get_reaction_keyboard(post_id)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        combined_keyboard = base_keyboard.inline_keyboard + reactions_keyboard.inline_keyboard
        new_reply_markup = InlineKeyboardMarkup(combined_keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_type = "–ö–ê–ù–ê–õ" if query.message and query.message.chat and query.message.chat.type == 'channel' else "–õ–ò–ß–ö–ê"
        
        if chat_type == "–ö–ê–ù–ê–õ" and query.message and query.message.chat and hasattr(query.message, 'message_id'):
            # –î–ª—è –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.edit_message_reply_markup
            await context.bot.edit_message_reply_markup(
                chat_id=query.message.chat.id,
                message_id=query.message.message_id,
                reply_markup=new_reply_markup
            )
            logging.info(f"üîÑ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ö–ê–ù–ê–õ–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            # –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º query.edit_message_reply_markup
            await query.edit_message_reply_markup(reply_markup=new_reply_markup)
            logging.info(f"üîÑ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
        if "can't be edited" in str(e).lower():
            logging.info(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
