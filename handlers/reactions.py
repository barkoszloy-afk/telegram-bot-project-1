# handlers/reactions.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
import logging
from telegram import Update
from telegram.ext import ContextTypes
from utils.database import reactions_db
from utils.keyboards import create_main_menu_keyboard
from config import REACTION_EMOJIS

logger = logging.getLogger(__name__)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    if not query:
        return

    try:
        menu_text = (
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        )
        
        await query.edit_message_text(
            menu_text,
            parse_mode='Markdown',
            reply_markup=create_main_menu_keyboard()
        )
        
        await query.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        logger.info(f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception:
            pass

async def handle_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç—ã"""
    query = update.callback_query
    if not query or not query.data:
        return

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
        if not query.data.startswith("reaction_"):
            return
        
        parts = query.data.split("_")
        if len(parts) < 3:
            return
        
        reaction_idx = int(parts[1])
        post_id = parts[2]
        
        if reaction_idx >= len(REACTION_EMOJIS):
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è")
            return
        
        user_id = query.from_user.id
        reaction = REACTION_EMOJIS[reaction_idx]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        reactions_db.add_reaction(user_id, post_id, reaction)
        
        await query.answer(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {reaction}")
        logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª {reaction} –Ω–∞ –ø–æ—Å—Ç {post_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception:
            pass

async def show_post_reactions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç"""
    query = update.callback_query
    if not query or not query.data:
        return

    try:
        if not query.data.startswith("stats_"):
            return
        
        post_id = query.data.split("_")[1]
        reactions = reactions_db.get_post_reactions(post_id)
        
        if not reactions:
            await query.answer("–ù–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–π")
            return
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π:\n\n"
        for reaction, count in reactions.items():
            stats_text += f"{reaction} {count}\n"
        
        await query.answer(stats_text, show_alert=True)
        logger.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception:
            pass
