# handlers/stats.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
import logging
import json
import os
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from collections import defaultdict, Counter
from config import ADMIN_ID

logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = "bot_stats.json"

class BotStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±–æ—Ç–∞"""
    
    def __init__(self):
        self.stats = self.load_stats()
    
    def load_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(STATS_FILE):
                with open(STATS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {
                "users": {},
                "commands": defaultdict(int),
                "daily_stats": {},
                "total_messages": 0,
                "start_date": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "users": {},
                "commands": defaultdict(int),
                "daily_stats": {},
                "total_messages": 0,
                "start_date": datetime.now().isoformat()
            }
    
    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(STATS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def add_user(self, user_id, username=None, first_name=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        if str(user_id) not in self.stats["users"]:
            self.stats["users"][str(user_id)] = {
                "username": username,
                "first_name": first_name,
                "first_seen": today,
                "last_seen": today,
                "message_count": 0,
                "commands_used": defaultdict(int)
            }
        else:
            self.stats["users"][str(user_id)]["last_seen"] = today
            if username:
                self.stats["users"][str(user_id)]["username"] = username
            if first_name:
                self.stats["users"][str(user_id)]["first_name"] = first_name
    
    def add_command(self, user_id, command):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        self.stats["commands"][command] += 1
        if str(user_id) in self.stats["users"]:
            self.stats["users"][str(user_id)]["commands_used"][command] += 1
        
        # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        today = datetime.now().strftime('%Y-%m-%d')
        if today not in self.stats["daily_stats"]:
            self.stats["daily_stats"][today] = {"commands": defaultdict(int), "users": set()}
        
        self.stats["daily_stats"][today]["commands"][command] += 1
        self.stats["daily_stats"][today]["users"] = list(set(self.stats["daily_stats"][today].get("users", [])) | {user_id})
    
    def add_message(self, user_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.stats["total_messages"] += 1
        if str(user_id) in self.stats["users"]:
            self.stats["users"][str(user_id)]["message_count"] += 1
    
    def get_user_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return len(self.stats["users"])
    
    def get_active_users(self, days=7):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        cutoff_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
        active_users = 0
        
        for user_data in self.stats["users"].values():
            if user_data["last_seen"] >= cutoff_date:
                active_users += 1
        
        return active_users

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot_stats = BotStats()

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    try:
        user_id = update.effective_user.id
        
        if user_id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_stats.add_user(
            user_id,
            update.effective_user.username,
            update.effective_user.first_name
        )
        bot_stats.add_command(user_id, "stats")
        bot_stats.save_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        total_users = bot_stats.get_user_count()
        active_users_7d = bot_stats.get_active_users(7)
        active_users_30d = bot_stats.get_active_users(30)
        
        # –¢–æ–ø –∫–æ–º–∞–Ω–¥
        top_commands = Counter(bot_stats.stats["commands"]).most_common(5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        today_stats = bot_stats.stats["daily_stats"].get(today, {})
        
        stats_text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (7 –¥–Ω–µ–π): {active_users_7d}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (30 –¥–Ω–µ–π): {active_users_30d}\n\n"
            f"üì± **–°–æ–æ–±—â–µ–Ω–∏—è**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {bot_stats.stats['total_messages']}\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {len(today_stats.get('users', []))}\n\n"
            f"‚ö° **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**\n"
        )
        
        for i, (command, count) in enumerate(top_commands, 1):
            stats_text += f"{i}. /{command}: {count} —Ä–∞–∑\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        stats_text += f"\nüìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π**\n"
        recent_days = []
        for i in range(7):
            date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
            day_stats = bot_stats.stats["daily_stats"].get(date, {})
            users_count = len(day_stats.get("users", []))
            if users_count > 0:
                recent_days.append(f"‚Ä¢ {date}: {users_count} –ø–æ–ª—å–∑.")
        
        if recent_days:
            stats_text += "\n".join(recent_days[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
        else:
            stats_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /users - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    try:
        user_id = update.effective_user.id
        
        if user_id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        total_users = bot_stats.get_user_count()
        active_7d = bot_stats.get_active_users(7)
        active_30d = bot_stats.get_active_users(30)
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        today = datetime.now()
        new_users_7d = 0
        new_users_30d = 0
        
        for user_data in bot_stats.stats["users"].values():
            first_seen = datetime.fromisoformat(user_data["first_seen"])
            days_ago = (today - first_seen).days
            
            if days_ago <= 7:
                new_users_7d += 1
            if days_ago <= 30:
                new_users_30d += 1
        
        users_text = (
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞**\n\n"
            f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π: {active_7d}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π: {active_30d}\n\n"
            f"üÜï **–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n"
            f"‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: {new_users_7d}\n"
            f"‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: {new_users_30d}\n\n"
            f"üìä **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã**\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (7–¥): {(active_7d/total_users*100):.1f}%\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (30–¥): {(active_30d/total_users*100):.1f}%\n"
            f"‚Ä¢ –†–æ—Å—Ç (7–¥): {(new_users_7d/total_users*100):.1f}%"
        )
        
        await update.message.reply_text(users_text, parse_mode='Markdown')
        logger.info(f"üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–∞ {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /users: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞)
def update_stats(user_id, username=None, first_name=None, command=None, is_message=False):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        bot_stats.add_user(user_id, username, first_name)
        
        if command:
            bot_stats.add_command(user_id, command)
        
        if is_message:
            bot_stats.add_message(user_id)
        
        bot_stats.save_stats()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
