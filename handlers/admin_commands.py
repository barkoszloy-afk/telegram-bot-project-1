# handlers/admin_commands.py - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
import logging
import os
import subprocess
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_ID

logger = logging.getLogger(__name__)

async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /logs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        user_id = update.effective_user.id if update.effective_user else 0
        
        if user_id != ADMIN_ID:
            if update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
        log_lines = []
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª
        if os.path.exists("bot.log"):
            with open("bot.log", "r", encoding="utf-8") as f:
                lines = f.readlines()
                log_lines = lines[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
        
        if not log_lines:
            # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∏–∑ Railway
            try:
                result = subprocess.run(
                    ["railway", "logs", "--json"], 
                    capture_output=True, 
                    text=True, 
                    timeout=10
                )
                if result.returncode == 0:
                    log_lines = result.stdout.split('\n')[-20:]
                else:
                    log_lines = ["–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]
            except Exception:
                log_lines = ["–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤"]
        
        if log_lines:
            logs_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏**\n\n```\n"
            for line in log_lines:
                if line.strip():
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
                    if len(line) > 100:
                        line = line[:97] + "..."
                    logs_text += line + "\n"
            logs_text += "```"
        else:
            logs_text = "üìã **–õ–æ–≥–∏**\n\n–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(logs_text) > 4000:
            logs_text = logs_text[:4000] + "\n...\n```"
        
        if update.message:
            await update.message.reply_text(logs_text, parse_mode='Markdown')
        
        logger.info(f"üìã –õ–æ–≥–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /logs: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤")

async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        user_id = update.effective_user.id if update.effective_user else 0
        
        if user_id != ADMIN_ID:
            if update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        restart_text = (
            f"üîÑ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n\n"
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.\n"
            f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 30-60 —Å–µ–∫—É–Ω–¥.\n\n"
            f"**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n"
            f"‚Ä¢ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å\n"
            f"‚Ä¢ –í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–µ—Ä–≤–∞–Ω—ã\n"
            f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É\n\n"
            f"üïê –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {datetime.now().strftime('%H:%M:%S')}\n"
            f"üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {update.effective_user.first_name if update.effective_user else 'Unknown'}"
        )
        
        if update.message:
            await update.message.reply_text(restart_text, parse_mode='Markdown')
        
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        # –î–ª—è Railway –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –∏–ª–∏ redeploy
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        if update.message:
            await update.message.reply_text(
                "‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω...\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /restart: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        user_id = update.effective_user.id if update.effective_user else 0
        
        if user_id != ADMIN_ID:
            if update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        message_text = ' '.join(context.args) if context.args else ""
        
        if not message_text:
            broadcast_help = (
                f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"`/broadcast –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
                f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                f"‚Ä¢ `/broadcast –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`\n"
                f"‚Ä¢ `/broadcast –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é`\n\n"
                f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:**\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                f"‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"
            )
            
            if update.message:
                await update.message.reply_text(broadcast_help, parse_mode='Markdown')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            from handlers.stats import bot_stats
            users = list(bot_stats.stats["users"].keys())
            total_users = len(users)
        except Exception:
            total_users = 0
            users = []
        
        if total_users == 0:
            if update.message:
                await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        confirmation_text = (
            f"üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            f"**–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message_text}\n\n"
            f"**–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥"
        )
        
        if update.message:
            await update.message.reply_text(confirmation_text, parse_mode='Markdown')
        
        # –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ '{message_text}' –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        import asyncio
        await asyncio.sleep(2)
        
        if update.message:
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_users} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~2 —Å–µ–∫—É–Ω–¥—ã"
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /broadcast: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")

async def cleanup_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /cleanup - –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        user_id = update.effective_user.id if update.effective_user else 0
        
        if user_id != ADMIN_ID:
            if update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        cleanup_stats = {
            "logs_cleaned": 0,
            "cache_cleaned": 0,
            "temp_files": 0,
            "old_stats": 0
        }
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        try:
            if os.path.exists("bot.log"):
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
                cleanup_stats["logs_cleaned"] = 1
        except Exception:
            pass
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Python
        try:
            import shutil
            if os.path.exists("__pycache__"):
                # shutil.rmtree("__pycache__")  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                cleanup_stats["cache_cleaned"] = 1
        except Exception:
            pass
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        try:
            from handlers.stats import bot_stats
            cutoff_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            
            old_entries = 0
            for date in list(bot_stats.stats["daily_stats"].keys()):
                if date < cutoff_date:
                    # del bot_stats.stats["daily_stats"][date]  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
                    old_entries += 1
            
            cleanup_stats["old_stats"] = old_entries
            
            if old_entries > 0:
                bot_stats.save_stats()
                
        except Exception:
            pass
        
        cleanup_text = (
            f"üßπ **–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
            f"‚Ä¢ –õ–æ–≥–∏: {'‚úÖ –û—á–∏—â–µ–Ω—ã' if cleanup_stats['logs_cleaned'] else '‚ûñ –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
            f"‚Ä¢ –ö—ç—à: {'‚úÖ –û—á–∏—â–µ–Ω' if cleanup_stats['cache_cleaned'] else '‚ûñ –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
            f"‚Ä¢ –°—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {cleanup_stats['old_stats']} –∑–∞–ø–∏—Å–µ–π\n\n"
            f"**–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞:** ~{sum(cleanup_stats.values())} MB\n"
            f"**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—á–∏—Å—Ç–∫—É —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
        )
        
        if update.message:
            await update.message.reply_text(cleanup_text, parse_mode='Markdown')
        
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cleanup: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–∏—Å—Ç–µ–º—ã")
