# handlers/admin.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
import asyncio
import logging
import random
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import ADMIN_ID, CHANNEL_ID, ZODIAC_MESSAGES, EVENING_MESSAGES
from utils.keyboards import create_admin_post_keyboard
from utils.database import reactions_db

async def handle_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not update.effective_user or not update.message:
        return
        
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç", callback_data='admin_morning')],
        [InlineKeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data='admin_horoscope')],
        [InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç", callback_data='admin_evening')],
        [InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data='admin_cleanup')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"""
    query = update.callback_query
    if not query or not update.effective_user:
        return
        
    await query.answer()
    
    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    action = query.data
    if not action:
        return
    
    if action == 'admin_stats':
        await show_statistics(query, context)
    elif action == 'admin_morning':
        await create_morning_post(query, context)
    elif action == 'admin_horoscope':
        await create_horoscope_post(query, context)
    elif action == 'admin_evening':
        await create_evening_post(query, context)
    elif action == 'admin_cleanup':
        await cleanup_old_data(query, context)

async def show_statistics(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π"""
    try:
        data = reactions_db.get_data()
        total_users = len(data.get('users', {}))
        total_reactions = sum(len(user_data.get('reactions', {})) for user_data in data.get('users', {}).values())
        posts_count = len(data.get('posts', {}))
        
        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
        
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üëç –í—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π: {total_reactions}
üìù –ü–æ—Å—Ç–æ–≤ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏: {posts_count}

üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏:"""
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π
        reaction_counts = {}
        for user_data in data.get('users', {}).values():
            for reaction in user_data.get('reactions', {}).values():
                reaction_counts[reaction] = reaction_counts.get(reaction, 0) + 1
        
        if reaction_counts:
            sorted_reactions = sorted(reaction_counts.items(), key=lambda x: x[1], reverse=True)
            for reaction, count in sorted_reactions[:5]:
                stats_text += f"\n{reaction}: {count}"
        
        await query.edit_message_text(stats_text)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def create_morning_post(query, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç"""
    try:
        post_text = """üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚ú®

–ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üöÄ
–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! üí´

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –¥–µ–Ω—å:"""
        
        post_id = f"morning_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        keyboard = create_admin_post_keyboard(post_id, 'morning')
        
        message = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=post_text,
            reply_markup=keyboard
        )
        
        await query.edit_message_text(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\nID –ø–æ—Å—Ç–∞: {post_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")

async def create_horoscope_post(query, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç —Å –≥–æ—Ä–æ—Å–∫–æ–ø–æ–º"""
    try:
        horoscope_text = random.choice(ZODIAC_MESSAGES)
        post_text = f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n{horoscope_text}"
        
        post_id = f"horoscope_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        keyboard = create_admin_post_keyboard(post_id, 'zodiac')
        
        message = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=post_text,
            reply_markup=keyboard
        )
        
        await query.edit_message_text(f"‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\nID –ø–æ—Å—Ç–∞: {post_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")

async def create_evening_post(query, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç"""
    try:
        evening_text = random.choice(EVENING_MESSAGES)
        post_text = f"üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! ‚ú®\n\n{evening_text}"
        
        post_id = f"evening_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        keyboard = create_admin_post_keyboard(post_id, 'zodiac')
        
        message = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=post_text,
            reply_markup=keyboard
        )
        
        await query.edit_message_text(f"‚úÖ –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\nID –ø–æ—Å—Ç–∞: {post_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")

async def cleanup_old_data(query, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–π"""
    try:
        cleaned_count = reactions_db.cleanup_old_data()
        await query.edit_message_text(f"‚úÖ –û—á–∏—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cleaned_count}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

async def handle_morning_variant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    query = update.callback_query
    if not query:
        return
        
    await query.answer()
    
    data = query.data
    if not data:
        return
        
    if data == 'morning_variant1':
        message = "üåÖ –ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ –≤—ã–±—Ä–∞–Ω! –û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! ‚ö°"
    elif data == 'morning_variant2':
        message = "üåû –ü—É—Ç—å –∫ –ø–æ–±–µ–¥–∞–º –æ—Ç–∫—Ä—ã—Ç! –£–¥–∞—á–∏! üèÜ"
    elif data == 'morning_variant3':
        message = "‚≠ê –ó–≤–µ–∑–¥–Ω—ã–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í–ø–µ—Ä–µ–¥! üöÄ"
    else:
        message = "‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!"
    
    await query.answer(message, show_alert=True)
