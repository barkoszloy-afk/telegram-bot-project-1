# handlers/admin.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
import asyncio
import logging
import random
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import ADMIN_ID, CHANNEL_ID, ZODIAC_MESSAGES, EVENING_MESSAGES
from utils.keyboards import (
    create_admin_post_keyboard, 
    create_admin_menu_keyboard,
    create_admin_preview_keyboard
)
from utils.database import reactions_db

logger = logging.getLogger(__name__)

async def handle_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not update.effective_user or not update.message:
        return
        
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    reply_markup = create_admin_menu_keyboard()
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"""
    query = update.callback_query
    if not query or not update.effective_user:
        return
        
    await query.answer()
    
    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    action = query.data
    if not action:
        return
    
    if action == 'admin_stats':
        await show_statistics(query, context)
    elif action == 'admin_morning':
        await preview_morning_post(query, context)
    elif action == 'admin_horoscope':
        await preview_horoscope_post(query, context)
    elif action == 'admin_evening':
        await preview_evening_post(query, context)
    elif action == 'admin_cleanup':
        await cleanup_old_data(query, context)
    elif action == 'admin_broadcast':
        await show_broadcast_menu(query, context)
    elif action == 'admin_users':
        await show_users_management(query, context)
    elif action == 'admin_logs':
        await show_logs(query, context)
    elif action == 'admin_settings':
        await show_settings(query, context)
    elif action == 'admin_restart':
        await restart_bot(query, context)
    elif action == 'admin_test':
        await test_functions(query, context)
    elif action.startswith('publish_'):
        await publish_post_to_channel(query, context)
    elif action.startswith('cancel_'):
        await cancel_post_preview(query, context)

async def show_statistics(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π"""
    try:
        data = reactions_db.get_data()
        total_users = len(data.get('users', {}))
        total_reactions = sum(len(user_data.get('reactions', {})) for user_data in data.get('users', {}).values())
        posts_count = len(data.get('posts', {}))
        
        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
        
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üëç –í—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π: {total_reactions}
üìù –ü–æ—Å—Ç–æ–≤ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏: {posts_count}

üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏:"""
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π
        reaction_counts = {}
        for user_data in data.get('users', {}).values():
            for reaction in user_data.get('reactions', {}).values():
                reaction_counts[reaction] = reaction_counts.get(reaction, 0) + 1
        
        if reaction_counts:
            sorted_reactions = sorted(reaction_counts.items(), key=lambda x: x[1], reverse=True)
            for reaction, count in sorted_reactions[:5]:
                stats_text += f"\n{reaction}: {count}"
        
        await query.edit_message_text(stats_text)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def preview_morning_post(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        post_text = """üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚ú®

–ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üöÄ
–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! üí´

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –¥–µ–Ω—å:"""
        
        post_id = f"morning_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        preview_markup = create_admin_preview_keyboard("morning", post_id)
        
        preview_text = f"""üìã –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –£–¢–†–ï–ù–ù–ï–ì–û –ü–û–°–¢–ê:

{post_text}

üîΩ –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã:
üåÖ –ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏
üåû –ü—É—Ç—å –∫ –ø–æ–±–µ–¥–∞–º  
‚≠ê –ó–≤–µ–∑–¥–Ω—ã–π –ø—É—Ç—å
‚ù§Ô∏è üôè ü•π (—Ä–µ–∞–∫—Ü–∏–∏)

–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª?"""
        
        await query.edit_message_text(preview_text, reply_markup=preview_markup)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

async def preview_horoscope_post(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ —Å –≥–æ—Ä–æ—Å–∫–æ–ø–æ–º"""
    try:
        horoscope_text = random.choice(ZODIAC_MESSAGES)
        post_id = f"horoscope_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        preview_markup = create_admin_preview_keyboard("horoscope", post_id)
        
        preview_text = f"""üìã –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ì–û–†–û–°–ö–û–ü–ê:

{horoscope_text}

üîΩ –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã:
‚ôà –û–≤–µ–Ω ‚ôâ –¢–µ–ª–µ—Ü ‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôã –†–∞–∫
‚ôå –õ–µ–≤ ‚ôç –î–µ–≤–∞ ‚ôé –í–µ—Å—ã ‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω  
‚ôê –°—Ç—Ä–µ–ª–µ—Ü ‚ôë –ö–æ–∑–µ—Ä–æ–≥ ‚ôí –í–æ–¥–æ–ª–µ–π ‚ôì –†—ã–±—ã
‚ù§Ô∏è üôè ü•π (—Ä–µ–∞–∫—Ü–∏–∏)

–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª?"""
        
        await query.edit_message_text(preview_text, reply_markup=preview_markup)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

async def preview_evening_post(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        evening_text = random.choice(EVENING_MESSAGES)
        post_id = f"evening_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        preview_markup = create_admin_preview_keyboard("evening", post_id)
        
        preview_text = f"""üìã –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –í–ï–ß–ï–†–ù–ï–ì–û –ü–û–°–¢–ê:

{evening_text}

üîΩ –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã:
‚ôà –û–≤–µ–Ω ‚ôâ –¢–µ–ª–µ—Ü ‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôã –†–∞–∫
‚ôå –õ–µ–≤ ‚ôç –î–µ–≤–∞ ‚ôé –í–µ—Å—ã ‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω  
‚ôê –°—Ç—Ä–µ–ª–µ—Ü ‚ôë –ö–æ–∑–µ—Ä–æ–≥ ‚ôí –í–æ–¥–æ–ª–µ–π ‚ôì –†—ã–±—ã
‚ù§Ô∏è üôè ü•π (—Ä–µ–∞–∫—Ü–∏–∏)

–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª?"""
        
        await query.edit_message_text(preview_text, reply_markup=preview_markup)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

async def publish_post_to_channel(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        action = query.data
        if not action:
            return
            
        # –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏–µ: publish_{type}_{post_id}
        parts = action.split('_', 2)
        if len(parts) < 3:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã")
            return
            
        post_type = parts[1]  # morning/horoscope/evening
        post_id = parts[2]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if post_type == 'morning':
            post_text = """üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚ú®

–ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üöÄ
–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! üí´

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –¥–µ–Ω—å:"""
            keyboard = create_admin_post_keyboard(post_id, 'morning')
            
        elif post_type == 'horoscope':
            post_text = random.choice(ZODIAC_MESSAGES)
            keyboard = create_admin_post_keyboard(post_id, 'zodiac')
            
        elif post_type == 'evening':
            post_text = random.choice(EVENING_MESSAGES)  
            keyboard = create_admin_post_keyboard(post_id, 'zodiac')
            
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
        message = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=post_text,
            reply_markup=keyboard
        )
        
        await query.edit_message_text(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!\n–¢–∏–ø: {post_type}\nID: {post_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

async def cancel_post_preview(query, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞"""
    await query.edit_message_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def cleanup_old_data(query, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–π"""
    try:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        cleaned_count = reactions_db.cleanup_old_data(30)
        
        await query.edit_message_text(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cleaned_count}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        evening_text = random.choice(EVENING_MESSAGES)
        post_text = f"üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! ‚ú®\n\n{evening_text}"
        
async def handle_morning_variant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    query = update.callback_query
    if not query:
        return
        
    await query.answer()
    
    data = query.data
    if not data:
        return
        
    if data == 'morning_variant1':
        message = "üåÖ –ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ –≤—ã–±—Ä–∞–Ω! –û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! ‚ö°"
    elif data == 'morning_variant2':
        message = "üåû –ü—É—Ç—å –∫ –ø–æ–±–µ–¥–∞–º –æ—Ç–∫—Ä—ã—Ç! –£–¥–∞—á–∏! üèÜ"
    elif data == 'morning_variant3':
        message = "‚≠ê –ó–≤–µ–∑–¥–Ω—ã–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í–ø–µ—Ä–µ–¥! üöÄ"
    else:
        message = "‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!"
    
    await query.answer(message, show_alert=True)

async def show_broadcast_menu(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        keyboard = [
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data="broadcast_all")],
            [InlineKeyboardButton("üë• –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_active")],
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="broadcast_announcement")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì¢ –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_broadcast_menu: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏")

async def show_users_management(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        from utils.database import reactions_db
        data = reactions_db.get_data()
        users = data.get('users', {})
        total_users = len(users)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        import time
        week_ago = time.time() - (7 * 24 * 60 * 60)
        active_users = 0
        for user_data in users.values():
            reactions = user_data.get('reactions', {})
            if any(reaction_time > week_ago for reaction_time in reactions.values()):
                active_users += 1
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_stats")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="users_blocked")],
            [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞", callback_data="users_export")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞ –Ω–µ–¥–µ–ª—é): {active_users}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_users - active_users}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_users_management: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

async def show_logs(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –±–æ—Ç–∞"""
    try:
        import os
        
        keyboard = [
            [InlineKeyboardButton("üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫", callback_data="logs_recent")],
            [InlineKeyboardButton("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏", callback_data="logs_errors")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="logs_clear")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞
        log_size = 0
        if os.path.exists('bot.log'):
            log_size = os.path.getsize('bot.log')
        
        text = f"""üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
        
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {log_size} –±–∞–π—Ç
‚Ä¢ –ü—É—Ç—å: bot.log

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_logs: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ª–æ–≥–æ–≤")

async def show_settings(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    try:
        keyboard = [
            [InlineKeyboardButton("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤", callback_data="settings_schedule")],
            [InlineKeyboardButton("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞", callback_data="settings_channel")],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="settings_backup")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å—Ç–æ–≤
üì± –ö–∞–Ω–∞–ª - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏"""
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_settings: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

async def restart_bot(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="restart_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        
‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫:
‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?"""
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restart_bot: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")

async def test_functions(query, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        keyboard = [
            [InlineKeyboardButton("üîó –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞", callback_data="test_webhook")],
            [InlineKeyboardButton("üì± –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä", callback_data="test_keyboards")],
            [InlineKeyboardButton("üì¢ –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="test_publish")],
            [InlineKeyboardButton("üíæ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data="test_database")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        
–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

üîó –í–µ–±—Ö—É–∫ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
üì± –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã - —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è - —Ç–µ—Å—Ç –ø–æ—Å—Ç–∏–Ω–≥–∞
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ test_functions: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
