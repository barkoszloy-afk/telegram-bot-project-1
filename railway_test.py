#!/usr/bin/env python3
# railway_test.py - –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è Railway
import os
import sys
import asyncio
from pathlib import Path

def test_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['BOT_TOKEN', 'ADMIN_ID', 'CHANNEL_ID']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"  ‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print("üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ Railway Dashboard")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def test_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'main_bot_railway.py',
        'config.py', 
        'requirements.txt',
        'railway.json',
        'handlers/admin.py',
        'handlers/reactions.py',
        'utils/database.py',
        'utils/keyboards.py'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path}: –ù–ï –ù–ê–ô–î–ï–ù")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    return True

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import telegram
        print("  ‚úÖ python-telegram-bot")
    except ImportError:
        print("  ‚ùå python-telegram-bot: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return False
    
    try:
        import flask
        print("  ‚úÖ flask")
    except ImportError:
        print("  ‚ùå flask: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù") 
        return False
    
    try:
        from dotenv import load_dotenv
        print("  ‚úÖ python-dotenv")
    except ImportError:
        print("  ‚ùå python-dotenv: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def test_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        sys.path.append('.')
        from config import BOT_TOKEN, ADMIN_ID, validate_config
        
        validate_config()
        print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_railway_readiness():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ Railway"""
    print("\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ Railway...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ railway.json
    railway_config = Path('railway.json')
    if railway_config.exists():
        print("  ‚úÖ railway.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("  ‚ùå railway.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ main_bot_railway.py
    railway_main = Path('main_bot_railway.py')
    if railway_main.exists():
        print("  ‚úÖ main_bot_railway.py –≥–æ—Ç–æ–≤")
    else:
        print("  ‚ùå main_bot_railway.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
    requirements = Path('requirements.txt')
    if requirements.exists():
        with open(requirements, 'r') as f:
            content = f.read()
            if 'flask' in content:
                print("  ‚úÖ requirements.txt –≤–∫–ª—é—á–∞–µ—Ç flask")
            else:
                print("  ‚ùå flask –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ requirements.txt")
                return False
    
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö RAILWAY")
    print("=" * 40)
    
    tests = [
        test_files,
        test_imports, 
        test_environment_variables,
        test_config,
        test_railway_readiness
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway Dashboard")
        print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Railway")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Railway")
        return True
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
