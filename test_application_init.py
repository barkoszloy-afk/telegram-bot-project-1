#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ main_bot_railway.py —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sys
import os
import logging
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/konstantinbaranov/Desktop/eto vse ty/telegram-bot-project-1')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_application_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Application"""
    try:
        print("üß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø APPLICATION")
        print("=" * 40)
        
        from config import BOT_TOKEN, CONNECT_TIMEOUT, READ_TIMEOUT, WRITE_TIMEOUT, POOL_TIMEOUT
        from telegram.ext import Application
        
        print(f"üîë BOT_TOKEN: {BOT_TOKEN[:10] if BOT_TOKEN else None}...")
        print(f"‚è±Ô∏è Timeouts: {CONNECT_TIMEOUT}, {READ_TIMEOUT}, {WRITE_TIMEOUT}, {POOL_TIMEOUT}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not BOT_TOKEN:
            print("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            pytest.skip("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º Application –∫–∞–∫ –≤ main_bot_railway.py
        print("üì± –°–æ–∑–¥–∞–µ–º Application...")
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .connect_timeout(CONNECT_TIMEOUT)
            .read_timeout(READ_TIMEOUT) 
            .write_timeout(WRITE_TIMEOUT)
            .pool_timeout(POOL_TIMEOUT)
            .build()
        )
        
        print(f"‚úÖ Application —Å–æ–∑–¥–∞–Ω: {type(application)}")
        print(f"ü§ñ Bot: {application.bot}")
        print(f"üìã Handlers: {len(application.handlers)}")
        
        assert application is not None, "Application –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert application.bot is not None, "Bot –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Update
        from telegram import Update
        
        test_update_data = {
            "update_id": 999999,
            "message": {
                "message_id": 9999,
                "from": {
                    "id": 345470935,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "testuser"
                },
                "chat": {
                    "id": 345470935,
                    "first_name": "Test", 
                    "username": "testuser",
                    "type": "private"
                },
                "date": 1735776000,
                "text": "/start"
            }
        }
        
        print("üì® –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç...")
        update = Update.de_json(test_update_data, application.bot)
        print(f"‚úÖ Update —Å–æ–∑–¥–∞–Ω: {update.update_id}")
        
        assert update is not None, "Update –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert update.update_id == 999999, "Update ID –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"
        
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        
        # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if "You must pass the token" in str(e):
            pytest.skip(f"BOT_TOKEN –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {e}")
        else:
            pytest.fail(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Application: {e}")

if __name__ == "__main__":
    test_application_creation()
