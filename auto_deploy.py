#!/usr/bin/env python3
"""
üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ Railway —á–µ—Ä–µ–∑ Python
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ bash —Å–∫—Ä–∏–ø—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Windows
"""

import os
import sys
import subprocess
import json
import time
import requests
from typing import Optional, Dict, Any

class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    RED = '\033[0;31m'
    GREEN = '\033[0;32m' 
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    WHITE = '\033[1;37m'
    NC = '\033[0m'  # No Color

class AutoDeploy:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è"""
    
    def __init__(self):
        self.project_dir = os.path.dirname(os.path.abspath(__file__))
        self.railway_installed = False
        self.railway_logged_in = False
        
    def print_step(self, message: str) -> None:
        """–ü–µ—á–∞—Ç—å —à–∞–≥–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"{Colors.BLUE}üìã {message}{Colors.NC}")
        
    def print_success(self, message: str) -> None:
        """–ü–µ—á–∞—Ç—å —É—Å–ø–µ—Ö–∞"""
        print(f"{Colors.GREEN}‚úÖ {message}{Colors.NC}")
        
    def print_warning(self, message: str) -> None:
        """–ü–µ—á–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.NC}")
        
    def print_error(self, message: str) -> None:
        """–ü–µ—á–∞—Ç—å –æ—à–∏–±–∫–∏"""
        print(f"{Colors.RED}‚ùå {message}{Colors.NC}")
        
    def run_command(self, command: str, capture_output: bool = True, check: bool = True) -> subprocess.CompletedProcess:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if capture_output:
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    check=check,
                    cwd=self.project_dir
                )
            else:
                result = subprocess.run(
                    command, 
                    shell=True, 
                    check=check,
                    cwd=self.project_dir
                )
            return result
        except subprocess.CalledProcessError as e:
            if check:
                self.print_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
                self.print_error(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
                if e.stderr:
                    self.print_error(f"Stderr: {e.stderr}")
                raise
            return e
    
    def check_railway_cli(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Railway CLI"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Railway CLI...")
        
        try:
            result = self.run_command("railway --version")
            self.railway_installed = True
            self.print_success(f"Railway CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        except subprocess.CalledProcessError:
            self.print_warning("Railway CLI –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def install_railway_cli(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Railway CLI"""
        self.print_step("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Railway CLI...")
        
        system = sys.platform.lower()
        
        try:
            if system == "win32":
                # Windows
                self.print_step("–°–∫–∞—á–∏–≤–∞–µ–º Railway CLI –¥–ª—è Windows...")
                install_cmd = 'powershell -Command "iwr -useb https://railway.app/install.ps1 | iex"'
            elif system == "darwin":
                # macOS
                if self.run_command("which brew", check=False).returncode == 0:
                    install_cmd = "brew install railway"
                else:
                    install_cmd = "curl -fsSL https://railway.app/install.sh | sh"
            else:
                # Linux
                install_cmd = "curl -fsSL https://railway.app/install.sh | sh"
            
            result = self.run_command(install_cmd, capture_output=False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
            time.sleep(2)
            return self.check_railway_cli()
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Railway CLI: {e}")
            self.print_warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Railway CLI –≤—Ä—É—á–Ω—É—é: https://docs.railway.app/develop/cli")
            return False
    
    def check_railway_auth(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Railway"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Railway...")
        
        try:
            result = self.run_command("railway whoami")
            self.railway_logged_in = True
            self.print_success(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {result.stdout.strip()}")
            return True
        except subprocess.CalledProcessError:
            self.print_warning("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Railway")
            return False
    
    def login_railway(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Railway"""
        self.print_step("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Railway...")
        self.print_warning("–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        try:
            self.run_command("railway login", capture_output=False)
            return self.check_railway_auth()
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def setup_project(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Railway"""
        self.print_step("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç Railway...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
        try:
            result = self.run_command("railway status")
            self.print_success("–ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å Railway")
            print(result.stdout)
            return True
        except subprocess.CalledProcessError:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
            self.print_step("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...")
            
            try:
                self.run_command("railway project create telegram-bot-project", capture_output=False)
                self.run_command("railway link", capture_output=False)
                self.print_success("–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–≤—è–∑–∞–Ω")
                return True
            except Exception as e:
                self.print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
                return False
    
    def setup_environment_vars(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.print_step("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        try:
            result = self.run_command("railway vars", check=False)
            if result.returncode == 0:
                print("–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                print(result.stdout)
        except:
            pass
        
        print("\n" + "="*50)
        print("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("="*50)
        
        setup = input("–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å? (y/n): ").lower()
        
        if setup == 'y':
            # BOT_TOKEN
            print("\nü§ñ BOT_TOKEN:")
            print("1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram")
            print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newbot")
            print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω")
            bot_token = input("–í–≤–µ–¥–∏—Ç–µ BOT_TOKEN: ").strip()
            
            if bot_token:
                self.run_command(f'railway vars set BOT_TOKEN="{bot_token}"')
                self.print_success("BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # ADMIN_ID
            print("\nüë§ ADMIN_ID:")
            print("1. –ù–∞–ø–∏—à–∏—Ç–µ @userinfobot –≤ Telegram")
            print("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID")
            admin_id = input("–í–≤–µ–¥–∏—Ç–µ ADMIN_ID: ").strip()
            
            if admin_id:
                self.run_command(f'railway vars set ADMIN_ID="{admin_id}"')
                self.print_success("ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # CHANNEL_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            channel_setup = input("\n–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CHANNEL_ID? (y/n): ").lower()
            if channel_setup == 'y':
                channel_id = input("–í–≤–µ–¥–∏—Ç–µ CHANNEL_ID: ").strip()
                if channel_id:
                    self.run_command(f'railway vars set CHANNEL_ID="{channel_id}"')
                    self.print_success("CHANNEL_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # PORT
            self.run_command('railway vars set PORT="8000"')
            self.print_success("PORT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            return True
        else:
            self.print_warning("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∑–∂–µ")
            return True
    
    def commit_and_push(self) -> bool:
        """–ö–æ–º–º–∏—Ç –∏ –ø—É—à –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
            result = self.run_command("git status --porcelain")
            
            if result.stdout.strip():
                self.print_step("–ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
                self.run_command("git add .")
                commit_msg = f"üöÄ Auto-deploy: {time.strftime('%Y-%m-%d %H:%M:%S')}"
                self.run_command(f'git commit -m "{commit_msg}"')
                self.print_success("–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã")
            
            # –ü—É—à–∏–º –≤ GitHub (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            try:
                self.run_command("git remote get-url origin")
                self.print_step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GitHub...")
                self.run_command("git push origin main", check=False)
                self.print_success("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GitHub")
            except:
                self.print_warning("GitHub remote –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ push")
            
            return True
            
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å git: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    
    def deploy_to_railway(self) -> bool:
        """–î–µ–ø–ª–æ–π –≤ Railway"""
        self.print_step("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π –≤ Railway...")
        
        try:
            self.run_command("railway up --detach", capture_output=False)
            self.print_success("–î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω!")
            return True
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
            return False
    
    def check_deployment_status(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è...")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        time.sleep(10)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–æ–µ–∫—Ç–∞
            result = self.run_command("railway domain", check=False)
            
            if result.returncode == 0 and result.stdout.strip():
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    if 'https://' in line:
                        url = line.strip()
                        self.print_success(f"üåê –ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º healthcheck
                        time.sleep(5)
                        try:
                            health_url = f"{url}/health"
                            response = requests.get(health_url, timeout=10)
                            
                            if response.status_code == 200:
                                self.print_success("‚ú® –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                                
                                print(f"\n{Colors.CYAN}üéØ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:{Colors.NC}")
                                print(f"   üåê –û—Å–Ω–æ–≤–Ω–æ–π URL: {url}")
                                print(f"   ‚ù§Ô∏è  Healthcheck: {health_url}")
                                print(f"   üìã –õ–æ–≥–∏: {url}/logs")
                                print(f"   üèóÔ∏è  Railway Dashboard: https://railway.app/dashboard")
                                
                                print(f"\n{Colors.PURPLE}üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞:{Colors.NC}")
                                print("   1. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram")
                                print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
                                print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ–Ω—é")
                                
                            else:
                                self.print_warning("Healthcheck –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
                                
                        except requests.RequestException:
                            self.print_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å healthcheck")
                        
                        break
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                try:
                    result = self.run_command("railway status")
                    print(result.stdout)
                except:
                    pass
                    
                self.print_success("–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway Dashboard")
                
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def print_helpful_commands(self) -> None:
        """–ü–µ—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        print(f"\n{Colors.CYAN}üìö –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Railway:{Colors.NC}")
        print("   railway logs          - –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("   railway status        - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞")
        print("   railway vars          - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   railway open          - –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("   railway domain        - –ø–æ–ª—É—á–∏—Ç—å URL –ø—Ä–æ–µ–∫—Ç–∞")
        print("   railway restart       - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
    
    def run_full_deploy(self) -> bool:
        """–ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π"""
        print(f"{Colors.WHITE}üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π Telegram Bot –Ω–∞ Railway{Colors.NC}")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(os.path.join(self.project_dir, "main_bot_railway.py")):
            self.print_error("–§–∞–π–ª main_bot_railway.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            self.print_error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            return False
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Railway CLI
        if not self.check_railway_cli():
            if not self.install_railway_cli():
                return False
        
        # –®–∞–≥ 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.check_railway_auth():
            if not self.login_railway():
                return False
        
        # –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        if not self.setup_project():
            return False
        
        # –®–∞–≥ 4: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not self.setup_environment_vars():
            return False
        
        # –®–∞–≥ 5: Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.commit_and_push()
        
        # –®–∞–≥ 6: –î–µ–ø–ª–æ–π
        if not self.deploy_to_railway():
            return False
        
        # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.check_deployment_status()
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        print(f"\n{Colors.GREEN}üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!{Colors.NC}")
        self.print_helpful_commands()
        
        return True
    
    def quick_deploy(self) -> bool:
        """–ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        print(f"{Colors.WHITE}‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π...{Colors.NC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not self.check_railway_cli():
            self.print_error("Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π.")
            return False
        
        if not self.check_railway_auth():
            self.print_error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Railway. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π.")
            return False
        
        # –ë—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.commit_and_push()
        
        if self.deploy_to_railway():
            self.print_success("üéâ –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                result = self.run_command("railway domain", check=False)
                if result.returncode == 0 and result.stdout.strip():
                    for line in result.stdout.strip().split('\n'):
                        if 'https://' in line:
                            url = line.strip()
                            print(f"üåê URL: {url}")
                            print(f"‚ù§Ô∏è Health: {url}/health")
                            break
            except:
                pass
            
            self.print_helpful_commands()
            return True
        
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    deployer = AutoDeploy()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "quick":
        success = deployer.quick_deploy()
    else:
        success = deployer.run_full_deploy()
    
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    main()