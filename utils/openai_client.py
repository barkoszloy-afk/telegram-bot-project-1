# utils/openai_client.py - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI ChatGPT

import os
import logging
import asyncio
from typing import List, Dict, Optional, Union
from openai import AsyncOpenAI
import json

logger = logging.getLogger(__name__)

class ChatGPTClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ChatGPT API"""
    
    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY')
        if not self.api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            self.client = None
        else:
            self.client = AsyncOpenAI(api_key=self.api_key)
            logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_model = "gpt-3.5-turbo"
        self.max_tokens = 1000
        self.temperature = 0.7
        self.conversation_history = {}
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ ChatGPT API"""
        return self.client is not None and self.api_key is not None
    
    async def chat_completion(
        self,
        message: str,
        user_id: int,
        system_prompt: Optional[str] = None,
        model: Optional[str] = None,
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None
    ) -> Dict[str, Union[str, bool, int]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ ChatGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            model: –ú–æ–¥–µ–ª—å GPT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-3.5-turbo)
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å) –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º, —Å—Ç–∞—Ç—É—Å–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not self.is_available():
            return {
                "success": False,
                "response": "‚ùå ChatGPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                "error": "API_NOT_AVAILABLE"
            }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            model = model or self.default_model
            max_tokens = max_tokens or self.max_tokens
            temperature = temperature or self.temperature
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.conversation_history:
                self.conversation_history[user_id] = []
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            if system_prompt:
                messages.append({"role": "system", "content": system_prompt})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
            history = self.conversation_history[user_id][-10:]
            messages.extend(history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({"role": "user", "content": message})
            
            logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ChatGPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(messages)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
            response = await self.client.chat.completions.create(
                model=model,
                messages=messages,
                max_tokens=max_tokens,
                temperature=temperature
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            ai_response = response.choices[0].message.content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history[user_id].append({"role": "user", "content": message})
            self.conversation_history[user_id].append({"role": "assistant", "content": ai_response})
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
            if len(self.conversation_history[user_id]) > 20:
                self.conversation_history[user_id] = self.conversation_history[user_id][-20:]
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return {
                "success": True,
                "response": ai_response,
                "model_used": model,
                "tokens_used": response.usage.total_tokens if response.usage else 0,
                "conversation_length": len(self.conversation_history[user_id])
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ChatGPT API: {e}")
            return {
                "success": False,
                "response": f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
                "error": str(e)
            }
    
    async def generate_horoscope(self, zodiac_sign: str, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø"""
        system_prompt = f"""
        –¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. 
        –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {zodiac_sign}.
        
        –í–∫–ª—é—á–∏:
        - –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
        - –°–æ–≤–µ—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—å–µ—Ä–µ
        - –°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞ –∏ —Ü–≤–µ—Ç–∞
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        
        –°—Ç–∏–ª—å: —Ç–µ–ø–ª—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π
        –î–ª–∏–Ω–∞: 150-200 —Å–ª–æ–≤
        """
        
        message = f"–°–æ–∑–¥–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ {zodiac_sign} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        result = await self.chat_completion(message, user_id, system_prompt)
        
        if result["success"]:
            return f"üîÆ **–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_sign}**\n\n{result['response']}"
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    async def generate_morning_message(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π"""
        system_prompt = """
        –¢—ã - –º—É–¥—Ä—ã–π –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –°–æ–∑–¥–∞–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ.
        
        –í–∫–ª—é—á–∏:
        - –¢–µ–ø–ª–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        - –ú–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –º—ã—Å–ª—å
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å
        - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
        
        –°—Ç–∏–ª—å: –¥–æ–±—Ä—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –¥—É—Ö–æ–≤–Ω—ã–π
        –î–ª–∏–Ω–∞: 100-150 —Å–ª–æ–≤
        """
        
        message = "–°–æ–∑–¥–∞–π –¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –Ω–∞ –¥–µ–Ω—å"
        result = await self.chat_completion(message, user_id, system_prompt)
        
        if result["success"]:
            return f"üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!**\n\n{result['response']}"
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    async def generate_evening_message(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π"""
        system_prompt = """
        –¢—ã - –º—É–¥—Ä—ã–π –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –°–æ–∑–¥–∞–π —Å–ø–æ–∫–æ–π–Ω–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ.
        
        –í–∫–ª—é—á–∏:
        - –¢–µ–ø–ª–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        - –†–µ—Ñ–ª–µ–∫—Å–∏—é –æ –ø—Ä–æ—à–µ–¥—à–µ–º –¥–Ω–µ
        - –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ
        - –ü–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞ –Ω–æ—á—å
        
        –°—Ç–∏–ª—å: —Å–ø–æ–∫–æ–π–Ω—ã–π, —É–º–∏—Ä–æ—Ç–≤–æ—Ä—è—é—â–∏–π, –º—É–¥—Ä—ã–π
        –î–ª–∏–Ω–∞: 100-150 —Å–ª–æ–≤
        """
        
        message = "–°–æ–∑–¥–∞–π –≤–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –ø–æ–∫–æ—è"
        result = await self.chat_completion(message, user_id, system_prompt)
        
        if result["success"]:
            return f"üåô **–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ**\n\n{result['response']}"
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    async def generate_tarot_reading(self, question: str, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ"""
        system_prompt = """
        –¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–∏–∫–∏ –∫–∞—Ä—Ç –¢–∞—Ä–æ.
        –°–æ–∑–¥–∞–π –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ–¥–Ω—É –∫–∞—Ä—Ç—É.
        
        –í–∫–ª—é—á–∏:
        - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ
        - –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
        - –î—É—Ö–æ–≤–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ
        
        –°—Ç–∏–ª—å: –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, –º—É–¥—Ä—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π
        –î–ª–∏–Ω–∞: 150-200 —Å–ª–æ–≤
        """
        
        message = f"–°–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
        result = await self.chat_completion(message, user_id, system_prompt)
        
        if result["success"]:
            return f"üîÆ **–ö–∞—Ä—Ç–∞ –¥–Ω—è**\n\n{result['response']}"
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    async def answer_spiritual_question(self, question: str, user_id: int) -> str:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –¥—É—Ö–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        system_prompt = """
        –¢—ã - –º—É–¥—Ä—ã–π –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∂–∏–∑–Ω–∏.
        –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ–º –∏ –º—É–¥—Ä–æ—Å—Ç—å—é.
        
        –°—Ç–∏–ª—å: –º—É–¥—Ä—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π
        –ò–∑–±–µ–≥–∞–π: –¥–æ–≥–º–∞—Ç–∏–∑–º–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—É–∂–¥–µ–Ω–∏–π
        –§–æ–∫—É—Å: –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ä–æ—Å—Ç–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–∏
        """
        
        result = await self.chat_completion(question, user_id, system_prompt)
        
        if result["success"]:
            return f"üßò‚Äç‚ôÄÔ∏è **–î—É—Ö–æ–≤–Ω—ã–π –æ—Ç–≤–µ—Ç**\n\n{result['response']}"
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    def clear_conversation(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.conversation_history:
            del self.conversation_history[user_id]
            logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        return False
    
    def get_conversation_length(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return len(self.conversation_history.get(user_id, []))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
chatgpt_client = ChatGPTClient()
