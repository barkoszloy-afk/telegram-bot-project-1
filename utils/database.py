# utils/database.py - –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
import json
import time
import logging
from typing import Dict, Any, Optional
from config import REACTIONS_FILE, CACHE_TTL, REACTION_NAMES

class ReactionsDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self._cache: Optional[Dict[str, Any]] = None
        self._cache_timestamp: float = 0
        
    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
        if self._cache is None or (current_time - self._cache_timestamp > 1):
            try:
                with open(REACTIONS_FILE, 'r', encoding='utf-8') as f:
                    self._cache = json.load(f)
                    self._cache_timestamp = current_time
                    logging.info("üîÑ –î–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
            except (FileNotFoundError, json.JSONDecodeError) as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–π: {e}")
                self._cache = {'posts': {}}
                self._cache_timestamp = current_time
                
        return self._cache.copy() if self._cache else {'posts': {}}
    
    def save_data(self, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à"""
        try:
            with open(REACTIONS_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._cache = data.copy()
            self._cache_timestamp = time.time()
            logging.info("üíæ –î–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π: {e}")
            return False
    
    def get_post_reactions(self, post_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏—è—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        data = self.load_data()
        
        if post_id not in data['posts']:
            data['posts'][post_id] = {
                'reactions': {k: 0 for k in REACTION_NAMES},
                'reaction_users': {k: [] for k in REACTION_NAMES}
            }
            self.save_data(data)
            
        return data['posts'][post_id]
    
    @property
    def data(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–π"""
        return self.load_data()
    
    def get_data(self) -> dict:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        return self.load_data()
    
    def cleanup_old_data(self, days_old: int = 7) -> int:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–π"""
        try:
            data = self.load_data()
            current_time = time.time()
            cutoff_time = current_time - (days_old * 24 * 3600)
            
            posts_to_remove = []
            for post_id, post_data in data.get('posts', {}).items():
                if post_data.get('timestamp', 0) < cutoff_time:
                    posts_to_remove.append(post_id)
            
            for post_id in posts_to_remove:
                del data['posts'][post_id]
            
            if posts_to_remove:
                self.save_data(data)
                logging.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(posts_to_remove)} —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            return len(posts_to_remove)
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0

    def add_user_reaction(self, user_id: str, reaction: str, post_id: str) -> Optional[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –µ—Å–ª–∏ –±—ã–ª–∞"""
        data = self.load_data()
        post_reactions = self.get_post_reactions(post_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é
        previous_reaction = self.get_user_reaction(user_id, post_reactions)
        if previous_reaction:
            return previous_reaction
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
        post_reactions['reactions'][reaction] += 1
        post_reactions['reaction_users'][reaction].append(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        data['posts'][post_id] = post_reactions
        self.save_data(data)
        
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {reaction} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
        return None
    
    def get_user_reaction(self, user_id: str, post_reactions: Dict[str, Any]) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å"""
        for reaction_name, users in post_reactions['reaction_users'].items():
            if user_id in users:
                return reaction_name
        return None
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º"""
        data = self.load_data()
        total_posts = len(data['posts'])
        total_reactions = 0
        reaction_totals = {k: 0 for k in REACTION_NAMES}
        
        for post_data in data['posts'].values():
            for reaction, count in post_data['reactions'].items():
                total_reactions += count
                reaction_totals[reaction] += count
                
        return {
            'total_posts': total_posts,
            'total_reactions': total_reactions,
            'reaction_totals': reaction_totals
        }
    
    def cleanup_old_posts(self, max_age_days: int = 30) -> int:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"""
        data = self.load_data()
        current_time = time.time()
        max_age_seconds = max_age_days * 24 * 60 * 60
        
        posts_to_remove = []
        for post_id in data['posts']:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ post_id, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                # –§–æ—Ä–º–∞—Ç: horoscope_20250802_031344
                if '_' in post_id:
                    date_str = post_id.split('_')[1]
                    if len(date_str) == 8:  # YYYYMMDD
                        post_year = int(date_str[:4])
                        post_month = int(date_str[4:6])
                        post_day = int(date_str[6:8])
                        
                        import datetime
                        post_date = datetime.datetime(post_year, post_month, post_day)
                        post_timestamp = post_date.timestamp()
                        
                        if current_time - post_timestamp > max_age_seconds:
                            posts_to_remove.append(post_id)
            except (ValueError, IndexError):
                continue
                
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã
        for post_id in posts_to_remove:
            del data['posts'][post_id]
            
        if posts_to_remove:
            self.save_data(data)
            logging.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(posts_to_remove)} —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
        return len(posts_to_remove)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
reactions_db = ReactionsDB()
