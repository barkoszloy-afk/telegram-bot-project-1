#!/usr/bin/env python3
# security_check.py - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

import os
import re
import ast
import sys
from pathlib import Path

class SecurityChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
    
    def __init__(self):
        self.issues = []
        self.warnings = []
        
    def check_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self._check_hardcoded_secrets(file_path, content)
            self._check_sql_injection(file_path, content)
            self._check_insecure_imports(file_path, content)
            self._check_eval_usage(file_path, content)
            
        except Exception as e:
            self.warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {file_path}: {e}")
    
    def _check_hardcoded_secrets(self, file_path, content):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã"""
        patterns = [
            r'password\s*=\s*["\'][^"\']+["\']',
            r'secret\s*=\s*["\'][^"\']+["\']',
            r'key\s*=\s*["\'][^"\']+["\']',
            r'token\s*=\s*["\'][^"\']+["\']'
        ]
        
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ os.getenv
            if line.strip().startswith('#') or 'os.getenv' in line or 'BOT_TOKEN}' in line:
                continue
                
            for pattern in patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                    if 'TEST' not in line.upper() and 'EXAMPLE' not in line.upper():
                        self.issues.append(f"üîê –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –≤ {file_path}:{i}")
    
    def _check_sql_injection(self, file_path, content):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏"""
        if 'sql' in content.lower() or 'execute' in content.lower():
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å SQL –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            sql_patterns = [
                r'execute\s*\(\s*["\'].*%.*["\']',
                r'execute\s*\(\s*f["\'].*{.*}.*["\']'
            ]
            
            lines = content.split('\n')
            for i, line in enumerate(lines, 1):
                for pattern in sql_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        self.issues.append(f"üíâ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è SQL –∏–Ω—ä–µ–∫—Ü–∏—è –≤ {file_path}:{i}")
    
    def _check_insecure_imports(self, file_path, content):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
        dangerous_imports = ['pickle', 'marshal', 'shelve']
        
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            for imp in dangerous_imports:
                if f'import {imp}' in line or f'from {imp}' in line:
                    self.warnings.append(f"‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤ {file_path}:{i} - {imp}")
    
    def _check_eval_usage(self, file_path, content):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval/exec"""
        dangerous_functions = ['eval', 'exec', 'compile']
        
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            for func in dangerous_functions:
                if f'{func}(' in line and not line.strip().startswith('#'):
                    self.issues.append(f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {func} –≤ {file_path}:{i}")
    
    def check_project(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç"""
        python_files = []
        for root, dirs, files in os.walk('.'):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if any(skip in root for skip in ['__pycache__', '.git', '.venv', 'venv']):
                continue
                
            for file in files:
                if file.endswith('.py'):
                    python_files.append(os.path.join(root, file))
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(python_files)} Python —Ñ–∞–π–ª–æ–≤...")
        
        for file_path in python_files:
            self.check_file(file_path)
        
        return self.generate_report()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*60)
        print("üõ°Ô∏è –û–¢–ß–ï–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("="*60)
        
        if self.issues:
            print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(self.issues)} –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
            for issue in self.issues:
                print(f"   {issue}")
        else:
            print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   {warning}")
        else:
            print("\n‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        total_problems = len(self.issues) + len(self.warnings)
        if total_problems == 0:
            security_level = "üü¢ –í–´–°–û–ö–ò–ô"
        elif len(self.issues) == 0:
            security_level = "üü° –°–†–ï–î–ù–ò–ô"
        else:
            security_level = "üî¥ –ù–ò–ó–ö–ò–ô"
        
        print(f"\nüéØ –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_level}")
        print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {total_problems}")
        
        return len(self.issues) == 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    
    checker = SecurityChecker()
    is_secure = checker.check_project()
    
    if is_secure:
        print("\nüéâ –ü—Ä–æ–µ–∫—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        sys.exit(1)


if __name__ == "__main__":
    main()