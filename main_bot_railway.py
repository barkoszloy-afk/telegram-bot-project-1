# main_bot_railway.py - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–∞–∑–æ–≤—ã–º –º–µ–Ω—é
import logging
import os
import threading
import time
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from flask import Flask, jsonify

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import (
    BOT_TOKEN, validate_config,
    CONNECT_TIMEOUT, READ_TIMEOUT, WRITE_TIMEOUT, POOL_TIMEOUT
)
from utils.keyboards import (
    create_main_menu_keyboard,
    create_esoteric_submenu,
    create_motivation_submenu,
    create_development_submenu,
    create_health_submenu,
    create_relationships_submenu,
    create_zodiac_keyboard
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
from handlers.diagnostics import (
    ping_command, status_command, uptime_command, 
    version_command, health_command
)
from handlers.stats import (
    stats_command, users_command, update_stats
)
from handlers.user_commands import (
    about_command, profile_command, feedback_command, settings_command
)
from handlers.content_commands import (
    random_command, popular_command, recent_command,
    categories_command, search_command
)
from handlers.admin_commands import (
    logs_command, restart_command, broadcast_command, cleanup_command
)
from handlers.chatgpt_commands import (
    handle_chatgpt_callback, chatgpt_command, process_gpt_message
)

# Flask app –¥–ª—è health endpoint
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
application: Optional[Application] = None
start_time: Optional[float] = None

# ================== FLASK ENDPOINTS ==================

@app.route('/health')
def health_check():
    """Health check endpoint –¥–ª—è Railway"""
    uptime = time.time() - start_time if start_time else 0
    return jsonify({
        'status': 'healthy',
        'uptime_seconds': round(uptime, 2),
        'service': 'telegram-bot',
        'version': '1.0.0'
    })

@app.route('/')
def root():
    """Root endpoint"""
    return jsonify({
        'message': 'Telegram Bot is running',
        'status': 'online',
        'endpoints': ['/health', '/webhook']
    })

@app.route('/webhook/<token>', methods=['POST'])
def webhook(token):
    """Webhook endpoint –¥–ª—è Telegram"""
    from flask import request
    import asyncio
    import threading
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if token != BOT_TOKEN:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ webhook: {token[:10]}...")
        return '', 404
    
    if not application:
        logger.error("‚ùå Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return '', 500
    
    try:
        update_data = request.get_json()
        if not update_data:
            logger.warning("‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ webhook")
            return '', 400
            
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook update: {update_data.get('update_id', 'unknown')}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'message' in update_data:
            msg = update_data['message']
            user_id = msg.get('from', {}).get('id', 'unknown')
            text = msg.get('text', 'no text')
            logger.info(f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
        
        update = Update.de_json(update_data, application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –Ω–æ–≤—ã–º event loop
        def process_update():
            try:
                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É update...")
                asyncio.run(application.process_update(update))
                logger.info("‚úÖ Update –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: {e}")
                import traceback
                logger.error(f"üìã Traceback: {traceback.format_exc()}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=process_update)
        thread.daemon = True
        thread.start()
        
        logger.info("‚úÖ Webhook update –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        return '', 500
    
    return '', 200

# ================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        user_name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
        logger.info(f"üåü –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            update_stats(
                user_id, 
                update.effective_user.username if update.effective_user else None,
                update.effective_user.first_name if update.effective_user else None,
                "start"
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info("üìã –í—ã–∑—ã–≤–∞–µ–º show_main_menu...")
        await show_main_menu(update, context)
        logger.info("‚úÖ show_main_menu –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ webhook —Ä–µ–∂–∏–º–µ, 
        # —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å event loop

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help - –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        logger.info(f"üìö –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            update_stats(
                user_id, 
                update.effective_user.username if update.effective_user else None,
                update.effective_user.first_name if update.effective_user else None,
                "help"
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update –¥–ª—è /help")
            return

        help_text = """ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É  
/instructions - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
1. –ù–∞–∂–º–∏—Ç–µ /start
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º!

üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin"""

        await update.message.reply_text(help_text)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")

async def instructions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /instructions - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        logger.info(f"üìñ –ö–æ–º–∞–Ω–¥–∞ /instructions –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update –¥–ª—è /instructions")
            return

        instructions_text = """üìö –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
2. –í—ã —É–≤–∏–¥–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 5 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ü–∏—Ç–∞—Ç—ã
üîÆ –≠–∑–æ—Ç–µ—Ä–∏–∫–∞ - –≥–æ—Ä–æ—Å–∫–æ–ø—ã, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å  
üéØ –†–∞–∑–≤–∏—Ç–∏–µ - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç –∏ –æ–±—É—á–µ–Ω–∏–µ
üåü –ó–¥–æ—Ä–æ–≤—å–µ - —Å–æ–≤–µ—Ç—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å–µ
üíù –û—Ç–Ω–æ—à–µ–Ω–∏—è - –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏ –∏ –ª—é–±–≤–∏

‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- /help - –±—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞
- /instructions - —ç—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin

‚ú® –ñ–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"""

        await update.message.reply_text(instructions_text)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /instructions –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /instructions: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        user_name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
        logger.info(f"üß™ –ö–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update –¥–ª—è /test")
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
        import time
        current_time = time.strftime("%Y-%m-%d %H:%M:%S UTC", time.gmtime())
        
        test_text = f"""üß™ **–¢–µ—Å—Ç –±–æ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: {user_id})
üïê **–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:** {current_time}
üåê **–†–µ–∂–∏–º:** Railway webhook
üîó **–°—Ç–∞—Ç—É—Å:** ‚úÖ –û–Ω–ª–∞–π–Ω

**üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –ë—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞  
‚Ä¢ `/instructions` - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ `/test` - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã

**üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ Webhook: –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã: –†–∞–±–æ—Ç–∞—é—Ç
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ

‚úÖ **–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!**"""

        await update.message.reply_text(test_text, parse_mode='Markdown')
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /test –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            if update.message:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞")
        except Exception:
            pass

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    data = query.data
    
    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await show_main_menu(update, context)
        
        # –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã
        elif data.startswith("reaction_"):
            from handlers.reactions import handle_reaction
            await handle_reaction(update, context)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
        elif data.startswith("stats_"):
            from handlers.reactions import show_post_reactions
            await show_post_reactions(update, context)
        
        # –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç (–Ω–æ–≤—ã–π)
        elif data == "random_new":
            from handlers.content_commands import random_command
            await random_command(update, context)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø–æ—Å—Ç
        elif data.startswith("show_post_"):
            await query.answer("üìñ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Å—Ç–∞...", show_alert=True)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        elif data.startswith("category_"):
            category = data.split("_", 1)[1]
            
            if category == "motivation":
                text = """
üí´ **–ú–û–¢–ò–í–ê–¶–ò–Ø**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:

üåÖ **–£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è** - —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
üåô **–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è** - –∏—Ç–æ–≥–∏ –∏ –ø–ª–∞–Ω—ã
üí™ **–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π** - —Å–∏–ª–∞ –¥—É—Ö–∞
üéØ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π** - –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É
"""
                keyboard = create_motivation_submenu()
                
            elif category == "esoteric":
                text = """
üîÆ **–≠–ó–û–¢–ï–†–ò–ö–ê**

–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∏—Ä –¥—É—Ö–æ–≤–Ω–æ—Å—Ç–∏:

üîÆ **–ì–æ—Ä–æ—Å–∫–æ–ø** - –≤–∞—à–µ –∑–≤–µ–∑–¥–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
üåô **–ö–∞—Ä—Ç–∞ –¥–Ω—è** - —Ç–∞—Ä–æ-–ø—Ä–æ–≥–Ω–æ–∑  
‚òÄÔ∏è **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ** - –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π
üåú **–õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑** - –≤–ª–∏—è–Ω–∏–µ –ª—É–Ω—ã
üéØ **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤** - –≥–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
üåü **–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ** - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è
"""
                keyboard = create_esoteric_submenu()
                
            elif category == "development":
                text = """
üéØ **–†–ê–ó–í–ò–¢–ò–ï**

–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–µ–±—è:

üß† **–†–∞–∑–≤–∏—Ç–∏–µ –º—ã—à–ª–µ–Ω–∏—è** - –æ—Å—Ç—Ä—ã–π —É–º
üìö **–û–±—É—á–µ–Ω–∏–µ –∏ –∑–Ω–∞–Ω–∏—è** - –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
üé® **–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ** - —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–∞–ª–∞–Ω—Ç–∞
üíº **–ö–∞—Ä—å–µ—Ä–∞ –∏ –±–∏–∑–Ω–µ—Å** - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
"""
                keyboard = create_development_submenu()
                
            elif category == "health":
                text = """
üåü **–ó–î–û–†–û–í–¨–ï**

–ó–∞–±–æ—Ç–∞ –æ —Ç–µ–ª–µ –∏ –¥—É—à–µ:

üèÉ‚Äç‚ôÇÔ∏è **–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —Å–∏–ª–∞ —Ç–µ–ª–∞
üßò‚Äç‚ôÄÔ∏è **–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ** - –ø–æ–∫–æ–π –¥—É—à–∏
ü•ó **–ü–∏—Ç–∞–Ω–∏–µ –∏ –¥–∏–µ—Ç–∞** - —ç–Ω–µ—Ä–≥–∏—è –∏–∑–Ω—É—Ç—Ä–∏
üò¥ **–°–æ–Ω –∏ –æ—Ç–¥—ã—Ö** - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª
"""
                keyboard = create_health_submenu()
                
            elif category == "relationships":
                text = """
üíù **–û–¢–ù–û–®–ï–ù–ò–Ø**

–ì–∞—Ä–º–æ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏:

üíï **–õ—é–±–æ–≤—å –∏ —Ä–æ–º–∞–Ω—Ç–∏–∫–∞** - –¥–µ–ª–∞ —Å–µ—Ä–¥–µ—á–Ω—ã–µ
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–°–µ–º—å—è –∏ –¥–µ—Ç–∏** - —Å–µ–º–µ–π–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ
üë• **–î—Ä—É–∂–±–∞ –∏ –æ–±—â–µ–Ω–∏–µ** - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
ü§ù **–†–∞–±–æ—á–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è** - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
"""
                keyboard = create_relationships_submenu()
            else:
                await query.answer(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)
                return
                
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        
        # –≠–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        elif data.startswith("esoteric_"):
            selection = data.replace("esoteric_", "")
            
            if selection == "horoscope":
                text = """
üîÆ **–ì–û–†–û–°–ö–û–ü –ù–ê –î–ï–ù–¨**

–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:

‚ú® –ö–∞–∂–¥—ã–π –∑–Ω–∞–∫ –ø–æ–ª—É—á–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
"""
                keyboard = create_zodiac_keyboard()
                await query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
            elif selection == "daily_card":
                text = """
üåô **–ö–ê–†–¢–ê –î–ù–Ø**

üÉè **–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è:**

**üîÆ –ê—Ä–∫–∞–Ω:** –ú–∞–≥

**üí´ –ó–Ω–∞—á–µ–Ω–∏–µ:** –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≤–æ–ø–ª–æ—â–µ–Ω–∏—è –∏–¥–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å. –î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.

**üéØ –°–æ–≤–µ—Ç:** –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ.

**üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è:** –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
**üíº –ö–∞—Ä—å–µ—Ä–∞:** –£—Å–ø–µ—Ö –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö
**üåü –ó–¥–æ—Ä–æ–≤—å–µ:** –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏

üîÆ _–ü—É—Å—Ç—å –∫–∞—Ä—Ç—ã –≤–µ–¥—É—Ç –≤–∞—Å –∫ —É—Å–ø–µ—Ö—É!_
"""
                from config import REACTION_EMOJIS
                import uuid
                post_id = str(uuid.uuid4())[:8]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(emoji, callback_data=f"reaction_{idx}_{post_id}") 
                     for idx, emoji in enumerate(REACTION_EMOJIS)],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{post_id}")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ", callback_data='category_esoteric')]
                ])
                
                await query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
            elif selection == "good_morning":
                text = """
‚òÄÔ∏è **–î–û–ë–†–û–ï –£–¢–†–û!**

üåÖ **–î—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –¥–µ–Ω—å:**

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, –¥–æ—Ä–æ–≥–∏–µ –¥—É—à–∏! ‚ú®

–°–µ–≥–æ–¥–Ω—è - –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å, –ø–æ–ª–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π. –ü–æ–∑–≤–æ–ª—å—Ç–µ —É—Ç—Ä–µ–Ω–Ω–µ–º—É —Å–≤–µ—Ç—É –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–µ —Å–µ—Ä–¥—Ü–µ —Ä–∞–¥–æ—Å—Ç—å—é –∏ —ç–Ω–µ—Ä–≥–∏–µ–π.

üôè **–£—Ç—Ä–µ–Ω–Ω—è—è –º–∞–Ω—Ç—Ä–∞:**
"–Ø –æ—Ç–∫—Ä—ã—Ç(–∞) –¥–ª—è –≤—Å–µ—Ö –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π —ç—Ç–æ–≥–æ –¥–Ω—è"

üå∏ **–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–Ω—è:**
‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞
‚Ä¢ –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ

üí´ **–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑:**
–°–µ–≥–æ–¥–Ω—è —ç–Ω–µ—Ä–≥–∏–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—Ç —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É –∏ –¥—É—Ö–æ–≤–Ω–æ–º—É —Ä–æ—Å—Ç—É.

–ü—É—Å—Ç—å –≤–∞—à –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å–≤–µ—Ç–æ–º –∏ –ª—é–±–æ–≤—å—é! üåü
"""
                from config import REACTION_EMOJIS
                import uuid
                post_id = str(uuid.uuid4())[:8]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(emoji, callback_data=f"reaction_{idx}_{post_id}") 
                     for idx, emoji in enumerate(REACTION_EMOJIS)],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{post_id}")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ", callback_data='category_esoteric')]
                ])
                
                await query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
            elif selection == "lunar_forecast":
                text = """
üåú **–õ–£–ù–ù–´–ô –ü–†–û–ì–ù–û–ó**

üåô **–§–∞–∑–∞ –õ—É–Ω—ã:** –†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ –≤ –†–∞–∫–µ

**üåä –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**

–≠–Ω–µ—Ä–≥–∏–∏ —Ä–∞—Å—Ç—É—â–µ–π –õ—É–Ω—ã –≤ –†–∞–∫–µ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—Ç:
‚Ä¢ üíù –£–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Å–µ–º–µ–π–Ω—ã—Ö —Å–≤—è–∑–µ–π
‚Ä¢ üè† –°–æ–∑–¥–∞–Ω–∏—é —É—é—Ç–∞ –≤ –¥–æ–º–µ
‚Ä¢ üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º
‚Ä¢ üå± –ù–∞—á–∞–ª—É –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

**‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Å–ø–æ—Ä–æ–≤
‚Ä¢ –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å –±–ª–∏–∑–∫–∏–º–∏
‚Ä¢ –ü—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏
‚Ä¢ –ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

**üîÆ –ú–∞–≥–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è:** 20:00 - 22:00

**üíé –ö–∞–º–µ–Ω—å –¥–Ω—è:** –õ—É–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å
**üåø –†–∞—Å—Ç–µ–Ω–∏–µ –¥–Ω—è:** –ñ–∞—Å–º–∏–Ω

–ü—É—Å—Ç—å –ª—É–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º –≥–∞—Ä–º–æ–Ω–∏—é! üåô‚ú®
"""
                from config import REACTION_EMOJIS
                import uuid
                post_id = str(uuid.uuid4())[:8]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(emoji, callback_data=f"reaction_{idx}_{post_id}") 
                     for idx, emoji in enumerate(REACTION_EMOJIS)],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{post_id}")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ", callback_data='category_esoteric')]
                ])
                
                await query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
            elif selection == "interactive":
                text = """
üéØ **–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê**

üîÆ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∞–∫—Ç–∏–∫—É:**

üé≤ **–ì–∞–¥–∞–Ω–∏–µ "–î–∞/–ù–µ—Ç"** - –ø–æ–ª—É—á–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
üÉè **–¢—Ä–µ—Ö–∫–∞—Ä—Ç–æ—á–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥** - –ø—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ
üßø **–û—á–∏—Å—Ç–∫–∞ –∞—É—Ä—ã** - —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
üåü **–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–Ω—è** - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
üî¢ **–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è –∏–º–µ–Ω–∏** - —Ä–∞—Å–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã –∏–º–µ–Ω–∏
üåô **–õ—É–Ω–Ω–∞—è –º–∞–≥–∏—è** - —Ä–∞–±–æ—Ç–∞ —Å –ª—É–Ω–Ω—ã–º–∏ —ç–Ω–µ—Ä–≥–∏—è–º–∏
"""
                
                keyboard = [
                    [
                        InlineKeyboardButton("üé≤ –î–∞/–ù–µ—Ç", callback_data="interactive_yesno"),
                        InlineKeyboardButton("üÉè –†–∞—Å–∫–ª–∞–¥", callback_data="interactive_cards")
                    ],
                    [
                        InlineKeyboardButton("üßø –û—á–∏—Å—Ç–∫–∞", callback_data="interactive_cleanse"),
                        InlineKeyboardButton("üåü –ú–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data="interactive_meditation")
                    ],
                    [
                        InlineKeyboardButton("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è", callback_data="interactive_numerology"),
                        InlineKeyboardButton("üåô –õ—É–Ω–∞", callback_data="interactive_lunar")
                    ],
                    [
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ", callback_data='category_esoteric')
                    ]
                ]
                
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                
            elif selection == "evening_message":
                text = """
üåü **–í–ï–ß–ï–†–ù–ï–ï –ü–û–°–õ–ê–ù–ò–ï**

üåô **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é:**

–î–æ—Ä–æ–≥–∏–µ –¥—É—à–∏, –¥–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É, –∏ –≤—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏. ‚ú®

üôè **–ú–æ–º–µ–Ω—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:**
–ó–∞ —á—Ç–æ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è? –ö–∞–∂–¥—ã–π –ø—Ä–æ–∂–∏—Ç—ã–π –º–æ–º–µ–Ω—Ç - —ç—Ç–æ –¥–∞—Ä, –∫–∞–∂–¥–∞—è –≤—Å—Ç—Ä–µ—á–∞ - —ç—Ç–æ —É—Ä–æ–∫, –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞.

üå∏ **–í–µ—á–µ—Ä–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:**
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è
‚Ä¢ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
‚Ä¢ –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –í—Å–µ–ª–µ–Ω–Ω—É—é –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ –ó–∞–≥–∞–¥–∞–π—Ç–µ –º–µ—á—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞

üí´ **–ù–∞–ø—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ –Ω–æ—á—å:**
–ü—É—Å—Ç—å –≤–∞—à —Å–æ–Ω –±—É–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω—ã–º, –∞ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º–∏. –ó–∞–≤—Ç—Ä–∞ –≤–∞—Å –∂–¥–µ—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å, –ø–æ–ª–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

üåô _–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –∏ —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤!_ ‚ú®
"""
                from config import REACTION_EMOJIS
                import uuid
                post_id = str(uuid.uuid4())[:8]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(emoji, callback_data=f"reaction_{idx}_{post_id}") 
                     for idx, emoji in enumerate(REACTION_EMOJIS)],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{post_id}")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ", callback_data='category_esoteric')]
                ])
                
                await query.edit_message_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
            else:
                await query.answer("üîÆ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –¥–ª—è –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
        elif data.startswith("zodiac_"):
            from config import ZODIAC_REVERSE_MAPPING
            english_key = data.replace("zodiac_", "")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ ZODIAC_REVERSE_MAPPING
            reverse_mapping = {v: k for k, v in ZODIAC_REVERSE_MAPPING.items()}
            sign = reverse_mapping.get(english_key, english_key.title())
            
            horoscope_text = f"""
üîÆ **–ì–û–†–û–°–ö–û–ü –î–õ–Ø {sign.upper()}**

–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω—ã –∫ –≤–∞–º! ‚ú®

üí´ **–û–±—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –¥–Ω—è:** –í—ã—Å–æ–∫–∞—è
üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –î–µ–π—Å—Ç–≤—É–π—Ç–µ —Å–º–µ–ª–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ
üíù **–û—Ç–Ω–æ—à–µ–Ω–∏—è:** –í—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤  
üíº **–ö–∞—Ä—å–µ—Ä–∞:** –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π
üåü **–°–æ–≤–µ—Ç –¥–Ω—è:** –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏

–ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å –∏ —É—Å–ø–µ—Ö! üåà
"""
            
            from config import REACTION_EMOJIS
            import uuid
            post_id = str(uuid.uuid4())[:8]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(emoji, callback_data=f"reaction_{idx}_{post_id}") 
                 for idx, emoji in enumerate(REACTION_EMOJIS)],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{post_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∑–Ω–∞–∫–∞", callback_data='esoteric_horoscope')]
            ])
            
            await query.edit_message_text(
                horoscope_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        
        # ChatGPT callback'—ã
        elif data.startswith("gpt_") or data == "back_to_main":
            await handle_chatgpt_callback(update, context)
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å—Ç–∞—Ä—ã–µ)
        elif data.startswith("category_"):
            await query.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        else:
            await query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º show_main_menu")
        query = getattr(update, 'callback_query', None)
        message = getattr(update, 'message', None)
        logger.info(f"üìã query: {query is not None}, message: {message is not None}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = query.from_user if query else update.effective_user
        user_name = user.first_name if user and user.first_name else "–¥—Ä—É–≥"
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
            
        text = f"""üåü –ü—Ä–∏–≤–µ—Ç, {user_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! ‚ú®

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**

üí´ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è** - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏–¥–µ–∏
üîÆ **–≠–∑–æ—Ç–µ—Ä–∏–∫–∞** - –≥–æ—Ä–æ—Å–∫–æ–ø—ã –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è
üéØ **–†–∞–∑–≤–∏—Ç–∏–µ** - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç
üåü **–ó–¥–æ—Ä–æ–≤—å–µ** - –∑–∞–±–æ—Ç–∞ –æ —Ç–µ–ª–µ –∏ —Ä–∞–∑—É–º–µ
üíù **–û—Ç–Ω–æ—à–µ–Ω–∏—è** - –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏

üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
        
        logger.info("‚å®Ô∏è –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...")
        keyboard = create_main_menu_keyboard()
        logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query:
            logger.info("üìù –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback...")
            await query.answer()
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        elif message:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            await message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–∏ query, –Ω–∏ message!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        raise

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è ChatGPT)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ChatGPT
        if await process_gpt_message(update, context):
            return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ChatGPT, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

# ================== SETUP –ò –ó–ê–ü–£–°–ö ==================

async def setup_bot_commands(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram"""
    try:
        logger.info("‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...")
        
        from telegram import BotCommand
        commands = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"),
            BotCommand("instructions", "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
            BotCommand("test", "–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"),
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞"),
            BotCommand("uptime", "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"),
            BotCommand("version", "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞"),
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            BotCommand("about", "–û –±–æ—Ç–µ"),
            BotCommand("profile", "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
            BotCommand("feedback", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
            BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            BotCommand("random", "–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç"),
            BotCommand("popular", "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã"),
            BotCommand("recent", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã"),
            BotCommand("categories", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
            BotCommand("search", "–ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"),
            
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±—É–¥—É—Ç –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –≤ –º–µ–Ω—é)
            BotCommand("status", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            BotCommand("logs", "–õ–æ–≥–∏"),
            BotCommand("health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"),
            BotCommand("restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
            BotCommand("broadcast", "–†–∞—Å—Å—ã–ª–∫–∞"),
            BotCommand("cleanup", "–û—á–∏—Å—Ç–∫–∞")
        ]
        
        await application.bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        set_commands = await application.bot.get_my_commands()
        for cmd in set_commands:
            logger.info(f"üìã –ö–æ–º–∞–Ω–¥–∞: /{cmd.command} - {cmd.description}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global start_time, application
    import time
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    start_time = time.time()
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        if not BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –°–ù–ê–ß–ê–õ–ê
        logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram Application...")
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .connect_timeout(CONNECT_TIMEOUT)
            .read_timeout(READ_TIMEOUT) 
            .write_timeout(WRITE_TIMEOUT)
            .pool_timeout(POOL_TIMEOUT)
            .build()
        )
        logger.info("‚úÖ Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.info("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("instructions", instructions_command))
        application.add_handler(CommandHandler("test", test_command))
        application.add_handler(CommandHandler("chatgpt", chatgpt_command))
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("ping", ping_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("uptime", uptime_command))
        application.add_handler(CommandHandler("version", version_command))
        application.add_handler(CommandHandler("health", health_command))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("users", users_command))
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("about", about_command))
        application.add_handler(CommandHandler("profile", profile_command))
        application.add_handler(CommandHandler("feedback", feedback_command))
        application.add_handler(CommandHandler("settings", settings_command))
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("random", random_command))
        application.add_handler(CommandHandler("popular", popular_command))
        application.add_handler(CommandHandler("recent", recent_command))
        application.add_handler(CommandHandler("categories", categories_command))
        application.add_handler(CommandHandler("search", search_command))
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("logs", logs_command))
        application.add_handler(CommandHandler("restart", restart_command))
        application.add_handler(CommandHandler("broadcast", broadcast_command))
        application.add_handler(CommandHandler("cleanup", cleanup_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∏ –æ—à–∏–±–æ–∫
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        application.add_error_handler(error_handler)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –æ–∫—Ä—É–∂–µ–Ω–∏—è
        is_railway = (
            os.environ.get('RAILWAY_PROJECT_ID') is not None or
            os.environ.get('RAILWAY_SERVICE_ID') is not None or 
            os.environ.get('RAILWAY_DEPLOYMENT_ID') is not None or
            os.environ.get('PORT') is not None
        )
        
        if is_railway:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ Railway —Ä–µ–∂–∏–º–µ —Å webhook")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            railway_domain = (
                os.environ.get('RAILWAY_PUBLIC_DOMAIN') or 
                os.environ.get('RAILWAY_STATIC_URL') or
                "telegram-bot-project-1-production.up.railway.app"  # fallback –¥–æ–º–µ–Ω
            )
            
            webhook_url = f"https://{railway_domain}/webhook/{BOT_TOKEN}"
            webhook_path = f"/webhook/{BOT_TOKEN}"
            port = int(os.environ.get("PORT", 8080))
            
            logger.info(f"üåê Webhook URL: {webhook_url}")
            logger.info(f"ÔøΩÔ∏è Webhook path: {webhook_path}")
            logger.info(f"ÔøΩüîå Listening on port: {port}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ API
            async def setup_webhook():
                if application and application.bot:
                    await application.bot.set_webhook(webhook_url)
                    await setup_bot_commands(application)
                    logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                else:
                    logger.error("‚ùå Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º setup –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_setup():
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(setup_webhook())
                loop.close()
            
            setup_thread = threading.Thread(target=run_setup)
            setup_thread.start()
            setup_thread.join()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è setup
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask server
            logger.info(f"üè• –ó–∞–ø—É—Å–∫ Flask server –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)
        else:
            logger.info("üè† –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            run_local_polling()
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

def run_local_polling():
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    global application
    
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .connect_timeout(CONNECT_TIMEOUT)
        .read_timeout(READ_TIMEOUT) 
        .write_timeout(WRITE_TIMEOUT)
        .pool_timeout(POOL_TIMEOUT)
        .build()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("instructions", instructions_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("chatgpt", chatgpt_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_error_handler(error_handler)
    
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    async def post_init(application: Application) -> None:
        await setup_bot_commands(application)
    
    application.post_init = post_init
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
