# main_bot_railway.py - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–∞–∑–æ–≤—ã–º –º–µ–Ω—é
import logging
import os
from typing import Optional
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import (
    BOT_TOKEN, validate_config,
    CONNECT_TIMEOUT, READ_TIMEOUT, WRITE_TIMEOUT, POOL_TIMEOUT
)
from utils.keyboards import create_main_menu_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
application: Optional[Application] = None
start_time: Optional[float] = None

# ================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        user_name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
        logger.info(f"üåü –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info("üìã –í—ã–∑—ã–≤–∞–µ–º show_main_menu...")
        await show_main_menu(update, context)
        logger.info("‚úÖ show_main_menu –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ webhook —Ä–µ–∂–∏–º–µ, 
        # —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å event loop

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help - –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        logger.info(f"üìö –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update –¥–ª—è /help")
            return

        help_text = """ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É  
/instructions - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
1. –ù–∞–∂–º–∏—Ç–µ /start
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º!

üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin"""

        await update.message.reply_text(help_text)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")

async def instructions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /instructions - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        logger.info(f"üìñ –ö–æ–º–∞–Ω–¥–∞ /instructions –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update –¥–ª—è /instructions")
            return

        instructions_text = """üìö –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
2. –í—ã —É–≤–∏–¥–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 5 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ü–∏—Ç–∞—Ç—ã
üîÆ –≠–∑–æ—Ç–µ—Ä–∏–∫–∞ - –≥–æ—Ä–æ—Å–∫–æ–ø—ã, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å  
üéØ –†–∞–∑–≤–∏—Ç–∏–µ - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç –∏ –æ–±—É—á–µ–Ω–∏–µ
üåü –ó–¥–æ—Ä–æ–≤—å–µ - —Å–æ–≤–µ—Ç—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å–µ
üíù –û—Ç–Ω–æ—à–µ–Ω–∏—è - –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏ –∏ –ª—é–±–≤–∏

‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- /help - –±—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞
- /instructions - —ç—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin

‚ú® –ñ–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"""

        await update.message.reply_text(instructions_text)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /instructions –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /instructions: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        user_name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
        logger.info(f"üß™ –ö–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update –¥–ª—è /test")
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
        import time
        current_time = time.strftime("%Y-%m-%d %H:%M:%S UTC", time.gmtime())
        
        test_text = f"""üß™ **–¢–µ—Å—Ç –±–æ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: {user_id})
üïê **–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:** {current_time}
üåê **–†–µ–∂–∏–º:** Railway webhook
üîó **–°—Ç–∞—Ç—É—Å:** ‚úÖ –û–Ω–ª–∞–π–Ω

**üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –ë—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞  
‚Ä¢ `/instructions` - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ `/test` - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã

**üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ Webhook: –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã: –†–∞–±–æ—Ç–∞—é—Ç
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ

‚úÖ **–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!**"""

        await update.message.reply_text(test_text, parse_mode='Markdown')
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /test –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            if update.message:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞")
        except Exception:
            pass

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    data = query.data
    
    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await show_main_menu(update, context)
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        elif data.startswith("category_"):
            await query.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        else:
            await query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º show_main_menu")
        query = getattr(update, 'callback_query', None)
        message = getattr(update, 'message', None)
        logger.info(f"üìã query: {query is not None}, message: {message is not None}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = query.from_user if query else update.effective_user
        user_name = user.first_name if user and user.first_name else "–¥—Ä—É–≥"
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
            
        text = f"""üåü –ü—Ä–∏–≤–µ—Ç, {user_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! ‚ú®

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**

üí´ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è** - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏–¥–µ–∏
üîÆ **–≠–∑–æ—Ç–µ—Ä–∏–∫–∞** - –≥–æ—Ä–æ—Å–∫–æ–ø—ã –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è
üéØ **–†–∞–∑–≤–∏—Ç–∏–µ** - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç
üåü **–ó–¥–æ—Ä–æ–≤—å–µ** - –∑–∞–±–æ—Ç–∞ –æ —Ç–µ–ª–µ –∏ —Ä–∞–∑—É–º–µ
üíù **–û—Ç–Ω–æ—à–µ–Ω–∏—è** - –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏

üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
        
        logger.info("‚å®Ô∏è –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...")
        keyboard = create_main_menu_keyboard()
        logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query:
            logger.info("üìù –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback...")
            await query.answer()
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        elif message:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            await message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–∏ query, –Ω–∏ message!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        raise

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

# ================== SETUP –ò –ó–ê–ü–£–°–ö ==================

async def setup_bot_commands(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram"""
    try:
        logger.info("‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...")
        
        from telegram import BotCommand
        commands = [
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"),
            BotCommand("instructions", "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
            BotCommand("test", "–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        ]
        
        await application.bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        set_commands = await application.bot.get_my_commands()
        for cmd in set_commands:
            logger.info(f"üìã –ö–æ–º–∞–Ω–¥–∞: /{cmd.command} - {cmd.description}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global start_time, application
    import time
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    start_time = time.time()
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        if not BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .connect_timeout(CONNECT_TIMEOUT)
            .read_timeout(READ_TIMEOUT) 
            .write_timeout(WRITE_TIMEOUT)
            .pool_timeout(POOL_TIMEOUT)
            .build()
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("instructions", instructions_command))
        application.add_handler(CommandHandler("test", test_command))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        application.add_error_handler(error_handler)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –æ–∫—Ä—É–∂–µ–Ω–∏—è
        is_railway = (
            os.environ.get('RAILWAY_PROJECT_ID') is not None or
            os.environ.get('RAILWAY_SERVICE_ID') is not None or 
            os.environ.get('RAILWAY_DEPLOYMENT_ID') is not None or
            os.environ.get('PORT') is not None
        )
        
        if is_railway:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ Railway —Ä–µ–∂–∏–º–µ —Å webhook")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            railway_domain = (
                os.environ.get('RAILWAY_PUBLIC_DOMAIN') or 
                os.environ.get('RAILWAY_STATIC_URL') or
                "telegram-bot-project-1-production.up.railway.app"  # fallback –¥–æ–º–µ–Ω
            )
            
            webhook_url = f"https://{railway_domain}/webhook/{BOT_TOKEN}"
            webhook_path = f"/webhook/{BOT_TOKEN}"
            port = int(os.environ.get("PORT", 8443))
            
            logger.info(f"üåê Webhook URL: {webhook_url}")
            logger.info(f"ÔøΩÔ∏è Webhook path: {webhook_path}")
            logger.info(f"ÔøΩüîå Listening on port: {port}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º webhook
            async def post_init(application: Application) -> None:
                await setup_bot_commands(application)
            
            application.post_init = post_init
            
            # –ó–∞–ø—É—Å–∫ webhook —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=webhook_path,
                webhook_url=webhook_url,
                drop_pending_updates=True,
            )
        else:
            logger.info("üè† –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            run_local_polling()
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

def run_local_polling():
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    global application
    
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .connect_timeout(CONNECT_TIMEOUT)
        .read_timeout(READ_TIMEOUT) 
        .write_timeout(WRITE_TIMEOUT)
        .pool_timeout(POOL_TIMEOUT)
        .build()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("instructions", instructions_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_error_handler(error_handler)
    
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    async def post_init(application: Application) -> None:
        await setup_bot_commands(application)
    
    application.post_init = post_init
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
