# main_bot_railway.py - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–∞–∑–æ–≤—ã–º –º–µ–Ω—é
import logging
import asyncio
import os
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from flask import Flask, request, jsonify
import threading

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import (
    BOT_TOKEN, ADMIN_ID, validate_config,
    CONNECT_TIMEOUT, READ_TIMEOUT, WRITE_TIMEOUT, POOL_TIMEOUT
)
from utils.keyboards import create_main_menu_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Flask app –¥–ª—è healthcheck
app = Flask(__name__)

@app.route('/health')
def health_check():
    """Healthcheck endpoint –¥–ª—è Railway"""
    import time
    global application, start_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    bot_status = "unknown"
    if application:
        try:
            bot_status = "running" if application.running else "stopped"
        except:
            bot_status = "error"
    
    # –°—á–∏—Ç–∞–µ–º uptime
    uptime = 0
    if start_time:
        uptime = time.time() - start_time
    
    return jsonify({
        "status": "healthy",
        "bot": bot_status,
        "timestamp": str(time.time()),
        "uptime_seconds": round(uptime, 2)
    }), 200

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "message": "Telegram Bot is running on Railway",
        "status": "active"
    }), 200

@app.route('/logs')
def get_logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–∞"""
    try:
        import os
        log_file = 'bot.log'
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                last_lines = lines[-50:] if len(lines) > 50 else lines
                return jsonify({
                    "logs": last_lines,
                    "total_lines": len(lines),
                    "showing_last": len(last_lines)
                }), 200
        else:
            return jsonify({
                "error": "Log file not found",
                "logs": []
            }), 404
    except Exception as e:
        return jsonify({
            "error": f"Error reading logs: {str(e)}",
            "logs": []
        }), 500

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
application = None
start_time = None

def setup_webhook_route():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook route –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    @app.route(f'/webhook/{BOT_TOKEN}', methods=['POST'])
    def webhook():
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            json_data = request.get_json()
            if not json_data:
                logger.warning("‚ö†Ô∏è Webhook –ø–æ–ª—É—á–∏–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return "No data", 400
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö  
            if application and application.bot:
                update = Update.de_json(json_data, application.bot)
                if update:
                    # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    import threading
                    import asyncio
                    
                    def run_async_update():
                        try:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è loop –≤—Ä—É—á–Ω—É—é
                            if application:
                                logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É update")
                                asyncio.run(application.process_update(update))
                                logger.info(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–ª update")
                            else:
                                logger.error("‚ùå Application –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                            
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ async –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                            import traceback
                            logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    thread = threading.Thread(target=run_async_update, daemon=True)
                    thread.start()
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Update –æ–±—ä–µ–∫—Ç")
            else:
                logger.error("‚ùå Application –∏–ª–∏ bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            return "OK", 200
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return "Error", 500

# ================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        user_name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
        logger.info(f"üåü –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info("üìã –í—ã–∑—ã–≤–∞–µ–º show_main_menu...")
        await show_main_menu(update, context)
        logger.info("‚úÖ show_main_menu –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ webhook —Ä–µ–∂–∏–º–µ, 
        # —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å event loop

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    data = query.data
    
    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await show_main_menu(update, context)
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        elif data.startswith("category_"):
            await query.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        else:
            await query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º show_main_menu")
        query = getattr(update, 'callback_query', None)
        message = getattr(update, 'message', None)
        logger.info(f"üìã query: {query is not None}, message: {message is not None}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = query.from_user if query else update.effective_user
        user_name = user.first_name if user and user.first_name else "–¥—Ä—É–≥"
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
            
        text = f"""üåü –ü—Ä–∏–≤–µ—Ç, {user_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! ‚ú®

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**

üí´ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è** - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏–¥–µ–∏
üîÆ **–≠–∑–æ—Ç–µ—Ä–∏–∫–∞** - –≥–æ—Ä–æ—Å–∫–æ–ø—ã –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è
üéØ **–†–∞–∑–≤–∏—Ç–∏–µ** - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç
üåü **–ó–¥–æ—Ä–æ–≤—å–µ** - –∑–∞–±–æ—Ç–∞ –æ —Ç–µ–ª–µ –∏ —Ä–∞–∑—É–º–µ
üíù **–û—Ç–Ω–æ—à–µ–Ω–∏—è** - –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏

üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
        
        logger.info("‚å®Ô∏è –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...")
        keyboard = create_main_menu_keyboard()
        logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query:
            logger.info("üìù –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback...")
            await query.answer()
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        elif message:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            await message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–∏ query, –Ω–∏ message!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        import traceback
        logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        raise

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

# ================== SETUP –ò –ó–ê–ü–£–°–ö ==================

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=False)

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Railway"""
    global application
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –¥–ª—è Railway
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .connect_timeout(CONNECT_TIMEOUT)
        .read_timeout(READ_TIMEOUT)
        .write_timeout(WRITE_TIMEOUT)
        .pool_timeout(POOL_TIMEOUT)
        .build()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ Railway URL –¥–ª—è webhook
    webhook_url = None
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
    manual_webhook = os.environ.get('WEBHOOK_URL')
    if manual_webhook:
        if not manual_webhook.startswith('https://'):
            manual_webhook = f"https://{manual_webhook}"
        webhook_url = f"{manual_webhook}/webhook/{BOT_TOKEN}"
        
    # –í–∞—Ä–∏–∞–Ω—Ç 2: RAILWAY_PUBLIC_DOMAIN (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç Railway)
    elif os.environ.get('RAILWAY_PUBLIC_DOMAIN'):
        railway_domain = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
        webhook_url = f"https://{railway_domain}/webhook/{BOT_TOKEN}"
        
    # –í–∞—Ä–∏–∞–Ω—Ç 3: Fallback –¥–æ–º–µ–Ω
    if not webhook_url:
        fallback_domain = "telegram-bot-project-1-production.up.railway.app"
        webhook_url = f"https://{fallback_domain}/webhook/{BOT_TOKEN}"
        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–æ–º–µ–Ω: {fallback_domain}")
    
    # Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    is_railway_env = (
        os.environ.get('RAILWAY_PROJECT_ID') is not None or
        os.environ.get('PORT') is not None
    )
    
    if webhook_url:
        await application.bot.set_webhook(webhook_url)
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    elif is_railway_env:
        await application.bot.delete_webhook()
        logger.info("‚ö†Ô∏è Webhook –æ—á–∏—â–µ–Ω - –¥–æ–±–∞–≤—å—Ç–µ WEBHOOK_URL –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é!")
    else:
        logger.info("üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - polling")
        return False
        
    # –î–ª—è webhook —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.start()
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ webhook —Ä–µ–∂–∏–º–µ")
    return True

async def run_webhook_mode():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook –¥–ª—è Railway"""
    await setup_webhook()
    # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è webhook
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        if application:
            await application.stop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global start_time
    import time
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    start_time = time.time()
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook route –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        setup_webhook_route()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –æ–∫—Ä—É–∂–µ–Ω–∏—è
        is_railway = (
            os.environ.get('RAILWAY_PROJECT_ID') is not None or
            os.environ.get('RAILWAY_SERVICE_ID') is not None or 
            os.environ.get('RAILWAY_DEPLOYMENT_ID') is not None or
            os.environ.get('PORT') is not None
        )
        
        if is_railway:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ Railway —Ä–µ–∂–∏–º–µ")
            
            # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            flask_thread = threading.Thread(target=run_flask, daemon=True)
            flask_thread.start()
            logger.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            asyncio.run(run_webhook_mode())
        else:
            logger.info("üè† –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            run_local_polling()
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

def run_local_polling():
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    global application
    
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .connect_timeout(CONNECT_TIMEOUT)
        .read_timeout(READ_TIMEOUT) 
        .write_timeout(WRITE_TIMEOUT)
        .pool_timeout(POOL_TIMEOUT)
        .build()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_error_handler(error_handler)
    
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
