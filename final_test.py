# final_test.py - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
import asyncio
import sys
import pytest
from telegram import Bot


def test_bot_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞."""
    from config import BOT_TOKEN, validate_config

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    if not BOT_TOKEN:
        pytest.skip("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    validate_config()

    async def _run_checks():
        bot = Bot(token=BOT_TOKEN)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        assert bot_info.username, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        commands = await bot.get_my_commands()
        assert isinstance(commands, list)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        webhook_info = await bot.get_webhook_info()
        assert webhook_info is not None

    asyncio.run(_run_checks())

def run_module_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏"""
    modules = [
        ("config", "from config import BOT_TOKEN, ADMIN_ID, validate_config"),
        ("utils.keyboards", "from utils.keyboards import create_main_menu_keyboard"),
        ("utils.database", "from utils.database import reactions_db"),
        ("handlers.admin", "from handlers.admin import admin_command"),
        ("handlers.reactions", "from handlers.reactions import handle_reaction"),
        ("main_bot_railway", "import main_bot_railway"),
    ]
    
    success = 0
    total = len(modules)
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ú–û–î–£–õ–ï–ô")
    print("=" * 50)
    
    for name, import_cmd in modules:
        try:
            exec(import_cmd)
            print(f"‚úÖ {name}: OK")
            success += 1
        except Exception as e:
            print(f"‚ùå {name}: FAILED - {e}")
    
    print(f"\nüìä –ú–æ–¥—É–ª–∏: {success}/{total}")
    return success == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 60)

    # –¢–µ—Å—Ç –º–æ–¥—É–ª–µ–π
    modules_ok = run_module_imports()

    # –¢–µ—Å—Ç –±–æ—Ç–∞
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê")
    print("=" * 30)
    try:
        test_bot_functionality()
        bot_ok = True
    except pytest.skip.Exception:
        bot_ok = True
    except Exception as exc:
        print(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        bot_ok = False

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    if modules_ok and bot_ok:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üîß –í—Å–µ –æ—Ç—Å—Ç—É–ø—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print("üì¶ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        print("ü§ñ –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return 0
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        if not modules_ok:
            print("üì¶ –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª—è–º–∏")
        if not bot_ok:
            print("ü§ñ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main())
