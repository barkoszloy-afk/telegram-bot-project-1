# final_test.py - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
import asyncio
import sys
import pytest
from telegram import Bot

async def test_bot_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞"""
    try:
        from config import BOT_TOKEN, validate_config

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        try:
            validate_config()
        except ValueError as e:
            pytest.skip(str(e))
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...")
        bot = Bot(token=BOT_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        print("üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ...")
        bot_info = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç: @{bot_info.username} ({bot_info.first_name})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        print("üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
        commands = await bot.get_my_commands()
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é: {len(commands)}")
        for cmd in commands:
            print(f"   /{cmd.command} - {cmd.description}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook...")
        webhook_info = await bot.get_webhook_info()
        print(f"‚úÖ Webhook URL: {webhook_info.url or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"‚úÖ Pending updates: {webhook_info.pending_update_count}")
    except Exception as e:
        import traceback
        traceback.print_exc()
        pytest.fail(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")

def test_all_modules():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏"""
    modules = [
        ("config", "from config import BOT_TOKEN, ADMIN_ID, validate_config"),
        ("utils.keyboards", "from utils.keyboards import create_main_menu_keyboard"),
        ("utils.database", "from utils.database import reactions_db"),
        ("handlers.admin", "from handlers.admin import admin_command"),
        ("handlers.reactions", "from handlers.reactions import handle_reaction"),
        ("main_bot_railway", "import main_bot_railway"),
    ]
    
    success = 0
    total = len(modules)
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ú–û–î–£–õ–ï–ô")
    print("=" * 50)
    
    for name, import_cmd in modules:
        try:
            exec(import_cmd)
            print(f"‚úÖ {name}: OK")
            success += 1
        except Exception as e:
            print(f"‚ùå {name}: FAILED - {e}")
    
    print(f"\nüìä –ú–æ–¥—É–ª–∏: {success}/{total}")
    assert success == total, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è"

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –º–æ–¥—É–ª–µ–π
    modules_ok = test_all_modules()
    
    # –¢–µ—Å—Ç –±–æ—Ç–∞
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê")
    print("=" * 30)
    bot_ok = await test_bot_functionality()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    if modules_ok and bot_ok:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üîß –í—Å–µ –æ—Ç—Å—Ç—É–ø—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print("üì¶ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")  
        print("ü§ñ –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return 0
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        if not modules_ok:
            print("üì¶ –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª—è–º–∏")
        if not bot_ok:
            print("ü§ñ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
