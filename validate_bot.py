#!/usr/bin/env python3
# validate_bot.py - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

import sys
import subprocess
import json
from datetime import datetime

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("üîç –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        result = subprocess.run([sys.executable, 'comprehensive_test.py'], 
                              capture_output=True, text=True, timeout=120)
        return result.returncode == 0, result.stdout
    except Exception as e:
        return False, str(e)

def check_bot_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_structure = {
        'files': [
            'main_bot_railway.py',
            'config.py',
            'requirements.txt',
            'Dockerfile',
            'Procfile',
            '.env.example',
            'README.md'
        ],
        'directories': [
            'handlers',
            'utils',
            'tests',
            '.github/workflows'
        ]
    }
    
    missing = []
    import os
    
    for file in required_structure['files']:
        if not os.path.exists(file):
            missing.append(f"–§–∞–π–ª: {file}")
    
    for directory in required_structure['directories']:
        if not os.path.exists(directory):
            missing.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
        return False
    else:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

def validate_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config import validate_config, BOT_TOKEN, ADMIN_ID
        validate_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        if BOT_TOKEN and 'TEST' in BOT_TOKEN:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
            return False
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_core_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
        from handlers.admin import admin_command
        from handlers.reactions import handle_reaction
        from utils.keyboards import create_main_menu_keyboard
        from utils.database import Database
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = create_main_menu_keyboard()
        assert hasattr(keyboard, 'inline_keyboard')
        
        # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        assert hasattr(db, 'add_reaction')
        
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def check_deployment_readiness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é...")
    
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    import os
    if os.path.exists('railway.json'):
        checks.append("‚úÖ Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    else:
        checks.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç railway.json")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if os.path.exists('Dockerfile'):
        checks.append("‚úÖ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    else:
        checks.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Dockerfile")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Procfile
    if os.path.exists('Procfile'):
        checks.append("‚úÖ Procfile –¥–ª—è –¥–µ–ø–ª–æ—è")
    else:
        checks.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Procfile")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CI/CD
    if os.path.exists('.github/workflows/ci.yml'):
        checks.append("‚úÖ CI/CD pipeline")
    else:
        checks.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CI/CD")
    
    for check in checks:
        print(f"   {check}")
    
    failed_checks = [c for c in checks if c.startswith("‚ùå")]
    return len(failed_checks) == 0

def generate_validation_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("\n" + "="*60)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("="*60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = {}
    
    # Comprehensive test
    comp_success, comp_details = run_comprehensive_test()
    results['comprehensive_test'] = (comp_success, comp_details if not comp_success else "")
    
    # Structure check
    struct_success = check_bot_structure()
    results['structure_check'] = (struct_success, "")
    
    # Configuration
    config_success = validate_configuration()
    results['configuration'] = (config_success, "")
    
    # Functionality
    func_success = test_core_functionality()
    results['functionality'] = (func_success, "")
    
    # Deployment
    deploy_success = check_deployment_readiness()
    results['deployment'] = (deploy_success, "")
    
    passed = 0
    total = len(results)
    
    for test_name, (success, details) in results.items():
        if success:
            passed += 1
            print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            if details:
                print(f"   ‚îî‚îÄ {details}")
    
    success_rate = passed / total
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total}")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if success_rate >= 0.9:
        status = "üü¢ –ì–û–¢–û–í –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ"
        recommendation = "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω"
    elif success_rate >= 0.7:
        status = "üü° –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í"
        recommendation = "–¢—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–æ—Ä–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    else:
        status = "üî¥ –ù–ï –ì–û–¢–û–í"
        recommendation = "–¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    
    print(f"\nüéØ –°—Ç–∞—Ç—É—Å: {status}")
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'validation_results': results,
        'summary': {
            'total_checks': total,
            'passed_checks': passed,
            'success_rate': success_rate,
            'status': status,
            'recommendation': recommendation
        }
    }
    
    with open('validation_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: validation_report.json")
    
    return success_rate >= 0.8

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê")
    print("="*60)
    
    try:
        success = generate_validation_report()
        
        if success:
            print("\nüéâ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(2)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        sys.exit(3)

if __name__ == "__main__":
    main()