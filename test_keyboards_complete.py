# test_keyboards_complete.py - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
import unittest
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from utils.keyboards import (
    create_main_menu_keyboard,
    create_submenu_keyboard,
    get_reaction_keyboard,
    create_zodiac_keyboard,
    create_back_to_menu_keyboard
)
from config import REACTION_EMOJIS, ZODIAC_SIGNS

class TestKeyboards(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    def test_create_main_menu_keyboard(self):
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = create_main_menu_keyboard()
        self.assertIsInstance(keyboard, InlineKeyboardMarkup)
        self.assertEqual(len(keyboard.inline_keyboard), 4)
        self.assertEqual(len(keyboard.inline_keyboard[0]), 2)
        self.assertEqual(len(keyboard.inline_keyboard[3]), 2)
        self.assertEqual(keyboard.inline_keyboard[3][0].callback_data, "category_about")
        self.assertEqual(keyboard.inline_keyboard[3][1].callback_data, "category_settings")
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: OK")

    def test_create_submenu_keyboard(self):
        """–¢–µ—Å—Ç –ø–æ–¥–º–µ–Ω—é"""
        keyboard = create_submenu_keyboard("motivation")
        self.assertIsInstance(keyboard, InlineKeyboardMarkup)
        self.assertEqual(len(keyboard.inline_keyboard), 2)
        self.assertEqual(keyboard.inline_keyboard[0][0].callback_data, "get_post_motivation")
        print("‚úÖ –ü–æ–¥–º–µ–Ω—é: OK")

    def test_get_reaction_keyboard(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∞–∫—Ü–∏–π"""
        post_id = "123"
        keyboard = get_reaction_keyboard(post_id)
        self.assertIsInstance(keyboard, InlineKeyboardMarkup)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å 2 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫
        self.assertEqual(len(keyboard.inline_keyboard), 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—è–¥ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
        reaction_row = keyboard.inline_keyboard[0]
        self.assertEqual(len(reaction_row), len(REACTION_EMOJIS))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ - —ç—Ç–æ InlineKeyboardButton
        for i, button in enumerate(reaction_row):
            self.assertIsInstance(button, InlineKeyboardButton)
            self.assertEqual(button.text, REACTION_EMOJIS[i])
            self.assertEqual(button.callback_data, f"reaction_{i}_{post_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_button = keyboard.inline_keyboard[1][0]
        self.assertEqual(stats_button.text, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.assertEqual(stats_button.callback_data, f"stats_{post_id}")
        
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π: OK")

    def test_create_zodiac_keyboard(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞"""
        keyboard = create_zodiac_keyboard()
        self.assertIsInstance(keyboard, InlineKeyboardMarkup)
        # 4 —Ä—è–¥–∞ –∑–Ω–∞–∫–æ–≤ + 1 —Ä—è–¥ "–Ω–∞–∑–∞–¥"
        self.assertEqual(len(keyboard.inline_keyboard), 5)
        self.assertEqual(len(keyboard.inline_keyboard[0]), 3)
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞: OK")

    def test_create_back_to_menu_keyboard(self):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ '–Ω–∞–∑–∞–¥'"""
        keyboard = create_back_to_menu_keyboard()
        self.assertIsInstance(keyboard, InlineKeyboardMarkup)
        self.assertEqual(len(keyboard.inline_keyboard), 1)
        self.assertEqual(keyboard.inline_keyboard[0][0].text, "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–Ω–∞–∑–∞–¥': OK")

if __name__ == '__main__':
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ö–õ–ê–í–ò–ê–¢–£–†")
    print("="*40)
    unittest.main(verbosity=0)
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ö–õ–ê–í–ò–ê–¢–£–† –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
