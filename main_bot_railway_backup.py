# main_bot_railway.py - –í–µ—Ä—Å–∏—è –¥–ª—è Railway —Å webhook (v1.1)
import logging
import asyncio
import os
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from flask import Flask, request, jsonify
import threading

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import (
    BOT_TOKEN, ADMIN_ID, validate_config,
    CONNECT_TIMEOUT, READ_TIMEOUT, WRITE_TIMEOUT, POOL_TIMEOUT
)
from utils.database import reactions_db
from utils.keyboards import create_main_menu_keyboard, remove_reply_keyboard
from handlers.reactions import handle_reaction_callback
from handlers.admin import (
    handle_admin_command, handle_admin_callback, 
    handle_morning_variant_callback
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Flask app –¥–ª—è healthcheck
app = Flask(__name__)

@app.route('/health')
def health_check():
    """Healthcheck endpoint –¥–ª—è Railway"""
    import time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    bot_status = "unknown"
    if application:
        try:
            bot_status = "running" if application.running else "stopped"
        except:
            bot_status = "error"
    
    # –°—á–∏—Ç–∞–µ–º uptime
    uptime = 0
    if start_time:
        uptime = time.time() - start_time
    
    return jsonify({
        "status": "healthy",
        "bot": bot_status,
        "timestamp": str(time.time()),
        "uptime_seconds": round(uptime, 2)
    }), 200

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "message": "Telegram Bot is running on Railway",
        "status": "active"
    }), 200

@app.route('/metrics')
def get_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    import time
    
    uptime = 0
    if start_time:
        uptime = time.time() - start_time
    
    return jsonify({
        "uptime_seconds": round(uptime, 2),
        "uptime_hours": round(uptime / 3600, 2),
        "metrics": metrics,
        "timestamp": str(time.time())
    }), 200

@app.route('/railway-vars')
def railway_vars():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        vars_info = {
            "RAILWAY_PROJECT_ID": os.environ.get('RAILWAY_PROJECT_ID', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
            "RAILWAY_SERVICE_ID": os.environ.get('RAILWAY_SERVICE_ID', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),  
            "RAILWAY_DEPLOYMENT_ID": os.environ.get('RAILWAY_DEPLOYMENT_ID', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
            "RAILWAY_PROJECT_NAME": os.environ.get('RAILWAY_PROJECT_NAME', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
            "RAILWAY_SERVICE_NAME": os.environ.get('RAILWAY_SERVICE_NAME', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
            "RAILWAY_PUBLIC_DOMAIN": os.environ.get('RAILWAY_PUBLIC_DOMAIN', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
            "RAILWAY_STATIC_URL": os.environ.get('RAILWAY_STATIC_URL', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
            "WEBHOOK_URL": os.environ.get('WEBHOOK_URL', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
            "PORT": os.environ.get('PORT', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
            "BOT_TOKEN": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω" if BOT_TOKEN else "–Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
        
        return jsonify({
            "railway_environment_variables": vars_info,
            "recommended_webhook": f"https://telegram-bot-project-1-production.up.railway.app/webhook/{BOT_TOKEN}"
        }), 200
        
    except Exception as e:
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {str(e)}"
        }), 500

@app.route('/test-send')
def test_send():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Railway"""
    import time
    try:
        import requests
    except ImportError:
        return jsonify({
            "status": "error",
            "message": "requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Railway"
        }), 500
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": 345470935,
            "text": f"üß™ –¢–µ—Å—Ç —Å Railway —Å–µ—Ä–≤–µ—Ä–∞\n\n–í—Ä–µ–º—è: {time.time()}\n–°—Ç–∞—Ç—É—Å: Railway –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!"
        }
        
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            return jsonify({
                "status": "success",
                "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å Railway",
                "telegram_response": response.json()
            }), 200
        else:
            return jsonify({
                "status": "error",
                "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Railway",
                "error": response.text
            }), 500
            
    except Exception as e:
        return jsonify({
            "status": "error", 
            "message": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}"
        }), 500

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
application = None
start_time = None
metrics = {
    "messages_processed": 0,
    "commands_executed": 0,
    "callbacks_handled": 0,
    "errors_count": 0
}

def setup_webhook_route():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook route –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    @app.route(f'/webhook/{BOT_TOKEN}', methods=['POST'])
    def webhook():
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            json_data = request.get_json()
            if not json_data:
                logger.warning("‚ö†Ô∏è Webhook –ø–æ–ª—É—á–∏–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return "No data", 400
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            metrics["messages_processed"] += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ update
            update_type = "unknown"
            if 'message' in json_data:
                update_type = "message"
                if 'text' in json_data['message']:
                    text = json_data['message']['text']
                    logger.info(f"üì• Webhook –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
                    if text.startswith('/'):
                        metrics["commands_executed"] += 1
            elif 'callback_query' in json_data:
                update_type = "callback_query"
                callback_data = json_data['callback_query'].get('data', '')
                logger.info(f"üì• Webhook –ø–æ–ª—É—á–∏–ª callback: {callback_data}")
                metrics["callbacks_handled"] += 1
                
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö  
            if application and application.bot:
                update = Update.de_json(json_data, application.bot)
                if update:
                    # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    import threading
                    import asyncio
                    
                    def run_async_update():
                        new_loop = None
                        try:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                            new_loop = asyncio.new_event_loop()
                            asyncio.set_event_loop(new_loop)
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
                            if application:
                                logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {update_type}")
                                new_loop.run_until_complete(application.process_update(update))
                                logger.info(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–ª {update_type}")
                            else:
                                logger.error("‚ùå Application –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                            
                        except Exception as e:
                            metrics["errors_count"] += 1
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ async –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                            import traceback
                            logger.error(f"Traceback: {traceback.format_exc()}")
                        finally:
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop
                            if new_loop and not new_loop.is_closed():
                                try:
                                    new_loop.close()
                                except:
                                    pass
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    thread = threading.Thread(target=run_async_update, daemon=True)
                    thread.start()
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Update –æ–±—ä–µ–∫—Ç")
            else:
                logger.error("‚ùå Application –∏–ª–∏ bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            return "OK", 200
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return "Error", 500

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        user_id = update.effective_user.id if update.effective_user else "unknown"
        user_name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
        logger.info(f"üåü –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await show_main_menu(update, context)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        if update.message:
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        chat_id = update.effective_chat.id if update.effective_chat else user_id
        logger.info(f"üìã –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —á–∞—Ç {chat_id}")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update –¥–ª—è /help")
            return
            
        help_text = """üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/test - –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

üì± –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è  
‚Ä¢ –°—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ ‚ù§Ô∏èüëçü•π
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤

üí´ –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è!"""
        
        try:
            # –ì–ª–∞–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = await update.message.reply_text(help_text)
            if result and hasattr(result, 'message_id'):
                logger.info(f"‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, message_id: {result.message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ result: {result}")
                
        except Exception as send_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ reply_text: {send_error}")
            
            # Fallback —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤
            try:
                import requests
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": help_text
                }
                
                response = requests.post(url, json=data, timeout=10)
                if response.status_code == 200:
                    result_data = response.json()
                    message_id = result_data.get('result', {}).get('message_id', 'unknown')
                    logger.info(f"‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API fallback, message_id: {message_id}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API fallback: {response.status_code} - {response.text}")
                    
            except Exception as api_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API fallback: {api_error}")
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await update.message.reply_text("üìã –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
                    logger.info("‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                except Exception as simple_error:
                    logger.error(f"‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {simple_error}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        if update and update.message:
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /test")
            except Exception as final_error:
                logger.error(f"‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {final_error}")

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        user_id = update.effective_user.id if update.effective_user else "unknown"
        logger.info(f"üß™ –ö–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not update.message:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ message –≤ update –¥–ª—è /test")
            return
            
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
        try:
            result1 = await update.message.reply_text("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {result1.message_id if result1 else 'unknown'}")
        except Exception as e1:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e1}")
            return
            
        # –ó–∞—Ç–µ–º —Å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            from telegram import InlineKeyboardMarkup, InlineKeyboardButton
            test_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏", callback_data='test_button')],
                [InlineKeyboardButton("üîÑ –ï—â–µ —Ç–µ—Å—Ç", callback_data='test_button2')]
            ])
            
            result2 = await update.message.reply_text(
                "üß™ –¢–µ—Å—Ç 2: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π",
                reply_markup=test_keyboard
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {result2.message_id if result2 else 'unknown'}")
        except Exception as e2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e2}")
            
        # –ó–∞—Ç–µ–º —Å Markdown
        try:
            test_text = f"""
üß™ **–¢–ï–°–¢ –ë–û–¢–ê –ó–ê–í–ï–†–®–ï–ù**

‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è  
‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è
‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è

ü§ñ –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
–í—Ä–µ–º—è: {update.message.date}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""
            result3 = await update.message.reply_text(
                test_text,
                parse_mode='Markdown'
            )
            logger.info(f"‚úÖ Markdown —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {result3.message_id if result3 else 'unknown'}")
            
        except Exception as e3:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Markdown —Å–æ–æ–±—â–µ–Ω–∏—è: {e3}")
            # Fallback –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            await update.message.reply_text("üß™ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏ —Ä–∞–∑–º–µ—Ç–∫–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        if update and update.message:
            try:
                await update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ")
            except:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    data = query.data
    
    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await show_main_menu(update, context)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã)
        elif data.startswith("category_"):
            await handle_category_selection(update, context)
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        elif data.startswith("motivation_"):
            await handle_motivation_selection(update, context)
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏
        elif data.startswith("esoteric_"):
            await handle_esoteric_selection(update, context)
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
        elif data.startswith("development_"):
            await handle_development_selection(update, context)
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
        elif data.startswith("health_"):
            await handle_health_selection(update, context)
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        elif data.startswith("relationships_"):
            await handle_relationships_selection(update, context)
        
        # –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã
        elif data.startswith("react_"):
            await handle_reaction_callback(update, context)
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        elif data.startswith("morning_variant"):
            await handle_morning_variant_callback(update, context)
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        elif data.startswith("admin_"):
            await handle_admin_callback(update, context)
        
        # –ó–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        elif data.startswith("zodiac_"):
            await handle_zodiac_selection(update, context)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        elif data.startswith("test_button"):
            await query.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!", show_alert=True)
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        else:
            await query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    query = getattr(update, 'callback_query', None)
    message = getattr(update, 'message', None)
    # Suppress repeated main_menu callback when already in main menu
    if query and query.data == 'main_menu' and context.user_data and context.user_data.get('current_menu') == 'main':
        await query.answer()  # silent acknowledge
        return
    # Prevent duplicate on /start message invocation
    if message and context.user_data and context.user_data.get("menu_sent"):
        await message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ!")
        return
    # Determine entry point
    if query:
        # Acknowledge callback press without notification
        await query.answer()
    elif not message:
        return
    # Get user name
    user = query.from_user if query else update.effective_user
    user_name = user.first_name if user and user.first_name else "–¥—Ä—É–≥"
        
    text = f"""üåü –ü—Ä–∏–≤–µ—Ç, {user_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! ‚ú®

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:**

üí´ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è** - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏–¥–µ–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
üîÆ **–≠–∑–æ—Ç–µ—Ä–∏–∫–∞** - –≥–æ—Ä–æ—Å–∫–æ–ø—ã, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å  
üéØ **–†–∞–∑–≤–∏—Ç–∏–µ** - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç –∏ –æ–±—É—á–µ–Ω–∏–µ
üåü **–ó–¥–æ—Ä–æ–≤—å–µ** - –∑–∞–±–æ—Ç–∞ –æ —Ç–µ–ª–µ –∏ —Ä–∞–∑—É–º–µ
üíù **–û—Ç–Ω–æ—à–µ–Ω–∏—è** - –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏ –∏ –ª—é–±–≤–∏

üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
"""
    
    # Display or edit the main menu
    if query:
        await query.edit_message_text(
            text,
            reply_markup=create_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    else:
        # Message-based entry (/start)
        if message:
            await message.reply_text(
                text,
                reply_markup=create_main_menu_keyboard(),
                parse_mode='Markdown'
            )
    # Mark menu as sent and current state
    if context.user_data is not None:
        context.user_data["menu_sent"] = True
        context.user_data["current_menu"] = "main"

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    from utils.keyboards import (
        create_motivation_submenu, create_esoteric_submenu,
        create_development_submenu, create_health_submenu,
        create_relationships_submenu
    )
    
    query = update.callback_query
    if not query or not query.data:
        return
    # Mark current menu as category to allow reopening main menu
    if context.user_data is not None:
        context.user_data["current_menu"] = query.data.replace("category_", "")
    
    category = query.data.replace("category_", "")
    
    if category == "motivation":
        text = """
üí´ **–ú–û–¢–ò–í–ê–¶–ò–Ø**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:

üåÖ **–£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è** - —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
üåô **–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è** - –∏—Ç–æ–≥–∏ –∏ –ø–ª–∞–Ω—ã
üí™ **–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π** - —Å–∏–ª–∞ –¥—É—Ö–∞
üéØ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π** - –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É
"""
        keyboard = create_motivation_submenu()
        
    elif category == "esoteric":
        text = """
üîÆ **–≠–ó–û–¢–ï–†–ò–ö–ê**

–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∏—Ä –¥—É—Ö–æ–≤–Ω–æ—Å—Ç–∏:

üîÆ **–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å** - –∑–≤–µ–∑–¥–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
üåô **–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å** - –≤–ª–∏—è–Ω–∏–µ –ª—É–Ω—ã
üî¢ **–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è** - –º–∞–≥–∏—è —á–∏—Å–µ–ª
üÉè **–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ** - –¥—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å
"""
        keyboard = create_esoteric_submenu()
        
    elif category == "development":
        text = """
üéØ **–†–ê–ó–í–ò–¢–ò–ï**

–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–µ–±—è:

üß† **–†–∞–∑–≤–∏—Ç–∏–µ –º—ã—à–ª–µ–Ω–∏—è** - –æ—Å—Ç—Ä—ã–π —É–º
üìö **–û–±—É—á–µ–Ω–∏–µ –∏ –∑–Ω–∞–Ω–∏—è** - –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
üé® **–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ** - —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–∞–ª–∞–Ω—Ç–∞
üíº **–ö–∞—Ä—å–µ—Ä–∞ –∏ –±–∏–∑–Ω–µ—Å** - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
"""
        keyboard = create_development_submenu()
        
    elif category == "health":
        text = """
üåü **–ó–î–û–†–û–í–¨–ï**

–ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ–µ–º –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏:

üèÉ‚Äç‚ôÇÔ∏è **–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —Å–∏–ª–∞ —Ç–µ–ª–∞
üßò‚Äç‚ôÄÔ∏è **–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ** - –ø–æ–∫–æ–π –¥—É—à–∏
ü•ó **–ü–∏—Ç–∞–Ω–∏–µ –∏ –¥–∏–µ—Ç–∞** - —ç–Ω–µ—Ä–≥–∏—è –∏–∑–Ω—É—Ç—Ä–∏
üò¥ **–°–æ–Ω –∏ –æ—Ç–¥—ã—Ö** - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª
"""
        keyboard = create_health_submenu()
        
    elif category == "relationships":
        text = """
üíù **–û–¢–ù–û–®–ï–ù–ò–Ø**

–ì–∞—Ä–º–æ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏:

üíï **–õ—é–±–æ–≤—å –∏ —Ä–æ–º–∞–Ω—Ç–∏–∫–∞** - –¥–µ–ª–∞ —Å–µ—Ä–¥–µ—á–Ω—ã–µ
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–°–µ–º—å—è –∏ –¥–µ—Ç–∏** - —Å–µ–º–µ–π–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ
üë• **–î—Ä—É–∂–±–∞ –∏ –æ–±—â–µ–Ω–∏–µ** - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
ü§ù **–†–∞–±–æ—á–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è** - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
"""
        keyboard = create_relationships_submenu()
    
    else:
        await query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        return
    
    await query.edit_message_text(
        text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def handle_motivation_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    query = update.callback_query
    if not query or not query.data:
        return
    # Mark current menu as motivation selection
    if context.user_data is not None:
        context.user_data["current_menu"] = "motivation"
    if not query or not query.data:
        return
    
    selection = query.data.replace("motivation_", "")
    
    content_map = {
        "morning": {
            "title": "üåÖ –£–¢–†–ï–ù–ù–Ø–Ø –ú–û–¢–ò–í–ê–¶–ò–Ø",
            "message": """

–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è

–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ. 
–°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å:

‚ú® –°–¥–µ–ª–∞—Ç—å —à–∞–≥ –∫ —Å–≤–æ–µ–π –º–µ—á—Ç–µ
üí™ –ü—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Ç–æ, —á—Ç–æ –≤—á–µ—Ä–∞ –∫–∞–∑–∞–ª–æ—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º  
üéØ –ü—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º
üåü –ü–æ–¥–∞—Ä–∏—Ç—å –º–∏—Ä—É —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç

–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å —É–ª—ã–±–∫–∏ –∏ –≤–µ—Ä—ã –≤ —Å–µ–±—è! üí´
"""
        },
        "evening": {
            "title": "üåô –í–ï–ß–ï–†–ù–ò–ï –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø", 
            "message": """

–í–µ—á–µ—Ä - –≤—Ä–µ–º—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ üåÜ

–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Ç—ã:

üéØ –ü—Ä–æ–∂–∏–ª –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏
üí´ –ü–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π –æ–ø—ã—Ç –∏ –∑–Ω–∞–Ω–∏—è
‚ù§Ô∏è –ü—Ä–æ—è–≤–∏–ª –∑–∞–±–æ—Ç—É –∫ —Å–µ–±–µ –∏ –±–ª–∏–∑–∫–∏–º
üåü –°—Ç–∞–ª –Ω–µ–º–Ω–æ–≥–æ –º—É–¥—Ä–µ–µ

–û—Ç–¥–æ—Ö–Ω–∏, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ —Å–∏–ª—ã –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–æ–≤—ã–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º! üí§
"""
        },
        "overcome": {
            "title": "üí™ –ü–†–ï–û–î–û–õ–ï–ù–ò–ï –¢–†–£–î–ù–û–°–¢–ï–ô",
            "message": """

–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ - —ç—Ç–æ —Å—Ç—É–ø–µ–Ω–∏ –∫ —Ä–æ—Å—Ç—É üèîÔ∏è

–ü–æ–º–Ω–∏:

üî• –ê–ª–º–∞–∑ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º
üå± –°–∏–ª—å–Ω—ã–µ –∫–æ—Ä–Ω–∏ —Ä–∞—Å—Ç—É—Ç –≤ –±—É—Ä—é
‚≠ê –ó–≤–µ–∑–¥—ã —Å–≤–µ—Ç—è—Ç —è—Ä—á–µ –≤ —Ç–µ–º–Ω–æ—Ç–µ
üíé –¢–≤–æ—è —Å–∏–ª–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö

–ö–∞–∂–¥–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ! üí™
"""
        },
        "goals": {
            "title": "üéØ –î–û–°–¢–ò–ñ–ï–ù–ò–ï –¶–ï–õ–ï–ô",
            "message": """

–¶–µ–ª—å –±–µ–∑ –ø–ª–∞–Ω–∞ - –≤—Å–µ–≥–æ –ª–∏—à—å –º–µ—á—Ç–∞ üìã

–°–µ–∫—Ä–µ—Ç—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π:

üéØ –ß–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —á—Ç–æ —Ö–æ—á–µ—à—å
üìÖ –†–∞–∑–±–µ–π –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏  
üìà –û—Ç–º–µ—á–∞–π –∫–∞–∂–¥—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
üîÑ –ë—É–¥—å –≥–∏–±–∫–∏–º –≤ –º–µ—Ç–æ–¥–∞—Ö
üí´ –í–µ—Ä—å –≤ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

–¢–≤–æ–π —É—Å–ø–µ—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞! üöÄ
"""
        }
    }
    
    if selection in content_map:
        content = content_map[selection]
        full_text = f"{content['title']}{content['message']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
        from utils.keyboards import get_reaction_keyboard
        import uuid
        post_id = str(uuid.uuid4())[:8]
        
        reaction_keyboard = get_reaction_keyboard(post_id)
        back_button = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ—Ç–∏–≤–∞—Ü–∏–∏", callback_data='category_motivation')]]
        
        keyboard = reaction_keyboard + back_button
        
        await query.edit_message_text(
            full_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        await query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è")

async def handle_esoteric_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏"""
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    query = update.callback_query
    if not query or not query.data:
        return
    # Mark current menu as esoteric selection
    if context.user_data is not None:
        context.user_data["current_menu"] = "esoteric"
    
    selection = query.data.replace("esoteric_", "")
    
    if selection == "horoscope":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
        text = """
üîÆ **–ì–û–†–û–°–ö–û–ü –ù–ê –î–ï–ù–¨**

–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:

‚ú® –ö–∞–∂–¥—ã–π –∑–Ω–∞–∫ –ø–æ–ª—É—á–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
"""
        from utils.keyboards import create_zodiac_keyboard
        await query.edit_message_text(
            text,
            reply_markup=create_zodiac_keyboard(),
            parse_mode='Markdown'
        )
    else:
        await query.answer("üîÆ –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

async def handle_development_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–∞–∑–≤–∏—Ç–∏—è"""
    query = update.callback_query
    if not query:
        return
    # Mark current menu as development selection
    if context.user_data is not None:
        context.user_data["current_menu"] = "development"
    if not query:
        return
    await query.answer("üéØ –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

async def handle_health_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ –∑–¥–æ—Ä–æ–≤—å—è"""  
    query = update.callback_query
    if not query:
        return
    # Mark current menu as health selection
    if context.user_data is not None:
        context.user_data["current_menu"] = "health"
    if not query:
        return
    await query.answer("üåü –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

async def handle_relationships_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    query = update.callback_query  
    if not query:
        return
    # Mark current menu as relationships selection
    if context.user_data is not None:
        context.user_data["current_menu"] = "relationships"
    if not query:
        return
    await query.answer("üíù –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

async def handle_zodiac_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    from config import ZODIAC_MAPPING
    
    query = update.callback_query
    if not query or not query.data:
        return
    # Mark current menu as zodiac selection
    if context.user_data is not None:
        context.user_data["current_menu"] = "zodiac"
    if not query or not query.data:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–ª—é—á –∏–∑ callback_data
    english_key = query.data.replace("zodiac_", "")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    sign = ZODIAC_MAPPING.get(english_key, english_key.title())
    
    horoscope_text = f"""
üîÆ **–ì–û–†–û–°–ö–û–ü –î–õ–Ø {sign.upper()}**

–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω—ã –∫ –≤–∞–º! ‚ú®

üí´ **–û–±—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –¥–Ω—è:** –í—ã—Å–æ–∫–∞—è
üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –î–µ–π—Å—Ç–≤—É–π—Ç–µ —Å–º–µ–ª–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ
üíù **–û—Ç–Ω–æ—à–µ–Ω–∏—è:** –í—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤  
üíº **–ö–∞—Ä—å–µ—Ä–∞:** –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π
üåü **–°–æ–≤–µ—Ç –¥–Ω—è:** –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏

–ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å –∏ —É—Å–ø–µ—Ö! üåà
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    from utils.keyboards import get_reaction_keyboard
    import uuid
    post_id = str(uuid.uuid4())[:8]
    
    reaction_keyboard = get_reaction_keyboard(post_id)
    back_button = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∑–Ω–∞–∫–∞", callback_data='esoteric_horoscope')]]
    
    keyboard = reaction_keyboard + back_button
    
    await query.edit_message_text(
        horoscope_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return
    
    message_text = update.message.text.lower()
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
    forbidden_words = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–∫—É–ø–∏—Ç—å']
    
    if any(word in message_text for word in forbidden_words):
        await update.message.reply_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        return
    
    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update.message.reply_text(
        "ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=False)

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Railway"""
    global application
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –¥–ª—è Railway
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .connect_timeout(CONNECT_TIMEOUT)
        .read_timeout(READ_TIMEOUT)
        .write_timeout(WRITE_TIMEOUT)
        .pool_timeout(POOL_TIMEOUT)
        .build()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("admin", handle_admin_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ Railway URL –¥–ª—è webhook
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è webhook URL
    webhook_url = None
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
    manual_webhook = os.environ.get('WEBHOOK_URL')
    if manual_webhook:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://
        if not manual_webhook.startswith('https://'):
            manual_webhook = f"https://{manual_webhook}"
        webhook_url = f"{manual_webhook}/webhook/{BOT_TOKEN}"
        
    # –í–∞—Ä–∏–∞–Ω—Ç 2: RAILWAY_PUBLIC_DOMAIN (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç Railway)
    elif os.environ.get('RAILWAY_PUBLIC_DOMAIN'):
        railway_domain = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
        webhook_url = f"https://{railway_domain}/webhook/{BOT_TOKEN}"
        
    # –í–∞—Ä–∏–∞–Ω—Ç 3: RAILWAY_STATIC_URL (–µ—â—ë –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç Railway)
    elif os.environ.get('RAILWAY_STATIC_URL'):
        railway_static = os.environ.get('RAILWAY_STATIC_URL')
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if railway_static and not railway_static.startswith('https://'):
            railway_static = f"https://{railway_static}"
        webhook_url = f"{railway_static}/webhook/{BOT_TOKEN}"
    
    # –í–∞—Ä–∏–∞–Ω—Ç 4: –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Railway
    elif os.environ.get('RAILWAY_PROJECT_NAME') and os.environ.get('RAILWAY_SERVICE_NAME'):
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ —à–∞–±–ª–æ–Ω—É Railway: service-name-project-name.up.railway.app
        project = os.environ.get('RAILWAY_PROJECT_NAME', '').lower()
        service = os.environ.get('RAILWAY_SERVICE_NAME', '').lower()
        if project and service:
            auto_domain = f"{service}-{project}.up.railway.app"
            webhook_url = f"https://{auto_domain}/webhook/{BOT_TOKEN}"
            logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç–∞ –¥–æ–º–µ–Ω–∞: {auto_domain}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 5: –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (fallback)
    if not webhook_url:
        fallback_domain = "telegram-bot-project-1-production.up.railway.app"
        webhook_url = f"https://{fallback_domain}/webhook/{BOT_TOKEN}"
        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–æ–º–µ–Ω: {fallback_domain}")
    
    # –í Railway –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç URL
    is_railway_env = (
        os.environ.get('RAILWAY_PROJECT_ID') is not None or
        os.environ.get('PORT') is not None
    )
    
    if webhook_url:
        await application.bot.set_webhook(webhook_url)
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    elif is_railway_env:
        # Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ –±–µ–∑ webhook URL - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await application.bot.delete_webhook()
        logger.info("‚ö†Ô∏è Webhook –æ—á–∏—â–µ–Ω - –¥–æ–±–∞–≤—å—Ç–µ WEBHOOK_URL –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π!")
        logger.info("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: Railway ‚Üí Settings ‚Üí Generate Domain ‚Üí Variables ‚Üí WEBHOOK_URL=–≤–∞—à_–¥–æ–º–µ–Ω")
    else:
        logger.info("üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - polling")
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å polling –æ—Ç–¥–µ–ª—å–Ω–æ
        return False
        
    # –î–ª—è webhook —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.start()
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ webhook —Ä–µ–∂–∏–º–µ")
    return True

async def run_webhook_mode():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook –¥–ª—è Railway"""
    await setup_webhook()
    # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è webhook
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        if application:
            await application.stop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global start_time
    import time
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    start_time = time.time()
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook route –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        setup_webhook_route()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –æ–∫—Ä—É–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç Railway
        is_railway = (
            os.environ.get('RAILWAY_PROJECT_ID') is not None or
            os.environ.get('RAILWAY_SERVICE_ID') is not None or 
            os.environ.get('RAILWAY_DEPLOYMENT_ID') is not None or
            os.environ.get('PORT') is not None  # Railway –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PORT
        )
        
        if is_railway:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ Railway —Ä–µ–∂–∏–º–µ")
            
            # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            flask_thread = threading.Thread(target=run_flask, daemon=True)
            flask_thread.start()
            logger.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            asyncio.run(run_webhook_mode())
        else:
            logger.info("üè† –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å polling - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥
            run_local_polling()
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

def run_local_polling():
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    global application
    
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .connect_timeout(CONNECT_TIMEOUT)
        .read_timeout(READ_TIMEOUT) 
        .write_timeout(WRITE_TIMEOUT)
        .pool_timeout(POOL_TIMEOUT)
        .build()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("admin", handle_admin_command))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_error_handler(error_handler)
    
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
