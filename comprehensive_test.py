#!/usr/bin/env python3
# comprehensive_test.py - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Telegram –±–æ—Ç–∞

import os
import sys
import subprocess
import traceback
import time
import psutil
import json
from datetime import datetime
from pathlib import Path

class ComprehensiveTestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.start_time = time.time()
        self.test_results = {
            'environment': {},
            'imports': {},
            'code_quality': {},
            'security': {},
            'functionality': {},
            'performance': {},
            'deployment': {},
            'documentation': {}
        }
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        
    def print_header(self, title):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
        print(f"\n{'='*60}")
        print(f"üîç {title}")
        print(f"{'='*60}")
        
    def print_result(self, test_name, success, details=""):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
        if details:
            print(f"   ‚îî‚îÄ {details}")
        if success:
            self.passed_tests += 1
        else:
            self.failed_tests += 1
            
    def test_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
        python_version = sys.version
        python_ok = sys.version_info >= (3, 8)
        self.print_result(
            "Python –≤–µ—Ä—Å–∏—è",
            python_ok,
            f"Python {python_version.split()[0]}"
        )
        self.test_results['environment']['python'] = {
            'version': python_version.split()[0],
            'compatible': python_ok
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            import telegram
            telegram_version = telegram.__version__
            telegram_ok = True
            self.print_result(
                "Python Telegram Bot –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
                True,
                f"–í–µ—Ä—Å–∏—è {telegram_version}"
            )
        except ImportError as e:
            telegram_ok = False
            self.print_result("Python Telegram Bot –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", False, str(e))
            
        self.test_results['environment']['telegram'] = {
            'installed': telegram_ok,
            'version': telegram_version if telegram_ok else None
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        env_exists = os.path.exists('.env')
        self.print_result(
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª .env",
            env_exists,
            "–ù–∞–π–¥–µ–Ω" if env_exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from config import BOT_TOKEN, ADMIN_ID
        token_ok = BOT_TOKEN is not None and len(BOT_TOKEN) > 10
        admin_ok = ADMIN_ID is not None and ADMIN_ID > 0
        
        self.print_result("BOT_TOKEN", token_ok, "–ù–∞—Å—Ç—Ä–æ–µ–Ω" if token_ok else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        self.print_result("ADMIN_ID", admin_ok, f"ID: {ADMIN_ID}" if admin_ok else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        self.test_results['environment']['config'] = {
            'env_file': env_exists,
            'bot_token': token_ok,
            'admin_id': admin_ok
        }
        
    def test_imports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í")
        
        import_tests = [
            ("config", "import config"),
            ("handlers.admin", "from handlers.admin import admin_command"),
            ("handlers.reactions", "from handlers.reactions import handle_reaction"),
            ("utils.keyboards", "from utils.keyboards import create_main_menu_keyboard"),
            ("utils.database", "from utils.database import Database"),
            ("main_bot_railway", "import main_bot_railway"),
        ]
        
        for module_name, import_cmd in import_tests:
            try:
                exec(import_cmd)
                self.print_result(f"–ò–º–ø–æ—Ä—Ç {module_name}", True)
                self.test_results['imports'][module_name] = True
            except Exception as e:
                self.print_result(f"–ò–º–ø–æ—Ä—Ç {module_name}", False, str(e))
                self.test_results['imports'][module_name] = False
                
    def test_code_quality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤
        python_files = []
        for root, dirs, files in os.walk('.'):
            if '__pycache__' in root or '.git' in root:
                continue
            for file in files:
                if file.endswith('.py'):
                    python_files.append(os.path.join(root, file))
        
        syntax_errors = []
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    compile(f.read(), file_path, 'exec')
            except SyntaxError as e:
                syntax_errors.append(f"{file_path}: {e}")
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                
        syntax_ok = len(syntax_errors) == 0
        self.print_result(
            f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ ({len(python_files)} —Ñ–∞–π–ª–æ–≤)",
            syntax_ok,
            f"{len(syntax_errors)} –æ—à–∏–±–æ–∫" if not syntax_ok else "–í—Å–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ flake8 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            result = subprocess.run(
                [sys.executable, '-m', 'flake8', '--select=E9,F63,F7,F82', '.'],
                capture_output=True, text=True, timeout=30
            )
            flake8_ok = result.returncode == 0
            self.print_result(
                "Flake8 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏",
                flake8_ok,
                "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫" if flake8_ok else f"–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏"
            )
        except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.CalledProcessError):
            # –ï—Å–ª–∏ flake8 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python –Ω–∞–ø—Ä—è–º—É—é
            flake8_ok = len(syntax_errors) == 0
            self.print_result(
                "Flake8 –ø—Ä–æ–≤–µ—Ä–∫–∞", 
                flake8_ok if len(syntax_errors) == 0 else None, 
                "Flake8 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python" if flake8_ok else "Flake8 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
            
        self.test_results['code_quality'] = {
            'syntax_errors': syntax_errors,
            'flake8_passed': flake8_ok,
            'files_checked': len(python_files)
        }
        
    def test_security(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–¥–µ
        hardcoded_secrets = []
        for root, dirs, files in os.walk('.'):
            if '__pycache__' in root or '.git' in root:
                continue
            for file in files:
                if file.endswith('.py'):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã - –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª—É—á–∞–∏
                            if 'BOT_TOKEN' in content and ('=' in content):
                                lines = content.split('\n')
                                for i, line in enumerate(lines):
                                    line_clean = line.strip()
                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                                    if (line_clean.startswith('#') or 
                                        'os.getenv' in line or 
                                        'BOT_TOKEN}' in line or  # f-string usage
                                        'import' in line or
                                        'from' in line or
                                        'BOT_TOKEN = os.getenv' in line or
                                        'webhook' in line.lower()):  # webhook URLs are OK
                                        continue
                                    if 'BOT_TOKEN' in line and '=' in line:
                                        hardcoded_secrets.append(f"{file_path}:{i+1} - {line.strip()}")
                    except Exception:
                        pass
                        
        secrets_ok = len(hardcoded_secrets) == 0
        self.print_result(
            "–ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã",
            secrets_ok,
            "–ù–µ –Ω–∞–π–¥–µ–Ω—ã" if secrets_ok else f"–ù–∞–π–¥–µ–Ω–æ {len(hardcoded_secrets)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –≤ .gitignore
        gitignore_exists = os.path.exists('.gitignore')
        gitignore_ok = False
        if gitignore_exists:
            with open('.gitignore', 'r') as f:
                gitignore_content = f.read()
                gitignore_ok = '.env' in gitignore_content
                
        self.print_result(
            ".env –≤ .gitignore",
            gitignore_ok,
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if gitignore_ok else "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        )
        
        self.test_results['security'] = {
            'hardcoded_secrets': hardcoded_secrets,
            'gitignore_configured': gitignore_ok
        }
        
    def test_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        try:
            from utils.keyboards import create_main_menu_keyboard, get_reaction_keyboard, create_zodiac_keyboard
            
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            main_kb = create_main_menu_keyboard()
            main_kb_ok = hasattr(main_kb, 'inline_keyboard') and len(main_kb.inline_keyboard) > 0
            self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é", main_kb_ok)
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π
            reaction_kb = get_reaction_keyboard("test_123")
            reaction_kb_ok = hasattr(reaction_kb, 'inline_keyboard') and len(reaction_kb.inline_keyboard) > 0
            self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∞–∫—Ü–∏–π", reaction_kb_ok)
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
            zodiac_kb = create_zodiac_keyboard()
            zodiac_kb_ok = hasattr(zodiac_kb, 'inline_keyboard') and len(zodiac_kb.inline_keyboard) > 0
            self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞", zodiac_kb_ok)
            
        except Exception as e:
            self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä", False, str(e))
            main_kb_ok = reaction_kb_ok = zodiac_kb_ok = False
            
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            from config import validate_config
            validate_config()
            config_ok = True
            self.print_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", True)
        except Exception as e:
            config_ok = False
            self.print_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", False, str(e))
            
        # –¢–µ—Å—Ç –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥
        try:
            from handlers.admin import admin_command, stats_command
            admin_ok = True
            self.print_result("–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã", True, "–§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            admin_ok = False
            self.print_result("–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã", False, str(e))
            
        self.test_results['functionality'] = {
            'keyboards': {
                'main_menu': main_kb_ok,
                'reactions': reaction_kb_ok,
                'zodiac': zodiac_kb_ok
            },
            'config_validation': config_ok,
            'admin_commands': admin_ok
        }
        
    def test_performance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        
        # –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        try:
            import main_bot_railway
            from handlers import admin, reactions, stats
            from utils import keyboards, database
            
            final_memory = process.memory_info().rss / 1024 / 1024  # MB
            memory_usage = final_memory - initial_memory
            
            memory_ok = memory_usage < 50  # 50 MB limit
            self.print_result(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ",
                memory_ok,
                f"{memory_usage:.2f} MB"
            )
        except Exception as e:
            self.print_result("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", False, str(e))
            memory_usage = None
            memory_ok = False
            
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–º–ø–æ—Ä—Ç–∞
        start_time = time.time()
        try:
            from telegram.ext import Application, CommandHandler
            import_time = time.time() - start_time
            import_ok = import_time < 5.0  # 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            self.print_result(
                "–°–∫–æ—Ä–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫",
                import_ok,
                f"{import_time:.3f} —Å–µ–∫—É–Ω–¥"
            )
        except Exception as e:
            import_ok = False
            import_time = None
            self.print_result("–°–∫–æ—Ä–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫", False, str(e))
            
        self.test_results['performance'] = {
            'memory_usage_mb': memory_usage,
            'import_time_sec': import_time,
            'memory_efficient': memory_ok,
            'import_fast': import_ok
        }
        
    def test_deployment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            'requirements.txt',
            'Dockerfile',
            'Procfile',
            'railway.json',
            'config.py',
            'main_bot_railway.py'
        ]
        
        files_status = {}
        for file in required_files:
            exists = os.path.exists(file)
            files_status[file] = exists
            self.print_result(f"–§–∞–π–ª {file}", exists)
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
        try:
            with open('requirements.txt', 'r') as f:
                reqs = f.read()
                has_telegram = 'python-telegram-bot' in reqs
                has_dotenv = 'python-dotenv' in reqs
                
                self.print_result("requirements.txt —Å–æ–¥–µ—Ä–∂–∏—Ç telegram-bot", has_telegram)
                self.print_result("requirements.txt —Å–æ–¥–µ—Ä–∂–∏—Ç python-dotenv", has_dotenv)
        except Exception as e:
            self.print_result("–ê–Ω–∞–ª–∏–∑ requirements.txt", False, str(e))
            has_telegram = has_dotenv = False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CI/CD
        ci_exists = os.path.exists('.github/workflows/ci.yml')
        self.print_result("CI/CD –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", ci_exists)
        
        self.test_results['deployment'] = {
            'required_files': files_status,
            'requirements': {
                'telegram_bot': has_telegram,
                'dotenv': has_dotenv
            },
            'ci_cd': ci_exists
        }
        
    def test_documentation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ README
        readme_files = ['README.md', 'readme.md', 'ReadMe.md']
        readme_exists = any(os.path.exists(f) for f in readme_files)
        self.print_result("README —Ñ–∞–π–ª", readme_exists)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–æ–≤ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
        key_files = ['config.py', 'main_bot_railway.py', 'handlers/admin.py']
        docstring_coverage = 0
        total_functions = 0
        
        for file_path in key_files:
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–æ–≤
                        functions = content.count('def ')
                        docstrings = content.count('"""')
                        total_functions += functions
                        docstring_coverage += min(docstrings, functions)
                except Exception:
                    pass
                    
        docs_ratio = docstring_coverage / max(total_functions, 1)
        docs_ok = docs_ratio > 0.3  # 30% –ø–æ–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏–º—É–º
        
        self.print_result(
            "–ü–æ–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π",
            docs_ok,
            f"{docs_ratio:.1%} —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã"
        )
        
        self.test_results['documentation'] = {
            'readme_exists': readme_exists,
            'docstring_coverage': docs_ratio,
            'total_functions': total_functions
        }
        
    def run_existing_tests(self):
        """–ó–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.print_header("–ó–ê–ü–£–°–ö –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–ï–°–¢–û–í")
        
        test_files = [
            'test_import_fix.py',
            'test_keyboards_complete.py'
        ]
        
        for test_file in test_files:
            if os.path.exists(test_file):
                try:
                    result = subprocess.run(
                        [sys.executable, test_file],
                        capture_output=True,
                        text=True,
                        timeout=30
                    )
                    success = result.returncode == 0
                    self.print_result(
                        f"–¢–µ—Å—Ç {test_file}",
                        success,
                        "–£—Å–ø–µ—à–Ω–æ" if success else f"–û—à–∏–±–∫–∞: {result.stderr[:100]}"
                    )
                except subprocess.TimeoutExpired:
                    self.print_result(f"–¢–µ—Å—Ç {test_file}", False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                except Exception as e:
                    self.print_result(f"–¢–µ—Å—Ç {test_file}", False, str(e))
            else:
                self.print_result(f"–¢–µ—Å—Ç {test_file}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        end_time = time.time()
        duration = end_time - self.start_time
        
        self.print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests} ‚úÖ")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed_tests} ‚ùå")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.passed_tests/max(self.total_tests,1)*100):.1f}%")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        success_rate = self.passed_tests / max(self.total_tests, 1)
        
        if success_rate >= 0.9:
            status = "üéâ –û–¢–õ–ò–ß–ù–û"
            color = "green"
        elif success_rate >= 0.7:
            status = "üü° –•–û–†–û–®–û"
            color = "yellow"
        elif success_rate >= 0.5:
            status = "üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
            color = "orange"
        else:
            status = "üî¥ –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
            color = "red"
            
        print(f"\nüéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {status}")
        print(f"üìà –£—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {success_rate*100:.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_tests': self.total_tests,
                'passed_tests': self.passed_tests,
                'failed_tests': self.failed_tests,
                'success_rate': success_rate,
                'duration_seconds': duration,
                'status': status
            },
            'results': self.test_results
        }
        
        with open('comprehensive_test_report.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
            
        print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: comprehensive_test_report.json")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if not self.test_results['environment'].get('config', {}).get('bot_token'):
            print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
            
        if self.test_results['security'].get('hardcoded_secrets'):
            print("   ‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –∫–æ–¥–∞")
            
        if not self.test_results['documentation'].get('readme_exists'):
            print("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ README.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞")
            
        if not self.test_results['functionality'].get('config_validation'):
            print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
        return success_rate >= 0.7  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ü–†–û–í–ï–†–ö–ò –ü–†–û–ï–ö–¢–ê TELEGRAM –ë–û–¢–ê")
    print("=" * 60)
    
    runner = ComprehensiveTestRunner()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        runner.test_environment()
        runner.test_imports()
        runner.test_code_quality()
        runner.test_security()
        runner.test_functionality()
        runner.test_performance()
        runner.test_deployment()
        runner.test_documentation()
        runner.run_existing_tests()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        project_healthy = runner.generate_report()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        sys.exit(0 if project_healthy else 1)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(2)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        traceback.print_exc()
        sys.exit(3)

if __name__ == "__main__":
    main()