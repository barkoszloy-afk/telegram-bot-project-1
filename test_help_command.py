#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã help –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""

import asyncio
from unittest.mock import AsyncMock, MagicMock
from main_bot_railway import help_command

async def test_help_command():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é help_command"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /help...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    update = MagicMock()
    context = MagicMock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ message
    update.message = AsyncMock()
    update.message.reply_text = AsyncMock()
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é help_command
        await help_command(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply_text –±—ã–ª –≤—ã–∑–≤–∞–Ω
        assert update.message.reply_text.called, "reply_text –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        call_args = update.message.reply_text.call_args
        help_text = call_args[0][0]  # –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ help —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìù –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏:\n{help_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
        expected_parts = [
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É",
            "/start",
            "/help", 
            "/admin",
            "–≥–æ—Ä–æ—Å–∫–æ–ø—ã"
        ]
        
        missing_parts = []
        for part in expected_parts:
            if part not in help_text:
                missing_parts.append(part)
        
        if missing_parts:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —á–∞—Å—Ç–∏: {missing_parts}")
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø—Ä–∞–≤–∫–µ")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

async def test_help_command_no_message():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é help_command –∫–æ–≥–¥–∞ –Ω–µ—Ç message"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /help –±–µ–∑ message...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    update = MagicMock()
    context = MagicMock()
    
    # message = None
    update.message = None
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é help_command
        result = await help_command(update, context)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ help –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ message")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑ message: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã help\n")
    
    tests = [
        test_help_command(),
        test_help_command_no_message()
    ]
    
    results = await asyncio.gather(*tests, return_exceptions=True)
    
    passed = sum(1 for result in results if result is True)
    total = len(results)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã help –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –ö–æ–º–∞–Ω–¥–∞ help —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("   –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –±–æ—Ç–µ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤.")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–æ–π help")

if __name__ == "__main__":
    asyncio.run(main())
