# tests/test_integration.py - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, patch

# –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
pytestmark = pytest.mark.integration

class TestBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞"""
    
    @pytest.mark.asyncio
    async def test_bot_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        with patch('config.BOT_TOKEN', 'test_token'):
            try:
                from main_bot_railway import create_application
                app = create_application()
                assert app is not None
                print("‚úÖ Bot initialization test passed")
            except Exception as e:
                pytest.skip(f"Bot initialization requires valid config: {e}")
    
    @pytest.mark.asyncio  
    async def test_webhook_setup(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
        with patch('config.BOT_TOKEN', 'test_token'):
            try:
                from main_bot_railway import setup_webhook
                # –ú–æ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook
                with patch('telegram.Bot.set_webhook') as mock_webhook:
                    mock_webhook.return_value = AsyncMock()
                    await setup_webhook()
                    print("‚úÖ Webhook setup test passed")
            except Exception as e:
                pytest.skip(f"Webhook test requires valid config: {e}")
    
    @pytest.mark.asyncio
    async def test_command_handlers(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            from handlers import ping_command, status_command
            
            # –ú–æ–∫–∞–µ–º update –∏ context
            update = Mock()
            update.effective_chat.id = 12345
            update.message.reply_text = AsyncMock()
            
            context = Mock()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            await ping_command(update, context)
            await status_command(update, context)
            
            assert update.message.reply_text.called
            print("‚úÖ Command handlers test passed")
            
        except Exception as e:
            pytest.skip(f"Command handlers test requires valid setup: {e}")

class TestKeyboardIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    def test_main_menu_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            from utils.keyboards import create_main_menu_keyboard
            keyboard = create_main_menu_keyboard()
            
            assert keyboard is not None
            assert len(keyboard.inline_keyboard) > 0
            print("‚úÖ Main menu keyboard test passed")
            
        except Exception as e:
            pytest.skip(f"Keyboard test requires valid setup: {e}")
    
    def test_zodiac_keyboard_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–¥–∏–∞–∫–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            from utils.keyboards import create_zodiac_keyboard
            keyboard = create_zodiac_keyboard()
            
            assert keyboard is not None
            assert len(keyboard.inline_keyboard) >= 12  # 12 –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
            print("‚úÖ Zodiac keyboard test passed")
            
        except Exception as e:
            pytest.skip(f"Zodiac keyboard test requires valid setup: {e}")

class TestDatabaseIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_reactions_database(self):
        """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π"""
        try:
            from utils.database import reactions_db
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            test_post_id = "test_123"
            test_reaction = "üëç"
            test_user_id = 12345
            
            reactions_db.add_reaction(test_post_id, test_reaction, test_user_id)
            stats = reactions_db.get_post_stats(test_post_id)
            
            assert stats is not None
            assert test_reaction in stats
            print("‚úÖ Reactions database test passed")
            
        except Exception as e:
            pytest.skip(f"Database test requires valid setup: {e}")
