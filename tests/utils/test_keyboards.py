"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è utils.keyboards."""

import pytest
from unittest.mock import patch
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from utils.keyboards import (
    create_main_menu_keyboard,
    get_main_menu_keyboard,
    remove_reply_keyboard,
)


class TestMainMenuKeyboard:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é."""
    
    def test_create_main_menu_keyboard_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        keyboard = create_main_menu_keyboard()
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 3  # 3 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥: 2 –∫–Ω–æ–ø–∫–∏
        assert len(keyboard.inline_keyboard[0]) == 2
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥: 2 –∫–Ω–æ–ø–∫–∏  
        assert len(keyboard.inline_keyboard[1]) == 2
        
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥: 1 –∫–Ω–æ–ø–∫–∞
        assert len(keyboard.inline_keyboard[2]) == 1
    
    def test_main_menu_keyboard_buttons(self):
        """–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        keyboard = create_main_menu_keyboard()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
        all_buttons = []
        for row in keyboard.inline_keyboard:
            all_buttons.extend(row)
        
        assert len(all_buttons) == 5  # –í—Å–µ–≥–æ 5 –∫–Ω–æ–ø–æ–∫
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ callback_data
        callback_data = [button.callback_data for button in all_buttons]
        expected_callbacks = [
            "category_motivation",
            "category_esoteric", 
            "category_development",
            "category_health",
            "category_relationships"
        ]
        
        for expected in expected_callbacks:
            assert expected in callback_data
    
    def test_main_menu_keyboard_text_content(self):
        """–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–æ–ø–æ–∫."""
        keyboard = create_main_menu_keyboard()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        button_texts = []
        for row in keyboard.inline_keyboard:
            for button in row:
                button_texts.append(button.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        all_text = " ".join(button_texts)
        assert "–ú–æ—Ç–∏–≤–∞—Ü–∏—è" in all_text
        assert "–≠–∑–æ—Ç–µ—Ä–∏–∫–∞" in all_text
        assert "–†–∞–∑–≤–∏—Ç–∏–µ" in all_text
        assert "–ó–¥–æ—Ä–æ–≤—å–µ" in all_text
        assert "–û—Ç–Ω–æ—à–µ–Ω–∏—è" in all_text
    
    def test_get_main_menu_keyboard_compatibility(self):
        """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ get_main_menu_keyboard —Å create_main_menu_keyboard."""
        keyboard1 = create_main_menu_keyboard()
        keyboard2 = get_main_menu_keyboard()
        
        # –û–±–∞ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å InlineKeyboardMarkup
        assert isinstance(keyboard1, InlineKeyboardMarkup)
        assert isinstance(keyboard2, InlineKeyboardMarkup)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Ö–æ–∂–µ–π
        assert len(keyboard1.inline_keyboard) == len(keyboard2.inline_keyboard)


class TestRemoveReplyKeyboard:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    
    def test_remove_reply_keyboard_returns_correct_type(self):
        """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞."""
        result = remove_reply_keyboard()
        
        assert isinstance(result, ReplyKeyboardRemove)
        assert result.remove_keyboard is True


class TestKeyboardValidation:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    
    def test_keyboard_button_limits(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        keyboard = create_main_menu_keyboard()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç—ã Telegram
        for row in keyboard.inline_keyboard:
            assert len(row) <= 8, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É"
            
            for button in row:
                assert len(button.text) <= 64, "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ callback_data
                if button.callback_data is not None:
                    assert len(str(button.callback_data)) <= 64, "Callback_data —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"


class TestKeyboardEmojis:
    """–¢–µ—Å—Ç—ã –¥–ª—è —ç–º–æ–¥–∑–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö."""
    
    def test_main_menu_has_emojis(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —ç–º–æ–¥–∑–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
        keyboard = create_main_menu_keyboard()
        
        all_text = ""
        for row in keyboard.inline_keyboard:
            for button in row:
                all_text += button.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–º–æ–¥–∑–∏
        emoji_chars = ["üí´", "üîÆ", "üéØ", "üåü", "üíù", "‚ú®", "üéâ", "‚ù§Ô∏è", "üî•"]
        has_emoji = any(emoji in all_text for emoji in emoji_chars)
        assert has_emoji, "–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–º–æ–¥–∑–∏"


class TestKeyboardIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    
    def test_keyboard_consistency(self):
        """–¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏."""
        main_keyboard1 = create_main_menu_keyboard()
        main_keyboard2 = get_main_menu_keyboard()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        keyboards = [main_keyboard1, main_keyboard2]
        
        for keyboard in keyboards:
            assert isinstance(keyboard, InlineKeyboardMarkup)
            assert len(keyboard.inline_keyboard) > 0
            
            for row in keyboard.inline_keyboard:
                assert len(row) > 0, "–ü—É—Å—Ç–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫"
                
                for button in row:
                    assert isinstance(button, InlineKeyboardButton)
                    assert button.text is not None
                    assert button.callback_data is not None


class TestKeyboardEdgeCases:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    
    def test_keyboard_serialization(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
        keyboards = [
            create_main_menu_keyboard(),
            get_main_menu_keyboard()
        ]
        
        for keyboard in keyboards:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ JSON
            try:
                keyboard_dict = keyboard.to_dict()
                assert isinstance(keyboard_dict, dict)
                assert "inline_keyboard" in keyboard_dict
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")


class TestKeyboardAccessibility:
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    
    def test_button_text_readability(self):
        """–¢–µ—Å—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫."""
        keyboard = create_main_menu_keyboard()
        
        for row in keyboard.inline_keyboard:
            for button in row:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã (–Ω–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏)
                text_without_emoji = ''.join(char for char in button.text if char.isalpha())
                assert len(text_without_emoji.strip()) > 0, f"–ö–Ω–æ–ø–∫–∞ '{button.text}' —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
                assert len(button.text.strip()) >= 2, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: '{button.text}'"
    
    def test_callback_data_uniqueness(self):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ callback_data."""
        keyboards = [
            create_main_menu_keyboard(),
            get_main_menu_keyboard()
        ]
        
        for keyboard in keyboards:
            callback_data_list = []
            for row in keyboard.inline_keyboard:
                for button in row:
                    if button.callback_data is not None:
                        callback_data_list.append(str(button.callback_data))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            assert len(callback_data_list) == len(set(callback_data_list)), "–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è callback_data"


class TestKeyboardParameters:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    
    def test_main_menu_keyboard_parameters(self):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        keyboard = create_main_menu_keyboard()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        assert hasattr(keyboard, 'inline_keyboard')
        assert isinstance(keyboard.inline_keyboard, (list, tuple))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for row in keyboard.inline_keyboard:
            for button in row:
                assert hasattr(button, 'text')
                assert hasattr(button, 'callback_data')
                assert button.text is not None
                assert button.callback_data is not None
    
    def test_remove_reply_keyboard_parameters(self):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ReplyKeyboardRemove."""
        keyboard_remove = remove_reply_keyboard()
        
        assert hasattr(keyboard_remove, 'remove_keyboard')
        assert keyboard_remove.remove_keyboard is True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
        remove_dict = keyboard_remove.to_dict()
        assert isinstance(remove_dict, dict)
        assert remove_dict.get('remove_keyboard') is True
