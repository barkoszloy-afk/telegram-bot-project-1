"""–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ help –∏ instructions."""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from main_bot_railway import help_command, instructions_command, setup_bot_commands


class TestHelpCommand:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help."""
    
    @pytest.mark.asyncio
    async def test_help_command_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /help."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        message = MagicMock()
        user = MagicMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update.effective_user = user
        user.id = 12345
        update.message = message
        message.reply_text = AsyncMock()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await help_command(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        message.reply_text.assert_called_once()
        call_args = message.reply_text.call_args[0][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
        assert "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É" in call_args
        assert "/start" in call_args
        assert "/help" in call_args
        assert "/instructions" in call_args
    
    @pytest.mark.asyncio
    async def test_help_command_no_message(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help –±–µ–∑ message –æ–±—ä–µ–∫—Ç–∞."""
        update = MagicMock()
        context = MagicMock()
        user = MagicMock()
        
        update.effective_user = user
        user.id = 12345
        update.message = None  # –ù–µ—Ç message
        
        # –î–æ–ª–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        await help_command(update, context)


class TestInstructionsCommand:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /instructions."""
    
    @pytest.mark.asyncio
    async def test_instructions_command_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /instructions."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        message = MagicMock()
        user = MagicMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update.effective_user = user
        user.id = 12345
        update.message = message
        message.reply_text = AsyncMock()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await instructions_command(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        message.reply_text.assert_called_once()
        call_args = message.reply_text.call_args[0][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        assert "üìö –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏" in call_args
        assert "üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã" in call_args
        assert "üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏" in call_args
        assert "üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è" in call_args
        assert "üîÆ –≠–∑–æ—Ç–µ—Ä–∏–∫–∞" in call_args
    
    @pytest.mark.asyncio
    async def test_instructions_command_no_message(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /instructions –±–µ–∑ message –æ–±—ä–µ–∫—Ç–∞."""
        update = MagicMock()
        context = MagicMock()
        user = MagicMock()
        
        update.effective_user = user
        user.id = 12345
        update.message = None  # –ù–µ—Ç message
        
        # –î–æ–ª–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        await instructions_command(update, context)


class TestSetupBotCommands:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    
    @pytest.mark.asyncio
    async def test_setup_bot_commands_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ application
        application = MagicMock()
        bot = MagicMock()
        application.bot = bot
        bot.set_my_commands = AsyncMock()
        bot.get_my_commands = AsyncMock()
        
        # –ú–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è get_my_commands
        mock_command = MagicMock()
        mock_command.command = "start"
        mock_command.description = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"
        bot.get_my_commands.return_value = [mock_command]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥
        await setup_bot_commands(application)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ set_my_commands –±—ã–ª –≤—ã–∑–≤–∞–Ω
        bot.set_my_commands.assert_called_once()
        call_args = bot.set_my_commands.call_args[0][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        assert len(call_args) == 3
        commands = {cmd.command: cmd.description for cmd in call_args}
        assert "start" in commands
        assert "help" in commands
        assert "instructions" in commands
    
    @pytest.mark.asyncio
    async def test_setup_bot_commands_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ application —Å –æ—à–∏–±–∫–æ–π
        application = MagicMock()
        bot = MagicMock()
        application.bot = bot
        bot.set_my_commands = AsyncMock(side_effect=Exception("API Error"))
        
        # –î–æ–ª–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è)
        await setup_bot_commands(application)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ set_my_commands –±—ã–ª –≤—ã–∑–≤–∞–Ω
        bot.set_my_commands.assert_called_once()


class TestCommandsIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥."""
    
    @pytest.mark.asyncio
    async def test_all_commands_have_different_content(self):
        """–¢–µ—Å—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."""
        # –ú–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        message = MagicMock()
        user = MagicMock()
        
        update.effective_user = user
        user.id = 12345
        update.message = message
        message.reply_text = AsyncMock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º help
        await help_command(update, context)
        help_content = message.reply_text.call_args[0][0]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫
        message.reply_text.reset_mock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º instructions
        await instructions_command(update, context)
        instructions_content = message.reply_text.call_args[0][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–Ω—ã–π
        assert help_content != instructions_content
        assert "–°–ø—Ä–∞–≤–∫–∞" in help_content
        assert "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏" in instructions_content
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        assert "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç" in help_content
        assert "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã" in instructions_content
