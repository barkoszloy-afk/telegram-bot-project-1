# test_refactored_bot.py - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞
import asyncio
import logging
from datetime import datetime
from unittest.mock import AsyncMock, MagicMock
from telegram import Update, User, Message, Chat, CallbackQuery
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
from handlers.reactions import handle_reaction_callback
from handlers.admin import handle_admin_command
from utils.database import reactions_db
from utils.keyboards import get_zodiac_keyboard, get_reaction_keyboard
from config import validate_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_mock_update(user_id: int = 123, message_text: str = "/start"):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ–±—ä–µ–∫—Ç Update –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = User(id=user_id, first_name="TestUser", is_bot=False)
    chat = Chat(id=user_id, type="private")
    message = Message(
        message_id=1,
        date=datetime.now(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π datetime –≤–º–µ—Å—Ç–æ None
        chat=chat,
        from_user=user,
        text=message_text
    )
    
    update = Update(update_id=1)
    update._effective_user = user
    update._effective_chat = chat
    update._effective_message = message
    update.message = message
    
    return update

def create_mock_callback_query(user_id: int = 123, data: str = "react_heart_test123"):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ–±—ä–µ–∫—Ç CallbackQuery –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = User(id=user_id, first_name="TestUser", is_bot=False)
    chat = Chat(id=user_id, type="private")
    message = Message(
        message_id=1,
        date=datetime.now(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π datetime –≤–º–µ—Å—Ç–æ None
        chat=chat,
        from_user=user
    )
    
    query = CallbackQuery(
        id="test_query",
        from_user=user,
        chat_instance="test_instance",
        data=data,
        message=message
    )
    
    update = Update(update_id=1)
    update._effective_user = user
    update._effective_chat = chat
    update._callback_query = query
    
    return update

async def test_keyboard_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–æ–¥–∏–∞–∫–∞
        zodiac_keyboard = get_zodiac_keyboard()
        assert len(zodiac_keyboard) > 0, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–æ–¥–∏–∞–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        logger.info("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–æ–¥–∏–∞–∫–∞: OK")
        
        # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∞–∫—Ü–∏–π
        reaction_keyboard = get_reaction_keyboard("test_post_123")
        assert len(reaction_keyboard) > 0, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        logger.info("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∞–∫—Ü–∏–π: OK")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False

async def test_database_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
        user_id = "test_user_123"
        post_id = "test_post_456"
        reaction = "heart"
        
        result = reactions_db.add_user_reaction(user_id, reaction, post_id)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: {result}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        data = reactions_db.data
        assert isinstance(data, dict), "–î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º"
        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: OK")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        return False

async def test_admin_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –ú–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        update = create_mock_update(345470935, "/admin")  # ADMIN_ID –∏–∑ config
        context = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º reply_text - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if update.message:
            update.message.reply_text = AsyncMock()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É
            await handle_admin_command(update, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ reply_text –±—ã–ª –≤—ã–∑–≤–∞–Ω
            update.message.reply_text.assert_called_once()
            logger.info("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: OK")
        else:
            logger.error("‚ùå Update.message is None")
            return False
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏: {e}")
        return False

async def test_reaction_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–∫—Ü–∏–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ callback query
        update = create_mock_callback_query(123, "react_heart_test123")
        context = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã callback query - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ callback_query —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if update.callback_query:
            update.callback_query.answer = AsyncMock()
            update.callback_query.edit_message_reply_markup = AsyncMock()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–∫—Ü–∏–∏
            await handle_reaction_callback(update, context)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π: OK")
        else:
            logger.error("‚ùå Update.callback_query is None")
            return False
            
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π: {e}")
        return False

async def test_config_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)
        try:
            validate_config()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        except ValueError as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {e}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config_validation),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_operations), 
        ("–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã", test_keyboard_generation),
        ("–ê–¥–º–∏–Ω–∫–∞", test_admin_functions),
        ("–†–µ–∞–∫—Ü–∏–∏", test_reaction_handling)
    ]
    
    results = []
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–µ—Å—Ç: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = await test_func()
            results.append((test_name, result))
            status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø"
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
        except Exception as e:
            results.append((test_name, False))
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*60}")
    logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info(f"{'='*60}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        logger.info(f"{status} {test_name}")
    
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        logger.info("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        logger.info("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")

if __name__ == "__main__":
    asyncio.run(run_all_tests())
