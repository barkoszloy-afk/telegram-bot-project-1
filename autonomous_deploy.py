#!/usr/bin/env python3
"""
üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–µ–ø–ª–æ–π –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ Heroku –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
"""

import os
import sys
import subprocess
import json
import time
from typing import Optional

class AutoDeploy:
    def __init__(self):
        self.project_dir = os.path.dirname(os.path.abspath(__file__))
        
    def print_step(self, message: str) -> None:
        print(f"üîµ {message}")
        
    def print_success(self, message: str) -> None:
        print(f"‚úÖ {message}")
        
    def print_warning(self, message: str) -> None:
        print(f"‚ö†Ô∏è  {message}")
        
    def print_error(self, message: str) -> None:
        print(f"‚ùå {message}")
        
    def run_command(self, command: str, capture_output: bool = True) -> tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            if capture_output:
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    cwd=self.project_dir
                )
                return result.returncode == 0, result.stdout + result.stderr
            else:
                result = subprocess.run(
                    command, 
                    shell=True, 
                    cwd=self.project_dir
                )
                return result.returncode == 0, ""
        except Exception as e:
            return False, str(e)
    
    def check_heroku_cli(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Heroku CLI"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä—è–µ–º Heroku CLI...")
        success, output = self.run_command("heroku --version")
        
        if success:
            self.print_success(f"Heroku CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {output.strip()}")
            return True
        else:
            self.print_warning("Heroku CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    
    def install_heroku_cli(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Heroku CLI"""
        self.print_step("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Heroku CLI...")
        
        system = sys.platform.lower()
        
        if system == "darwin":  # macOS
            if self.run_command("which brew")[0]:
                success, output = self.run_command("brew tap heroku/brew && brew install heroku")
            else:
                self.print_error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ Heroku CLI —Å https://devcenter.heroku.com/articles/heroku-cli")
                return False
        elif system.startswith("linux"):  # Linux
            success, output = self.run_command("curl https://cli-assets.heroku.com/install.sh | sh")
        else:  # Windows
            self.print_error("–°–∫–∞—á–∞–π—Ç–µ Heroku CLI —Å https://devcenter.heroku.com/articles/heroku-cli")
            return False
        
        if success:
            self.print_success("Heroku CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            self.print_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {output}")
            return False
    
    def check_docker(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Docker"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä—è–µ–º Docker...")
        success, output = self.run_command("docker --version")
        
        if success:
            self.print_success(f"Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {output.strip()}")
            return True
        else:
            self.print_warning("Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    
    def create_heroku_files(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è Heroku"""
        self.print_step("–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è Heroku...")
        
        # –°–æ–∑–¥–∞–µ–º runtime.txt
        with open(os.path.join(self.project_dir, "runtime.txt"), "w") as f:
            f.write("python-3.11.9\n")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Procfile –¥–ª—è Heroku
        with open(os.path.join(self.project_dir, "Procfile"), "w") as f:
            f.write("web: python main_bot_railway.py\n")
        
        # –°–æ–∑–¥–∞–µ–º app.json –¥–ª—è Heroku
        app_json = {
            "name": "telegram-bot-project",
            "description": "Modern Telegram Bot with CI/CD",
            "repository": "https://github.com/barkoszloy-afk/telegram-bot-project-1",
            "logo": "https://telegram.org/img/t_logo.png",
            "keywords": ["telegram", "bot", "python", "heroku"],
            "stack": "heroku-22",
            "buildpacks": [
                {"url": "heroku/python"}
            ],
            "env": {
                "BOT_TOKEN": {
                    "description": "Telegram Bot Token from @BotFather",
                    "required": True
                },
                "ADMIN_ID": {
                    "description": "Your Telegram User ID",
                    "required": True
                },
                "CHANNEL_ID": {
                    "description": "Telegram Channel ID (optional)",
                    "required": False
                },
                "PORT": {
                    "description": "Port for web server",
                    "value": "8000"
                }
            },
            "formation": {
                "web": {
                    "quantity": 1,
                    "size": "eco"
                }
            }
        }
        
        with open(os.path.join(self.project_dir, "app.json"), "w") as f:
            json.dump(app_json, f, indent=2)
        
        self.print_success("–§–∞–π–ª—ã –¥–ª—è Heroku —Å–æ–∑–¥–∞–Ω—ã")
        return True
    
    def create_docker_files(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å Docker —Ñ–∞–π–ª—ã"""
        self.print_step("–°–æ–∑–¥–∞–µ–º Docker —Ñ–∞–π–ª—ã...")
        
        # Dockerfile
        dockerfile_content = """FROM python:3.11-slim

WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º requirements –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
EXPOSE 8000

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONPATH=/app
ENV PORT=8000

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
CMD ["python", "main_bot_railway.py"]
"""
        
        with open(os.path.join(self.project_dir, "Dockerfile"), "w") as f:
            f.write(dockerfile_content)
        
        # docker-compose.yml
        compose_content = """version: '3.8'

services:
  telegram-bot:
    build: .
    ports:
      - "8000:8000"
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_ID=${ADMIN_ID}
      - CHANNEL_ID=${CHANNEL_ID}
      - PORT=8000
    restart: unless-stopped
    volumes:
      - ./bot.log:/app/bot.log
      - ./reactions_data.json:/app/reactions_data.json
"""
        
        with open(os.path.join(self.project_dir, "docker-compose.yml"), "w") as f:
            f.write(compose_content)
        
        # .env.example
        env_example = """# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è

# Telegram Bot Token –æ—Ç @BotFather
BOT_TOKEN=your_bot_token_here

# –í–∞—à Telegram ID (–ø–æ–ª—É—á–∏—Ç–µ –æ—Ç @userinfobot)
ADMIN_ID=your_telegram_id_here

# ID –∫–∞–Ω–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
CHANNEL_ID=your_channel_id_here

# –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
PORT=8000
"""
        
        with open(os.path.join(self.project_dir, ".env.example"), "w") as f:
            f.write(env_example)
        
        self.print_success("Docker —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        return True
    
    def setup_env_file(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª"""
        self.print_step("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        env_file = os.path.join(self.project_dir, ".env")
        
        print("\n" + "="*50)
        print("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("="*50)
        
        # BOT_TOKEN
        print("\nü§ñ BOT_TOKEN:")
        print("1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram")
        print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newbot")
        print("3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω")
        bot_token = input("–í–≤–µ–¥–∏—Ç–µ BOT_TOKEN: ").strip()
        
        # ADMIN_ID
        print("\nüë§ ADMIN_ID:")
        print("1. –ù–∞–π–¥–∏—Ç–µ @userinfobot –≤ Telegram")
        print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID")
        admin_id = input("–í–≤–µ–¥–∏—Ç–µ ADMIN_ID: ").strip()
        
        # CHANNEL_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        channel_id = ""
        setup_channel = input("\n–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CHANNEL_ID? (y/n): ").lower()
        if setup_channel == 'y':
            print("1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π")
            print("2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            print("3. –ü–æ–ª—É—á–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞")
            channel_id = input("–í–≤–µ–¥–∏—Ç–µ CHANNEL_ID: ").strip()
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        env_content = f"""BOT_TOKEN={bot_token}
ADMIN_ID={admin_id}
CHANNEL_ID={channel_id}
PORT=8000
"""
        
        with open(env_file, "w") as f:
            f.write(env_content)
        
        self.print_success(".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        return True
    
    def commit_changes(self) -> bool:
        """–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.print_step("–ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        
        success, _ = self.run_command("git add .")
        if not success:
            self.print_error("–û—à–∏–±–∫–∞ git add")
            return False
        
        success, _ = self.run_command('git commit -m "üöÄ Add deployment configurations for multiple platforms"')
        if not success:
            self.print_warning("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞")
        
        return True
    
    def deploy_heroku(self) -> bool:
        """–î–µ–ø–ª–æ–π –Ω–∞ Heroku"""
        self.print_step("üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Heroku...")
        
        print("\n" + "="*50)
        print("üåê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ü–õ–û–ô –ù–ê HEROKU")
        print("="*50)
        
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://dashboard.heroku.com/new-app")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("3. –í —Ä–∞–∑–¥–µ–ª–µ Deploy –≤—ã–±–µ—Ä–∏—Ç–µ GitHub")
        print("4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π barkoszloy-afk/telegram-bot-project-1")
        print("5. –í–∫–ª—é—á–∏—Ç–µ Automatic Deploys")
        print("6. –í Settings > Config Vars –¥–æ–±–∞–≤—å—Ç–µ:")
        print("   - BOT_TOKEN")
        print("   - ADMIN_ID") 
        print("   - CHANNEL_ID (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)")
        print("7. –ù–∞–∂–º–∏—Ç–µ 'Deploy Branch'")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ Heroku...")
        
        self.print_success("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Heroku –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
    
    def deploy_docker_local(self) -> bool:
        """–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Docker"""
        self.print_step("üê≥ –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Docker...")
        
        if not os.path.exists(os.path.join(self.project_dir, ".env")):
            self.print_error(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        print("\n–ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
        self.print_step("–°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑...")
        success, output = self.run_command("docker build -t telegram-bot .", capture_output=False)
        
        if not success:
            self.print_error("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.print_step("–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
        success, output = self.run_command("docker-compose up -d", capture_output=False)
        
        if success:
            self.print_success("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –≤ Docker!")
            print("\nüìä –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("   docker-compose logs -f     - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
            print("   docker-compose stop        - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            print("   docker-compose restart     - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
            print("   docker-compose down        - –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            print("\nüåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ http://localhost:8000/health")
            return True
        else:
            self.print_error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
            return False
    
    def run_full_deploy(self) -> bool:
        """–ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π"""
        print("üöÄ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –î–ï–ü–õ–û–Ø")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.create_heroku_files()
        self.create_docker_files()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not self.setup_env_file():
            return False
        
        # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.commit_changes()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GitHub
        self.print_step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GitHub...")
        success, output = self.run_command("git push origin main")
        if success:
            self.print_success("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub")
        else:
            self.print_warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub")
        
        # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–µ–ø–ª–æ—è
        print("\n" + "="*50)
        print("üéØ –í–´–ë–ï–†–ò–¢–ï –°–ü–û–°–û–ë –î–ï–ü–õ–û–Ø")
        print("="*50)
        print("1. Heroku (–æ–±–ª–∞—á–Ω—ã–π, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)")
        print("2. Docker (–ª–æ–∫–∞–ª—å–Ω—ã–π)")
        print("3. –û–±–∞ —Å–ø–æ—Å–æ–±–∞")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            return self.deploy_heroku()
        elif choice == "2":
            if self.check_docker():
                return self.deploy_docker_local()
            else:
                self.print_error("Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
        elif choice == "3":
            heroku_success = self.deploy_heroku()
            docker_success = False
            if self.check_docker():
                docker_success = self.deploy_docker_local()
            return heroku_success or docker_success
        else:
            self.print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return False

def main():
    deployer = AutoDeploy()
    
    print("üéØ –ê–í–¢–û–ù–û–ú–ù–´–ô –î–ï–ü–õ–û–ô –ë–ï–ó –ë–†–ê–£–ó–ï–†–ê")
    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: Heroku, Docker")
    print("=" * 50)
    
    success = deployer.run_full_deploy()
    
    if success:
        print("\nüéâ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("\nüì± –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞:")
        print("   1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
        print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ–Ω—é")
        print("\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:")
        print("   - Heroku: https://dashboard.heroku.com")
        print("   - Docker: docker-compose logs -f")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è")
        sys.exit(1)

if __name__ == "__main__":
    main()
