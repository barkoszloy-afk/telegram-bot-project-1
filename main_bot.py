# --- –û—Å–Ω–æ–≤–Ω–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
MAIN_KEYBOARD = [
    ["–ü–æ—Å—Ç—ã", "üìù –ü–æ—Å—Ç", "üìÑ –õ–æ–≥–∏"],
    ["üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üìã –ö–æ–º–∞–Ω–¥—ã"],
    ["‚ùå –û—Ç–º–µ–Ω–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ü–æ—Å—Ç—ã"
POSTS_KEYBOARD = [
    ["–ì–æ—Ä–æ—Å–∫–æ–ø", "–ö–∞—Ä—Ç–∞ –¥–Ω—è"],
    ["–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"],
    ["–õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", "–°–≤–æ–±–æ–¥–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"],
    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
]
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import (
    BOT_TOKEN,
    ADMIN_ID,
    REACTION_EMOJIS,
    REACTION_NAMES,
    ZODIAC_SIGNS,
)
from pathlib import Path


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CHANNEL_ID = '@eto_vse_ty'  # username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

# --- –†–µ–∞–∫—Ü–∏–∏ ---
REACTION_MESSAGES = [
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–æ!",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —ç–º–æ—Ü–∏–∏!",
]


def get_reaction_keyboard(reactions):
    if len(REACTION_EMOJIS) != len(REACTION_NAMES):
        raise ValueError("REACTION_EMOJIS and REACTION_NAMES lengths mismatch")
    return [[
        InlineKeyboardButton(
            f"{REACTION_EMOJIS[i]} {reactions.get(REACTION_NAMES[i], 0)}",
            callback_data=f"react_{REACTION_NAMES[i]}"
        )
        for i in range(len(REACTION_EMOJIS))
    ]]

ZODIAC_INLINE_KEYBOARD = [
    [InlineKeyboardButton(f"{emoji} {name}", callback_data=f"zodiac_{name}")] for name, emoji in ZODIAC_SIGNS
]
# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∞–Ω–Ω–µ—Ä ---
WELCOME_BANNER = (
    "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "<i>–Ø –ø–æ–º–æ–≥—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª.</i>\n"
)
# --- –û–±—â–∏–π –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥ ---
COMMANDS_TEXT = (
    "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    "\n"
    "<b>ü§ñ /start</b> ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
    "<b>‚ÑπÔ∏è /help</b> ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
    "<b>üìù /post</b> ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç (—Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞)\n"
    "<b>‚ùå /cancel</b> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
    "<b>üìÉ /commands</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
    "<b>üõ†Ô∏è /admin</b> ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
    "<b>üìä /stats</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
    "<b>‚öôÔ∏è /settings</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
)
# --- –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
)
import logging
from datetime import datetime
from telegram.constants import ChatAction

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s'
)

# --- –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ ---
FORBIDDEN_WORDS = ['badword1', 'badword2', 'spam']

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
POST_TEXT, POST_MEDIA = range(2)

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.message:
        return
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    keyboard = [
        [
            InlineKeyboardButton("üìã –ö–æ–º–∞–Ω–¥—ã", callback_data='commands'),
            InlineKeyboardButton("üìù –ü–æ—Å—Ç", callback_data='post')
        ],
        [
            InlineKeyboardButton("üìÑ –õ–æ–≥–∏", callback_data='logs'),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("<b>üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>", reply_markup=reply_markup, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not update.effective_user:
        return
    await query.answer()
    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not hasattr(query, 'data') or query.data is None:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return
    if query.data == 'commands':
        await query.edit_message_text(COMMANDS_TEXT, parse_mode="HTML")
    elif query.data == 'post':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ /post –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")
    elif query.data == 'logs':
        try:
            with open('bot.log', 'r') as f:
                log_content = f.read()[-2000:]
            await query.edit_message_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n{log_content}")
        except Exception:
            await query.edit_message_text("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
    elif query.data == 'cancel':
        await query.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞.")
    elif query.data == 'stats':
        # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
        await query.edit_message_text("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n–ü–æ—Å—Ç–æ–≤: 42\n–û—à–∏–±–æ–∫: 3", parse_mode="HTML")
    elif query.data == 'settings':
        await query.edit_message_text("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n(–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", parse_mode="HTML")
    elif query.data == 'back':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("üìã –ö–æ–º–∞–Ω–¥—ã", callback_data='commands'),
                InlineKeyboardButton("üìù –ü–æ—Å—Ç", callback_data='post')
            ],
            [
                InlineKeyboardButton("üìÑ –õ–æ–≥–∏", callback_data='logs'),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("<b>üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>", reply_markup=reply_markup, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /commands ---
async def commands_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    await update.message.reply_text(COMMANDS_TEXT, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    if update.effective_user and update.effective_user.id == ADMIN_ID:
        reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            WELCOME_BANNER + "\n" + COMMANDS_TEXT + "\n\n–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            WELCOME_BANNER + "\n" + COMMANDS_TEXT,
            parse_mode="HTML"
        )
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥ (BotFather style) ---
async def handle_main_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    text = update.message.text
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ context.user_data ‚Äî dict
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ POSTS_KEYBOARD
        if context.user_data.get('zodiac'):
            reply_markup = ReplyKeyboardMarkup(POSTS_KEYBOARD, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:", reply_markup=reply_markup)
            context.user_data.pop('zodiac', None)
        else:
            reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return
    if text == "–ü–æ—Å—Ç—ã":
        reply_markup = ReplyKeyboardMarkup(POSTS_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:", reply_markup=reply_markup)
    elif text == "üìù –ü–æ—Å—Ç":
        await post_start(update, context)
    elif text == "üìÑ –õ–æ–≥–∏":
        # –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —ç–º—É–ª—è—Ü–∏–∏ callback
        if update.effective_user and update.effective_user.id == ADMIN_ID:
            try:
                with open('bot.log', 'r') as f:
                    log_content = f.read()[-2000:]
                await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n{log_content}")
            except Exception:
                await update.message.reply_text("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    elif text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await admin_panel(update, context)
    elif text == "üìã –ö–æ–º–∞–Ω–¥—ã":
        await commands_command(update, context)
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ":
        image_path = Path(__file__).parent / "images" / "poslanie1.jpg"
        if not image_path.exists():
            await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        try:
            with image_path.open("rb") as img:
                context.user_data['preview'] = {
                    'type': 'photo',
                    'file': str(image_path),
                    'caption': "–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                }
                context.user_data['zodiac'] = True
                context.user_data['reactions'] = {k: 0 for k in REACTION_NAMES}
                context.user_data['reaction_users'] = {k: set() for k in REACTION_NAMES}
                keyboard = ZODIAC_INLINE_KEYBOARD + get_reaction_keyboard(context.user_data['reactions'])
                await update.message.reply_photo(
                    img,
                    caption="–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        except Exception:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
# --- Callback –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π ---
async def reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not hasattr(query, 'data') or query.data is None:
        return
    await query.answer()
    data = query.data
    if not isinstance(data, str):
        return
    if data.startswith("react_"):
        reaction = data.replace("react_", "")
        user_id = update.effective_user.id if update.effective_user else None
        if not user_id:
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ context.user_data
        if not hasattr(context, 'user_data') or context.user_data is None:
            context.user_data = {}
        if 'reactions' not in context.user_data:
            context.user_data['reactions'] = {k: 0 for k in REACTION_NAMES}
        if 'reaction_users' not in context.user_data:
            context.user_data['reaction_users'] = {k: set() for k in REACTION_NAMES}
        # –ò–Ω–¥–µ–∫—Å —Ä–µ–∞–∫—Ü–∏–∏
        try:
            idx = REACTION_NAMES.index(reaction)
        except ValueError:
            return
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é
        if user_id not in context.user_data['reaction_users'][reaction]:
            context.user_data['reactions'][reaction] += 1
            context.user_data['reaction_users'][reaction].add(user_id)
            # –ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (popup)
            try:
                await query.answer(REACTION_MESSAGES[idx], show_alert=True)
            except Exception:
                pass
        else:
            # –£–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏ –±–µ–∑ —Å–ø–∞–º–∞
            try:
                await query.answer("–í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é", show_alert=True)
            except Exception:
                pass
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        keyboard = ZODIAC_INLINE_KEYBOARD + get_reaction_keyboard(context.user_data['reactions'])
        try:
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
        except Exception:
            pass
    elif query.data in [f"{emoji} {name}" for name, emoji in ZODIAC_SIGNS]:
        if update.message:
            await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞!")

    # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É reply-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–æ–¥–∏–∞–∫–∞, —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏
# --- Callback –¥–ª—è –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ (inline) ---
async def zodiac_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not hasattr(query, 'data') or query.data is None:
        return
    await query.answer()
    data = query.data
    if not isinstance(data, str):
        return
    if data.startswith("zodiac_"):
        zodiac_name = data.replace("zodiac_", "")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        if not hasattr(context, 'user_data') or context.user_data is None:
            context.user_data = {}
        context.user_data['preview'] = {
            'type': 'text',
            'text': f"–ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–∞: {zodiac_name}"
        }
        # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö
        await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {zodiac_name}", show_alert=True)
        # –ö–Ω–æ–ø–∫–∞ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        show_publish = False
        try:
            user_id = update.effective_user.id if update.effective_user else None
            if user_id == ADMIN_ID:
                show_publish = True
        except Exception:
            pass
        if show_publish:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='confirm_post')]
            ]
            await query.edit_message_caption(
                caption=f"–ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–∞: {zodiac_name}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_caption(
                caption=f"–ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–∞: {zodiac_name}",
                reply_markup=None
            )
    elif update.message and hasattr(update.message, 'text') and update.message.text in ["–ì–æ—Ä–æ—Å–∫–æ–ø", "–ö–∞—Ä—Ç–∞ –¥–Ω—è", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", "–°–≤–æ–±–æ–¥–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"]:
        text = update.message.text
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ context.user_data ‚Äî dict
        if not hasattr(context, 'user_data') or context.user_data is None:
            context.user_data = {}
        context.user_data['preview'] = {
            'type': 'text',
            'text': f"{text}: –ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞"
        }
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='confirm_post')],
            [InlineKeyboardButton("‚úèÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='cancel_post')]
        ]
        await update.message.reply_text(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞: {text}\n\n–ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞", reply_markup=InlineKeyboardMarkup(keyboard))
# --- Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ ---
async def preview_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ context.user_data ‚Äî dict
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    preview = context.user_data.get('preview')
    if not preview:
        await query.edit_message_text("–ù–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return
    if query.data == 'confirm_post':
        if preview['type'] == 'photo':
            with open(preview['file'], 'rb') as img:
                await context.bot.send_photo(chat_id=CHANNEL_ID, photo=img, caption=preview['caption'])
        elif preview['type'] == 'text':
            await context.bot.send_message(chat_id=CHANNEL_ID, text=preview['text'])
        # –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        try:
            await query.edit_message_caption(caption="–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!", reply_markup=None)
        except Exception:
            await query.edit_message_text("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!", reply_markup=None)
        if context.user_data and isinstance(context.user_data, dict):
            context.user_data.pop('preview', None)
    elif query.data == 'cancel_post':
        await query.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
        if context.user_data and isinstance(context.user_data, dict):
            context.user_data.pop('preview', None)
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" ---
async def admin_panel_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram import ReplyKeyboardRemove
    if update.message and update.message.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and update.effective_user and update.effective_user.id == ADMIN_ID:
        # –£–±–∏—Ä–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await update.message.reply_text(
            "<b>üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="HTML"
        )
        await admin_panel(update, context)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    await update.message.reply_text(
        "<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å</b>\n\n"
        "–Ø –º–æ–≥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å <b>—Ç–µ–∫—Å—Ç</b> –∏ <b>–º–µ–¥–∏–∞</b> –≤ –∫–∞–Ω–∞–ª.\n"
        "–¢–æ–ª—å–∫–æ <b>–∞–¥–º–∏–Ω</b> –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.\n\n"
        "<b>–ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:</b>\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ /post\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞\n"
        "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "üìù /post ‚Äî –Ω–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞\n"
        "‚ùå /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
        "üìã /commands ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
        "üõ†Ô∏è /admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "üìä /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)\n"
        "‚öôÔ∏è /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–¥–º–∏–Ω)\n\n"
        "<i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ /post.</i>"
        , parse_mode="HTML"
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return ConversationHandler.END
    await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# --- –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ ---
def contains_forbidden(text):
    return any(word.lower() in (text or '').lower() for word in FORBIDDEN_WORDS)

# --- ConversationHandler: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ ---
async def post_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.message:
        return ConversationHandler.END
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return ConversationHandler.END
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ª–∏–±–æ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    return POST_TEXT

async def post_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user:
        return ConversationHandler.END
    text = update.message.text or ""
    if contains_forbidden(text):
        await update.message.reply_text("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        logging.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {text}")
        return ConversationHandler.END
    if not text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        return POST_TEXT
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    await update.message.reply_text("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
    logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text}")
    return ConversationHandler.END

async def post_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user:
        return ConversationHandler.END
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        caption = update.message.caption or ""
        if contains_forbidden(caption):
            await update.message.reply_text("–í –ø–æ–¥–ø–∏—Å–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            logging.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ñ–æ—Ç–æ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {caption}")
            return ConversationHandler.END
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=file_id, caption=caption)
        await update.message.reply_text("–§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
        logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ: {caption}")
        return ConversationHandler.END
    if update.message.document:
        file_id = update.message.document.file_id
        caption = update.message.caption or ""
        if contains_forbidden(caption):
            await update.message.reply_text("–í –ø–æ–¥–ø–∏—Å–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            logging.info(f"–û—Ç–∫–ª–æ–Ω—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {caption}")
            return ConversationHandler.END
        await context.bot.send_document(chat_id=CHANNEL_ID, document=file_id, caption=caption)
        await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
        logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {caption}")
        return ConversationHandler.END
    if update.message.video:
        file_id = update.message.video.file_id
        caption = update.message.caption or ""
        if contains_forbidden(caption):
            await update.message.reply_text("–í –ø–æ–¥–ø–∏—Å–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            logging.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {caption}")
            return ConversationHandler.END
        await context.bot.send_video(chat_id=CHANNEL_ID, video=file_id, caption=caption)
        await update.message.reply_text("–í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
        logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–∏–¥–µ–æ: {caption}")
        return ConversationHandler.END
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    import sys
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python: {sys.executable}")
    if not BOT_TOKEN:
        print("[–û–®–ò–ë–ö–ê] BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN.")
        exit(1)
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).connect_timeout(60).read_timeout(60).build()
    # –ö–æ–º–∞–Ω–¥—ã

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    # ConversationHandler –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("post", post_start)],
        states={
            POST_TEXT: [MessageHandler(filters.TEXT & (~filters.COMMAND), post_text),
                        MessageHandler(filters.PHOTO | filters.Document.ALL | filters.VIDEO, post_media)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("commands", commands_command))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(CallbackQueryHandler(admin_callback, pattern=None))
    app.add_handler(CallbackQueryHandler(preview_callback, pattern='^(confirm_post|cancel_post)$'))
    app.add_handler(CallbackQueryHandler(zodiac_callback, pattern=r'^zodiac_.*$'))
    app.add_handler(CallbackQueryHandler(reaction_callback, pattern=r'^react_.*$'))
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ MAIN_KEYBOARD –∏ POSTS_KEYBOARD
    all_buttons = [btn for row in MAIN_KEYBOARD for btn in row] + [btn for row in POSTS_KEYBOARD for btn in row]
    regex_pattern = "^(" + "|".join(map(lambda s: s.replace("(", "\\(").replace(")", "\\)").replace(".", "\\.").replace("+", "\\+").replace("?", "\\?").replace("|", "\\|"), all_buttons)) + ")$"
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(regex_pattern), handle_main_keyboard))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    app.run_polling()
