#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –º–µ–¥–∏–∞, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, —Ä–µ–∞–∫—Ü–∏–∏
"""

# --- –ò–º–ø–æ—Ä—Ç—ã ---
import os
import logging
from dotenv import load_dotenv
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler,
    filters, ConversationHandler, CallbackQueryHandler
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ò–º–ø–æ—Ä—Ç ADMIN_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from config import ADMIN_ID

CHANNEL_ID = '@eto_vse_ty'  # username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# –û—Å–Ω–æ–≤–Ω–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
MAIN_KEYBOARD = [
    ["–ü–æ—Å—Ç—ã", "üìù –ü–æ—Å—Ç", "üìÑ –õ–æ–≥–∏"],
    ["üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üìã –ö–æ–º–∞–Ω–¥—ã"],
    ["‚ùå –û—Ç–º–µ–Ω–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ü–æ—Å—Ç—ã"
POSTS_KEYBOARD = [
    ["–ì–æ—Ä–æ—Å–∫–æ–ø", "–ö–∞—Ä—Ç–∞ –¥–Ω—è"],
    ["–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"],
    ["–õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", "–°–≤–æ–±–æ–¥–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"],
    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è 12 –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
ZODIAC_SIGNS = [
    ("–û–≤–µ–Ω", "üêè"), ("–¢–µ–ª–µ—Ü", "üêÇ"), ("–ë–ª–∏–∑–Ω–µ—Ü—ã", "üëØ‚Äç‚ôÇÔ∏è"), ("–†–∞–∫", "ü¶Ä"),
    ("–õ–µ–≤", "ü¶Å"), ("–î–µ–≤–∞", "üë∏"), ("–í–µ—Å—ã", "‚öñÔ∏è"), ("–°–∫–æ—Ä–ø–∏–æ–Ω", "ü¶Ç"),
    ("–°—Ç—Ä–µ–ª–µ—Ü", "üèπ"), ("–ö–æ–∑–µ—Ä–æ–≥", "üêê"), ("–í–æ–¥–æ–ª–µ–π", "üåä"), ("–†—ã–±—ã", "üêü")
]

ZODIAC_INLINE_KEYBOARD = [
    [InlineKeyboardButton(f"{emoji} {name}",
                          callback_data=f"zodiac_{name}")]
    for name, emoji in ZODIAC_SIGNS
]

# –†–µ–∞–∫—Ü–∏–∏
REACTION_EMOJIS = ["‚ù§Ô∏è", "üôè", "ü•π"]
REACTION_NAMES = ["heart", "pray", "touched"]
REACTION_MESSAGES = [
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–æ!",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —ç–º–æ—Ü–∏–∏!"
]

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME_BANNER = (
    "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "<i>–Ø –ø–æ–º–æ–≥—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª.</i>\n"
)

COMMANDS_TEXT = (
    "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    "\n"
    "<b>ü§ñ /start</b> ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
    "<b>‚ÑπÔ∏è /help</b> ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
    "<b>üìù /post</b> ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç (—Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞)\n"
    "<b>‚ùå /cancel</b> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
    "<b>üìÉ /commands</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
    "<b>üõ†Ô∏è /admin</b> ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
    "<b>üìä /stats</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
    "<b>‚öôÔ∏è /settings</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
)

# –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
FORBIDDEN_WORDS = ['badword1', 'badword2', 'spam']

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
POST_TEXT, POST_MEDIA = range(2)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s'
)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_reaction_keyboard(reactions):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –∏—Ö —Å—á–µ—Ç—á–∏–∫–∞–º–∏"""
    return [
        [
            InlineKeyboardButton(
                f"{REACTION_EMOJIS[i]} {reactions.get(REACTION_NAMES[i], 0)}",
                callback_data=f"react_{REACTION_NAMES[i]}"
            )
            for i in range(3)
        ]
    ]


def contains_forbidden(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
    return any(word.lower() in (text or '').lower()
               for word in FORBIDDEN_WORDS)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return

    if update.effective_user and update.effective_user.id == ADMIN_ID:
        reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            WELCOME_BANNER + "\n" + COMMANDS_TEXT +
            "\n\n–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            WELCOME_BANNER + "\n" + COMMANDS_TEXT,
            parse_mode="HTML"
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.message:
        return

    await update.message.reply_text(
        "<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å</b>\n\n"
        "–Ø –º–æ–≥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å <b>—Ç–µ–∫—Å—Ç</b> –∏ <b>–º–µ–¥–∏–∞</b> –≤ –∫–∞–Ω–∞–ª.\n"
        "–¢–æ–ª—å–∫–æ <b>–∞–¥–º–∏–Ω</b> –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.\n\n"
        "<b>–ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:</b>\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ /post\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞\n"
        "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "üìù /post ‚Äî –Ω–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞\n"
        "‚ùå /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
        "üìã /commands ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
        "üõ†Ô∏è /admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "üìä /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)\n"
        "‚öôÔ∏è /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–¥–º–∏–Ω)\n\n"
        "<i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ /post.</i>",
        parse_mode="HTML"
    )


async def commands_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /commands"""
    if not update.message:
        return
    await update.message.reply_text(COMMANDS_TEXT, parse_mode="HTML")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    if not update.message:
        return ConversationHandler.END
    await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not update.effective_user or not update.message:
        return
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = [
        [
            InlineKeyboardButton("üìã –ö–æ–º–∞–Ω–¥—ã", callback_data='commands'),
            InlineKeyboardButton("üìù –ü–æ—Å—Ç", callback_data='post')
        ],
        [
            InlineKeyboardButton("üìÑ –õ–æ–≥–∏", callback_data='logs'),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "<b>üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )


async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    if not query or not update.effective_user:
        return

    await query.answer()

    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not hasattr(query, 'data') or query.data is None:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    if query.data == 'commands':
        await query.edit_message_text(COMMANDS_TEXT, parse_mode="HTML")
    elif query.data == 'post':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ /post –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")
    elif query.data == 'logs':
        try:
            with open('bot.log', 'r') as f:
                log_content = f.read()[-2000:]
            await query.edit_message_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n{log_content}")
        except Exception:
            await query.edit_message_text("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
    elif query.data == 'cancel':
        await query.edit_message_text(
            "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞."
        )
    elif query.data == 'stats':
        await query.edit_message_text(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n–ü–æ—Å—Ç–æ–≤: 42\n–û—à–∏–±–æ–∫: 3",
            parse_mode="HTML"
        )
    elif query.data == 'settings':
        await query.edit_message_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
            "(–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)",
            parse_mode="HTML"
        )
    elif query.data == 'back':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        keyboard = [
            [
                InlineKeyboardButton("üìã –ö–æ–º–∞–Ω–¥—ã", callback_data='commands'),
                InlineKeyboardButton("üìù –ü–æ—Å—Ç", callback_data='post')
            ],
            [
                InlineKeyboardButton("üìÑ –õ–æ–≥–∏", callback_data='logs'),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "<b>üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–æ–∫ ---
async def handle_main_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π reply-–∫–Ω–æ–ø–æ–∫"""
    if not update.message:
        return

    text = update.message.text

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ context.user_data ‚Äî dict
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        if context.user_data.get('zodiac'):
            reply_markup = ReplyKeyboardMarkup(POSTS_KEYBOARD,
                                               resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:",
                                            reply_markup=reply_markup)
            context.user_data.pop('zodiac', None)
        else:
            reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD,
                                               resize_keyboard=True)
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                                            reply_markup=reply_markup)
        return

    if text == "–ü–æ—Å—Ç—ã":
        reply_markup = ReplyKeyboardMarkup(
            POSTS_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:",
                                        reply_markup=reply_markup)
    elif text == "üìù –ü–æ—Å—Ç":
        await post_start(update, context)
    elif text == "üìÑ –õ–æ–≥–∏":
        # –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if update.effective_user and update.effective_user.id == ADMIN_ID:
            try:
                with open('bot.log', 'r') as f:
                    log_content = f.read()[-2000:]
                await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n{log_content}")
            except Exception:
                await update.message.reply_text("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    elif text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await admin_panel(update, context)
    elif text == "üìã –ö–æ–º–∞–Ω–¥—ã":
        await commands_command(update, context)
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Å–ª–∞–Ω–∏—è
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ images –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞
        images_dir = os.path.join(os.path.dirname(__file__), "images")
        image_path = os.path.join(images_dir, "–ü–æ—Å–ª–∞–Ω–∏–µ1 –∞–≤–≥—É—Å—Ç–∞.jpg")
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        if not os.path.exists(image_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            context.user_data['preview'] = {
                'type': 'text',
                'text': "–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
            }
            context.user_data['zodiac'] = True
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–µ–∞–∫—Ü–∏–π
            context.user_data['reactions'] = {k: 0 for k in REACTION_NAMES}
            context.user_data['reaction_users'] = {k: set()
                                                   for k in REACTION_NAMES}

            keyboard = (ZODIAC_INLINE_KEYBOARD +
                        get_reaction_keyboard(context.user_data['reactions']))
            await update.message.reply_text(
                "–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            try:
                with open(image_path, "rb") as img:
                    context.user_data['preview'] = {
                        'type': 'photo',
                        'file': image_path,
                        'caption': "–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
                    }
                    context.user_data['zodiac'] = True
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–µ–∞–∫—Ü–∏–π
                    context.user_data['reactions'] = {k: 0 for k in REACTION_NAMES}
                    context.user_data['reaction_users'] = {k: set()
                                                           for k in REACTION_NAMES}

                    keyboard = (ZODIAC_INLINE_KEYBOARD +
                                get_reaction_keyboard(context.user_data['reactions']))
                    await update.message.reply_photo(
                        img,
                        caption="–í–µ—á–µ—Ä–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            except Exception:
                if update.message:
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
                    )
    elif text in ["–ì–æ—Ä–æ—Å–∫–æ–ø", "–ö–∞—Ä—Ç–∞ –¥–Ω—è", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
                  "–õ—É–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", "–°–≤–æ–±–æ–¥–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤
        context.user_data['preview'] = {
            'type': 'text',
            'text': f"{text}: –ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞"
        }
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
                                  callback_data='confirm_post')],
            [InlineKeyboardButton("‚úèÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å",
                                  callback_data='cancel_post')]
        ]
        await update.message.reply_text(
            f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞: {text}\n\n–ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π ---
async def reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    if not query or not hasattr(query, 'data') or query.data is None:
        return

    await query.answer()
    data = query.data

    if not isinstance(data, str):
        return

    if data.startswith("react_"):
        reaction = data.replace("react_", "")
        user_id = update.effective_user.id if update.effective_user else None

        if not user_id:
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
        if not hasattr(context, 'user_data') or context.user_data is None:
            context.user_data = {}
        if 'reactions' not in context.user_data:
            context.user_data['reactions'] = {k: 0 for k in REACTION_NAMES}
        if 'reaction_users' not in context.user_data:
            context.user_data['reaction_users'] = {k: set()
                                                   for k in REACTION_NAMES}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏
        try:
            idx = REACTION_NAMES.index(reaction)
        except ValueError:
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id not in context.user_data['reaction_users'][reaction]:
            context.user_data['reactions'][reaction] += 1
            context.user_data['reaction_users'][reaction].add(user_id)

            try:
                await query.answer(REACTION_MESSAGES[idx], show_alert=True)
            except Exception:
                pass
        else:
            try:
                await query.answer("–í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é",
                                   show_alert=True)
            except Exception:
                pass

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = (ZODIAC_INLINE_KEYBOARD +
                    get_reaction_keyboard(context.user_data['reactions']))
        try:
            await query.edit_message_reply_markup(
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception:
            pass


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ ---
async def zodiac_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    query = update.callback_query
    if not query or not hasattr(query, 'data') or query.data is None:
        return

    await query.answer()
    data = query.data

    if not isinstance(data, str):
        return

    if data.startswith("zodiac_"):
        zodiac_name = data.replace("zodiac_", "")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if not hasattr(context, 'user_data') or context.user_data is None:
            context.user_data = {}

        context.user_data['preview'] = {
            'type': 'text',
            'text': f"–ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–∞: {zodiac_name}"
        }

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {zodiac_name}", show_alert=True)

        # –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        show_publish = False
        try:
            user_id = update.effective_user.id if update.effective_user else None
            if user_id == ADMIN_ID:
                show_publish = True
        except Exception:
            pass

        if show_publish:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
                                      callback_data='confirm_post')]
            ]
            await query.edit_message_caption(
                caption=f"–ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–∞: {zodiac_name}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_caption(
                caption=f"–ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–∞: {zodiac_name}",
                reply_markup=None
            )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤ ---
async def preview_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞"""
    query = update.callback_query
    if not query:
        return

    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}

    preview = context.user_data.get('preview')
    if not preview:
        await query.edit_message_text("–ù–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    if query.data == 'confirm_post':
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
        if preview['type'] == 'photo':
            with open(preview['file'], 'rb') as img:
                await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=img,
                    caption=preview['caption']
                )
        elif preview['type'] == 'text':
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=preview['text']
            )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        try:
            await query.edit_message_caption(
                caption="–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!",
                reply_markup=None
            )
        except Exception:
            await query.edit_message_text(
                "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!",
                reply_markup=None
            )

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if context.user_data and isinstance(context.user_data, dict):
            context.user_data.pop('preview', None)

    elif query.data == 'cancel_post':
        await query.edit_message_text(
            "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
        )
        if context.user_data and isinstance(context.user_data, dict):
            context.user_data.pop('preview', None)


# --- ConversationHandler –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ ---
async def post_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    if not update.effective_user or not update.message:
        return ConversationHandler.END

    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ª–∏–±–æ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return POST_TEXT


async def post_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if not update.message or not update.effective_user:
        return ConversationHandler.END

    text = update.message.text or ""

    if contains_forbidden(text):
        await update.message.reply_text(
            "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )
        logging.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {text}")
        return ConversationHandler.END

    if not text:
        await update.message.reply_text(
            "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ."
        )
        return POST_TEXT

    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    await update.message.reply_text("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
    logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {text}")
    return ConversationHandler.END


async def post_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –ø–æ—Å—Ç–∞"""
    if not update.message or not update.effective_user:
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        caption = update.message.caption or ""

        if contains_forbidden(caption):
            await update.message.reply_text(
                "–í –ø–æ–¥–ø–∏—Å–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
            logging.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ñ–æ—Ç–æ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {caption}")
            return ConversationHandler.END

        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=file_id,
            caption=caption
        )
        await update.message.reply_text("–§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
        logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ: {caption}")
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if update.message.document:
        file_id = update.message.document.file_id
        caption = update.message.caption or ""

        if contains_forbidden(caption):
            await update.message.reply_text(
                "–í –ø–æ–¥–ø–∏—Å–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
            logging.info(
                f"–û—Ç–∫–ª–æ–Ω—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {caption}")
            return ConversationHandler.END

        await context.bot.send_document(
            chat_id=CHANNEL_ID,
            document=file_id,
            caption=caption
        )
        await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
        logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {caption}")
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    if update.message.video:
        file_id = update.message.video.file_id
        caption = update.message.caption or ""

        if contains_forbidden(caption):
            await update.message.reply_text(
                "–í –ø–æ–¥–ø–∏—Å–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
            logging.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {caption}")
            return ConversationHandler.END

        await context.bot.send_video(
            chat_id=CHANNEL_ID,
            video=file_id,
            caption=caption
        )
        await update.message.reply_text("–í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
        logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–∏–¥–µ–æ: {caption}")
        return ConversationHandler.END

    # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞
    await update.message.reply_text(
        "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∏–¥–µ–æ."
    )
    return POST_TEXT


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    import sys

    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python: {sys.executable}")

    if not BOT_TOKEN:
        print(
            "[–û–®–ò–ë–ö–ê] BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN.")
        exit(1)

    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")

    app = ApplicationBuilder().token(
        BOT_TOKEN).connect_timeout(60).read_timeout(60).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("commands", commands_command))
    app.add_handler(CommandHandler("admin", admin_panel))

    # ConversationHandler –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("post", post_start)],
        states={
            POST_TEXT: [
                MessageHandler(filters.TEXT & (~filters.COMMAND), post_text),
                MessageHandler(
                    filters.PHOTO | filters.Document.ALL | filters.VIDEO,
                    post_media
                )
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(admin_callback, pattern=None))
    app.add_handler(
        CallbackQueryHandler(
            preview_callback,
            pattern='^(confirm_post|cancel_post)$'
        )
    )
    app.add_handler(
        CallbackQueryHandler(zodiac_callback, pattern=r'^zodiac_.*$')
    )
    app.add_handler(
        CallbackQueryHandler(reaction_callback, pattern=r'^react_.*$')
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply-–∫–Ω–æ–ø–æ–∫
    all_buttons = ([btn for row in MAIN_KEYBOARD for btn in row] +
                   [btn for row in POSTS_KEYBOARD for btn in row])
    regex_pattern = "^(" + "|".join(
        map(lambda s: s.replace("(", "\\(").replace(")", "\\)")
            .replace(".", "\\.").replace("+", "\\+")
            .replace("?", "\\?").replace("|", "\\|"),
            all_buttons)
    ) + ")$"

    app.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex(regex_pattern),
            handle_main_keyboard
        )
    )

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    app.run_polling()
