# main_bot_simple.py - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from flask import Flask, request, jsonify
import requests
import json
import os
import logging
import sys
from threading import Thread
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
def handle_start_command(chat_id, token):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ "–≠—Ç–æ –≤—Å—ë —Ç—ã"!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
/chat - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å ChatGPT
/zodiac - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
/reaction - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT!
    """
    send_message(chat_id, welcome_text, token)

def handle_help_command(chat_id, token):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/chat <—Ç–µ–∫—Å—Ç> - –¥–∏–∞–ª–æ–≥ —Å ChatGPT
/zodiac <–¥–∞—Ç–∞> - –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /zodiac 15.07)
/reaction - —Å–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è

üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å ChatGPT!
    """
    send_message(chat_id, help_text, token)

def handle_chat_command(chat_id, text, token):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chat –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT (–∑–∞–≥–ª—É—à–∫–∞)
        response_text = f"ü§ñ ChatGPT: –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: '{text}'\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞."
        send_message(chat_id, response_text, token)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ChatGPT: {e}")
        send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", token)

def handle_zodiac_command(chat_id, date_text, token):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /zodiac"""
    zodiac_signs = {
        "aries": "‚ôà –û–≤–µ–Ω (21.03 - 19.04)",
        "taurus": "‚ôâ –¢–µ–ª–µ—Ü (20.04 - 20.05)",
        "gemini": "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã (21.05 - 20.06)",
        "cancer": "‚ôã –†–∞–∫ (21.06 - 22.07)",
        "leo": "‚ôå –õ–µ–≤ (23.07 - 22.08)",
        "virgo": "‚ôç –î–µ–≤–∞ (23.08 - 22.09)",
        "libra": "‚ôé –í–µ—Å—ã (23.09 - 22.10)",
        "scorpio": "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω (23.10 - 21.11)",
        "sagittarius": "‚ôê –°—Ç—Ä–µ–ª–µ—Ü (22.11 - 21.12)",
        "capricorn": "‚ôë –ö–æ–∑–µ—Ä–æ–≥ (22.12 - 19.01)",
        "aquarius": "‚ôí –í–æ–¥–æ–ª–µ–π (20.01 - 18.02)",
        "pisces": "‚ôì –†—ã–±—ã (19.02 - 20.03)"
    }
    
    if not date_text:
        send_message(chat_id, "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: /zodiac 15.07", token)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    sign_text = "üîÆ –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ‚ôå –õ–µ–≤\n\n–≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ."
    send_message(chat_id, sign_text, token)

def handle_reaction_command(chat_id, token):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reaction"""
    reactions = [
        "üòÇ –°–º–µ—à–Ω–æ!",
        "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...",
        "üòç –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!",
        "üî• –û–≥–æ–Ω—å!",
        "üíØ –ò–¥–µ–∞–ª—å–Ω–æ!",
        "üòé –ö—Ä—É—Ç–æ!",
        "üéâ –ü—Ä–∞–∑–¥–Ω—É–µ–º!",
        "‚ö° –ü–æ—Ç—Ä—è—Å–∞—é—â–µ!"
    ]
    
    import random
    reaction = random.choice(reactions)
    send_message(chat_id, f"üé≠ –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è: {reaction}", token)

def send_message(chat_id, text, token):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    try:
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤ —á–∞—Ç {chat_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "status": "healthy",
        "service": "telegram-bot-simple", 
        "version": "1.0.0",
        "python_version": sys.version.split()[0]
    })

@app.route('/webhook/<token>', methods=['POST'])
def webhook(token):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            data = request.get_json()
            if not data:
                logger.warning("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ webhook")
                return '', 200
        except Exception as json_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error}")
            return 'Invalid JSON', 400
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'message' in data:
            message = data['message']
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '')
            
            if not chat_id:
                logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id")
                return '', 200
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç —á–∞—Ç–∞ {chat_id}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text.startswith('/start'):
                handle_start_command(chat_id, token)
            elif text.startswith('/help'):
                handle_help_command(chat_id, token)
            elif text.startswith('/chat'):
                chat_text = text[5:].strip() if len(text) > 5 else "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                handle_chat_command(chat_id, chat_text, token)
            elif text.startswith('/zodiac'):
                date_text = text[7:].strip() if len(text) > 7 else ""
                handle_zodiac_command(chat_id, date_text, token)
            elif text.startswith('/reaction'):
                handle_reaction_command(chat_id, token)
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ChatGPT
                handle_chat_command(chat_id, text, token)
        
        return '', 200
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ webhook: {e}")
        return 'Internal Error', 500

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 8080))
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN
    bot_token = os.environ.get('BOT_TOKEN')
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    logger.info(f"‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {bot_token[:10]}...")
    
    # –ó–∞–ø—É—Å–∫ Flask
    try:
        run_flask()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")
        sys.exit(1)
