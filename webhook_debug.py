# webhook_debug.py - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ webhook
import logging
import os
from flask import Flask, request, jsonify

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "webhook_debug": "active"})

@app.route('/webhook/<token>', methods=['POST'])
def webhook_debug(token):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π webhook —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        logger.info(f"üéØ Webhook –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:10]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN
        bot_token = os.environ.get('BOT_TOKEN')
        logger.info(f"üîë BOT_TOKEN –∏–∑ env: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if bot_token else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        if bot_token and token != bot_token:
            logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –≤ URL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å BOT_TOKEN")
            return '', 404
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            data = request.get_json()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data is not None}")
            if data:
                logger.info(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}, –∫–ª—é—á–∏: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ dict'}")
        except Exception as json_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error}")
            return '', 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if data and 'message' in data:
            try:
                msg = data['message']
                text = msg.get('text', '')
                user_id = msg.get('from', {}).get('id', 'unknown')
                chat_id = msg.get('chat', {}).get('id', user_id)
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —á–∞—Ç {chat_id}, —Ç–µ–∫—Å—Ç: '{text}'")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ /test
                if text == '/test':
                    try:
                        import requests
                        use_token = bot_token or token
                        url = f"https://api.telegram.org/bot{use_token}/sendMessage"
                        response_data = {
                            "chat_id": chat_id,
                            "text": "‚úÖ WEBHOOK –ò–°–ü–†–ê–í–õ–ï–ù! –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
                        }
                        resp = requests.post(url, json=response_data, timeout=10)
                        logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {resp.status_code}")
                        if resp.status_code != 200:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {resp.text}")
                    except Exception as send_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
            except Exception as msg_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_error}")
        
        logger.info("‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return '', 200
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        return '', 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=True)
