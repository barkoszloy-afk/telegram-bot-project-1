#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ChatGPT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pytest-asyncio
"""

import pytest
import sys
import os

# –î–æ–±–∞–≤–∏–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/konstantinbaranov/Desktop/eto vse ty/telegram-bot-project-1')

from utils.openai_client import ChatGPTClient

@pytest.mark.asyncio
async def test_chatgpt_client_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ChatGPT –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChatGPT –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = ChatGPTClient()
        assert client is not None
        print("‚úÖ ChatGPT –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        is_available = client.is_available()
        print(f"üìä API –¥–æ—Å—Ç—É–ø–µ–Ω: {is_available}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        pytest.skip(f"ChatGPT –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

@pytest.mark.asyncio
async def test_chatgpt_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ChatGPT"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ChatGPT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = ChatGPTClient()
        
        if not client.is_available():
            pytest.skip("OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –∫–ª—é—á–∞ –∏–ª–∏ –∫–≤–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        print("üìù –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        test_user_id = 12345
        response = await client.chat_completion("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", test_user_id)
        
        assert response is not None
        assert isinstance(response, dict)
        assert "success" in response
        
        if response["success"]:
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {str(response['response'])[:100]}...")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response['response']}")
            # –ù–µ –ø–∞–¥–∞–µ–º –Ω–∞ –æ—à–∏–±–∫–µ API - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–≤–æ—Ç—ã
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        pytest.skip(f"ChatGPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

@pytest.mark.asyncio        
async def test_chatgpt_horoscope_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    print("üîÆ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞...")
    
    try:
        client = ChatGPTClient()
        
        if not client.is_available():
            pytest.skip("OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        test_user_id = 12345
        horoscope = await client.generate_horoscope("leo", test_user_id)
        
        assert horoscope is not None
        assert isinstance(horoscope, str)
        assert len(horoscope) > 0
        print(f"‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {horoscope[:100]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        pytest.skip(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

@pytest.mark.asyncio
async def test_chatgpt_morning_message():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print("üåÖ –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        client = ChatGPTClient()
        
        if not client.is_available():
            pytest.skip("OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        test_user_id = 12345
        morning = await client.generate_morning_message(test_user_id)
        
        assert morning is not None
        assert isinstance(morning, str)
        assert len(morning) > 0
        print(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {morning[:100]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pytest.skip(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")

@pytest.mark.asyncio
async def test_chatgpt_conversation_management():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    print("üí¨ –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...")
    
    try:
        client = ChatGPTClient()
        test_user_id = 12345
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        initial_length = client.get_conversation_length(test_user_id)
        assert isinstance(initial_length, int)
        assert initial_length >= 0
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {initial_length}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        result = client.clear_conversation(test_user_id)
        assert isinstance(result, bool)
        print(f"üóëÔ∏è –†–∞–∑–≥–æ–≤–æ—Ä –æ—á–∏—â–µ–Ω: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ —Å—Ç–∞–ª–∞ 0
        cleared_length = client.get_conversation_length(test_user_id)
        assert cleared_length == 0
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º: {e}")
        pytest.fail(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ API: {e}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ pytest –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
    pytest.main([__file__, "-v"])
