# test_new_structure.py - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

import asyncio
from telegram import Update, CallbackQuery, Message, User, Chat
from telegram.ext import ContextTypes
from unittest.mock import AsyncMock, MagicMock
from datetime import datetime

def test_new_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–µ–Ω—é"""
    
    print("üß™ –¢–ï–°–¢ –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    try:
        # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        from utils.keyboards import (
            create_main_menu_keyboard,
            create_motivation_submenu, 
            create_esoteric_submenu,
            create_development_submenu,
            create_health_submenu,
            create_relationships_submenu,
            create_zodiac_keyboard
        )
        print("‚úÖ 1. –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä: OK")
        
        # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu = create_main_menu_keyboard()
        categories = main_menu.inline_keyboard
        print(f"‚úÖ 2. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_names = []
        for row in categories:
            for button in row:
                category_names.append(button.text)
        
        expected_categories = ["üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "üîÆ –≠–∑–æ—Ç–µ—Ä–∏–∫–∞", "üéØ –†–∞–∑–≤–∏—Ç–∏–µ", "üåü –ó–¥–æ—Ä–æ–≤—å–µ", "üíù –û—Ç–Ω–æ—à–µ–Ω–∏—è"]
        print(f"   üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(category_names)}")
        
        # 3. –¢–µ—Å—Ç –ø–æ–¥–º–µ–Ω—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        motivation_menu = create_motivation_submenu()
        motivation_options = len(motivation_menu.inline_keyboard)
        print(f"‚úÖ 3. –ü–æ–¥–º–µ–Ω—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {motivation_options} –æ–ø—Ü–∏–π")
        
        # 4. –¢–µ—Å—Ç –ø–æ–¥–º–µ–Ω—é —ç–∑–æ—Ç–µ—Ä–∏–∫–∏  
        esoteric_menu = create_esoteric_submenu()
        esoteric_options = len(esoteric_menu.inline_keyboard)
        print(f"‚úÖ 4. –ü–æ–¥–º–µ–Ω—é —ç–∑–æ—Ç–µ—Ä–∏–∫–∏: {esoteric_options} –æ–ø—Ü–∏–π")
        
        # 5. –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–æ–¥–∏–∞–∫–∞
        zodiac_menu = create_zodiac_keyboard()
        zodiac_rows = len(zodiac_menu.inline_keyboard)
        print(f"‚úÖ 5. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–æ–¥–∏–∞–∫–∞: {zodiac_rows} —Ä—è–¥–æ–≤")
        
        # 6. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        from main_bot import (
            start_command,
            show_main_menu, 
            handle_category_selection,
            handle_motivation_selection,
            handle_esoteric_selection,
            handle_zodiac_selection
        )
        print("‚úÖ 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π: OK")
        
        # 7. –¢–µ—Å—Ç callback_data
        callback_tests = {
            "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "category_motivation": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", 
            "category_esoteric": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ç–∑–æ—Ç–µ—Ä–∏–∫–∞",
            "motivation_morning": "–£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è",
            "motivation_evening": "–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
            "esoteric_horoscope": "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å",
            "zodiac_–æ–≤–µ–Ω": "–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –û–≤–µ–Ω"
        }
        
        print("‚úÖ 7. Callback –¥–∞–Ω–Ω—ã–µ:")
        for callback, description in callback_tests.items():
            print(f"   üîó {callback} ‚Üí {description}")
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        print("‚úÖ 8. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:")
        print("   üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("   ‚îú‚îÄ‚îÄ üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ üåô –í–µ—á–µ—Ä–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è") 
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ üí™ –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π")
        print("   ‚îÇ   ‚îî‚îÄ‚îÄ üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π")
        print("   ‚îú‚îÄ‚îÄ üîÆ –≠–∑–æ—Ç–µ—Ä–∏–∫–∞")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å ‚Üí 12 –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è")
        print("   ‚îÇ   ‚îî‚îÄ‚îÄ üÉè –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ")
        print("   ‚îú‚îÄ‚îÄ üéØ –†–∞–∑–≤–∏—Ç–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        print("   ‚îú‚îÄ‚îÄ üåü –ó–¥–æ—Ä–æ–≤—å–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        print("   ‚îî‚îÄ‚îÄ üíù –û—Ç–Ω–æ—à–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–®–õ–ò!")
        print("üì± –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_keyboard_structure():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–õ–ê–í–ò–ê–¢–£–†")
    print("=" * 40)
    
    try:
        from utils.keyboards import create_main_menu_keyboard, create_zodiac_keyboard
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_keyboard = create_main_menu_keyboard()
        print("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        for i, row in enumerate(main_keyboard.inline_keyboard):
            for j, button in enumerate(row):
                print(f"   [{i},{j}] {button.text} ‚Üí {button.callback_data}")
        
        # –¢–µ—Å—Ç –∑–æ–¥–∏–∞–∫–∞
        zodiac_keyboard = create_zodiac_keyboard()
        print("\nüîÆ –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞:")
        for i, row in enumerate(zodiac_keyboard.inline_keyboard):
            for j, button in enumerate(row):
                print(f"   [{i},{j}] {button.text} ‚Üí {button.callback_data}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    result1 = test_new_structure()
    result2 = test_keyboard_structure()
    
    if result1 and result2:
        print("\nüèÜ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´!")
        print("üöÄ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•")
